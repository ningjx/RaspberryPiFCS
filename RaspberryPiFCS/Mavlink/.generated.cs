/*
MAVLink protocol implementation (auto-generated by mavgen.py)

Generated from: common.xml

Note: this file has been auto-generated. DO NOT EDIT
*/

using System;


using System.Reflection;

//[assembly: AssemblyTitle("Mavlink Classes")]
//[assembly: AssemblyDescription("Generated Message Classes for Mavlink. See http://qgroundcontrol.org/mavlink/start")]
//[assembly: AssemblyProduct("Mavlink")]
//[assembly: AssemblyVersion("1.0.0.0")]
//[assembly: AssemblyFileVersion("1.0.0.0")]

namespace MavLink
{

    /// <summary>
    /// Micro air vehicle / autopilot classes. This identifies the individual model.
    /// </summary>
    public enum MAV_AUTOPILOT : uint
    {

        /// <summary>
        /// Generic autopilot, full support for everything
        /// </summary>
        MAV_AUTOPILOT_GENERIC = 0,

        /// <summary>
        /// Reserved for future use.
        /// </summary>
        MAV_AUTOPILOT_RESERVED = 1,

        /// <summary>
        /// SLUGS autopilot, http://slugsuav.soe.ucsc.edu
        /// </summary>
        MAV_AUTOPILOT_SLUGS = 2,

        /// <summary>
        /// ArduPilot - Plane/Copter/Rover/Sub/Tracker, https://ardupilot.org
        /// </summary>
        MAV_AUTOPILOT_ARDUPILOTMEGA = 3,

        /// <summary>
        /// OpenPilot, http://openpilot.org
        /// </summary>
        MAV_AUTOPILOT_OPENPILOT = 4,

        /// <summary>
        /// Generic autopilot only supporting simple waypoints
        /// </summary>
        MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY = 5,

        /// <summary>
        /// Generic autopilot supporting waypoints and other simple navigation commands
        /// </summary>
        MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY = 6,

        /// <summary>
        /// Generic autopilot supporting the full mission command set
        /// </summary>
        MAV_AUTOPILOT_GENERIC_MISSION_FULL = 7,

        /// <summary>
        /// No valid autopilot, e.g. a GCS or other MAVLink component
        /// </summary>
        MAV_AUTOPILOT_INVALID = 8,

        /// <summary>
        /// PPZ UAV - http://nongnu.org/paparazzi
        /// </summary>
        MAV_AUTOPILOT_PPZ = 9,

        /// <summary>
        /// UAV Dev Board
        /// </summary>
        MAV_AUTOPILOT_UDB = 10,

        /// <summary>
        /// FlexiPilot
        /// </summary>
        MAV_AUTOPILOT_FP = 11,

        /// <summary>
        /// PX4 Autopilot - http://px4.io/
        /// </summary>
        MAV_AUTOPILOT_PX4 = 12,

        /// <summary>
        /// SMACCMPilot - http://smaccmpilot.org
        /// </summary>
        MAV_AUTOPILOT_SMACCMPILOT = 13,

        /// <summary>
        /// AutoQuad -- http://autoquad.org
        /// </summary>
        MAV_AUTOPILOT_AUTOQUAD = 14,

        /// <summary>
        /// Armazila -- http://armazila.com
        /// </summary>
        MAV_AUTOPILOT_ARMAZILA = 15,

        /// <summary>
        /// Aerob -- http://aerob.ru
        /// </summary>
        MAV_AUTOPILOT_AEROB = 16,

        /// <summary>
        /// ASLUAV autopilot -- http://www.asl.ethz.ch
        /// </summary>
        MAV_AUTOPILOT_ASLUAV = 17,

        /// <summary>
        /// SmartAP Autopilot - http://sky-drones.com
        /// </summary>
        MAV_AUTOPILOT_SMARTAP = 18,

        /// <summary>
        /// AirRails - http://uaventure.com
        /// </summary>
        MAV_AUTOPILOT_AIRRAILS = 19,
        MAV_AUTOPILOT_ENUM_END = 20,

    }


    /// <summary>
    /// MAVLINK component type reported in HEARTBEAT message. Flight controllers must report the type of the vehicle on which they are mounted (e.g. MAV_TYPE_OCTOROTOR). All other components must report a value appropriate for their type (e.g. a camera must use MAV_TYPE_CAMERA).
    /// </summary>
    public enum MAV_TYPE : uint
    {

        /// <summary>
        /// Generic micro air vehicle
        /// </summary>
        MAV_TYPE_GENERIC = 0,

        /// <summary>
        /// Fixed wing aircraft.
        /// </summary>
        MAV_TYPE_FIXED_WING = 1,

        /// <summary>
        /// Quadrotor
        /// </summary>
        MAV_TYPE_QUADROTOR = 2,

        /// <summary>
        /// Coaxial helicopter
        /// </summary>
        MAV_TYPE_COAXIAL = 3,

        /// <summary>
        /// Normal helicopter with tail rotor.
        /// </summary>
        MAV_TYPE_HELICOPTER = 4,

        /// <summary>
        /// Ground installation
        /// </summary>
        MAV_TYPE_ANTENNA_TRACKER = 5,

        /// <summary>
        /// Operator control unit / ground control station
        /// </summary>
        MAV_TYPE_GCS = 6,

        /// <summary>
        /// Airship, controlled
        /// </summary>
        MAV_TYPE_AIRSHIP = 7,

        /// <summary>
        /// Free balloon, uncontrolled
        /// </summary>
        MAV_TYPE_FREE_BALLOON = 8,

        /// <summary>
        /// Rocket
        /// </summary>
        MAV_TYPE_ROCKET = 9,

        /// <summary>
        /// Ground rover
        /// </summary>
        MAV_TYPE_GROUND_ROVER = 10,

        /// <summary>
        /// Surface vessel, boat, ship
        /// </summary>
        MAV_TYPE_SURFACE_BOAT = 11,

        /// <summary>
        /// Submarine
        /// </summary>
        MAV_TYPE_SUBMARINE = 12,

        /// <summary>
        /// Hexarotor
        /// </summary>
        MAV_TYPE_HEXAROTOR = 13,

        /// <summary>
        /// Octorotor
        /// </summary>
        MAV_TYPE_OCTOROTOR = 14,

        /// <summary>
        /// Tricopter
        /// </summary>
        MAV_TYPE_TRICOPTER = 15,

        /// <summary>
        /// Flapping wing
        /// </summary>
        MAV_TYPE_FLAPPING_WING = 16,

        /// <summary>
        /// Kite
        /// </summary>
        MAV_TYPE_KITE = 17,

        /// <summary>
        /// Onboard companion controller
        /// </summary>
        MAV_TYPE_ONBOARD_CONTROLLER = 18,

        /// <summary>
        /// Two-rotor VTOL using control surfaces in vertical operation in addition. Tailsitter.
        /// </summary>
        MAV_TYPE_VTOL_DUOROTOR = 19,

        /// <summary>
        /// Quad-rotor VTOL using a V-shaped quad config in vertical operation. Tailsitter.
        /// </summary>
        MAV_TYPE_VTOL_QUADROTOR = 20,

        /// <summary>
        /// Tiltrotor VTOL
        /// </summary>
        MAV_TYPE_VTOL_TILTROTOR = 21,

        /// <summary>
        /// VTOL reserved 2
        /// </summary>
        MAV_TYPE_VTOL_RESERVED2 = 22,

        /// <summary>
        /// VTOL reserved 3
        /// </summary>
        MAV_TYPE_VTOL_RESERVED3 = 23,

        /// <summary>
        /// VTOL reserved 4
        /// </summary>
        MAV_TYPE_VTOL_RESERVED4 = 24,

        /// <summary>
        /// VTOL reserved 5
        /// </summary>
        MAV_TYPE_VTOL_RESERVED5 = 25,

        /// <summary>
        /// Gimbal
        /// </summary>
        MAV_TYPE_GIMBAL = 26,

        /// <summary>
        /// ADSB system
        /// </summary>
        MAV_TYPE_ADSB = 27,

        /// <summary>
        /// Steerable, nonrigid airfoil
        /// </summary>
        MAV_TYPE_PARAFOIL = 28,

        /// <summary>
        /// Dodecarotor
        /// </summary>
        MAV_TYPE_DODECAROTOR = 29,

        /// <summary>
        /// Camera
        /// </summary>
        MAV_TYPE_CAMERA = 30,

        /// <summary>
        /// Charging station
        /// </summary>
        MAV_TYPE_CHARGING_STATION = 31,

        /// <summary>
        /// FLARM collision avoidance system
        /// </summary>
        MAV_TYPE_FLARM = 32,

        /// <summary>
        /// Servo
        /// </summary>
        MAV_TYPE_SERVO = 33,
        MAV_TYPE_ENUM_END = 34,

    }


    /// <summary>
    /// These values define the type of firmware release.  These values indicate the first version or release of this type.  For example the first alpha release would be 64, the second would be 65.
    /// </summary>
    public enum FIRMWARE_VERSION_TYPE : uint
    {

        /// <summary>
        /// development release
        /// </summary>
        FIRMWARE_VERSION_TYPE_DEV = 0,

        /// <summary>
        /// alpha release
        /// </summary>
        FIRMWARE_VERSION_TYPE_ALPHA = 64,

        /// <summary>
        /// beta release
        /// </summary>
        FIRMWARE_VERSION_TYPE_BETA = 128,

        /// <summary>
        /// release candidate
        /// </summary>
        FIRMWARE_VERSION_TYPE_RC = 192,

        /// <summary>
        /// official stable release
        /// </summary>
        FIRMWARE_VERSION_TYPE_OFFICIAL = 255,
        FIRMWARE_VERSION_TYPE_ENUM_END = 256,

    }


    /// <summary>
    /// Flags to report failure cases over the high latency telemtry.
    /// </summary>
    public enum HL_FAILURE_FLAG : uint
    {

        /// <summary>
        /// GPS failure.
        /// </summary>
        HL_FAILURE_FLAG_GPS = 1,

        /// <summary>
        /// Differential pressure sensor failure.
        /// </summary>
        HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE = 2,

        /// <summary>
        /// Absolute pressure sensor failure.
        /// </summary>
        HL_FAILURE_FLAG_ABSOLUTE_PRESSURE = 4,

        /// <summary>
        /// Accelerometer sensor failure.
        /// </summary>
        HL_FAILURE_FLAG_3D_ACCEL = 8,

        /// <summary>
        /// Gyroscope sensor failure.
        /// </summary>
        HL_FAILURE_FLAG_3D_GYRO = 16,

        /// <summary>
        /// Magnetometer sensor failure.
        /// </summary>
        HL_FAILURE_FLAG_3D_MAG = 32,

        /// <summary>
        /// Terrain subsystem failure.
        /// </summary>
        HL_FAILURE_FLAG_TERRAIN = 64,

        /// <summary>
        /// Battery failure/critical low battery.
        /// </summary>
        HL_FAILURE_FLAG_BATTERY = 128,

        /// <summary>
        /// RC receiver failure/no rc connection.
        /// </summary>
        HL_FAILURE_FLAG_RC_RECEIVER = 256,

        /// <summary>
        /// Offboard link failure.
        /// </summary>
        HL_FAILURE_FLAG_OFFBOARD_LINK = 512,

        /// <summary>
        /// Engine failure.
        /// </summary>
        HL_FAILURE_FLAG_ENGINE = 1024,

        /// <summary>
        /// Geofence violation.
        /// </summary>
        HL_FAILURE_FLAG_GEOFENCE = 2048,

        /// <summary>
        /// Estimator failure, for example measurement rejection or large variances.
        /// </summary>
        HL_FAILURE_FLAG_ESTIMATOR = 4096,

        /// <summary>
        /// Mission failure.
        /// </summary>
        HL_FAILURE_FLAG_MISSION = 8192,
        HL_FAILURE_FLAG_ENUM_END = 8193,

    }


    /// <summary>
    /// These flags encode the MAV mode.
    /// </summary>
    public enum MAV_MODE_FLAG : uint
    {

        /// <summary>
        /// 0b00000001 Reserved for future use.
        /// </summary>
        MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1,

        /// <summary>
        /// 0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations.
        /// </summary>
        MAV_MODE_FLAG_TEST_ENABLED = 2,

        /// <summary>
        /// 0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation.
        /// </summary>
        MAV_MODE_FLAG_AUTO_ENABLED = 4,

        /// <summary>
        /// 0b00001000 guided mode enabled, system flies waypoints / mission items.
        /// </summary>
        MAV_MODE_FLAG_GUIDED_ENABLED = 8,

        /// <summary>
        /// 0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around.
        /// </summary>
        MAV_MODE_FLAG_STABILIZE_ENABLED = 16,

        /// <summary>
        /// 0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational.
        /// </summary>
        MAV_MODE_FLAG_HIL_ENABLED = 32,

        /// <summary>
        /// 0b01000000 remote control input is enabled.
        /// </summary>
        MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = 64,

        /// <summary>
        /// 0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly. Additional note: this flag is to be ignore when sent in the command MAV_CMD_DO_SET_MODE and MAV_CMD_COMPONENT_ARM_DISARM shall be used instead. The flag can still be used to report the armed state.
        /// </summary>
        MAV_MODE_FLAG_SAFETY_ARMED = 128,
        MAV_MODE_FLAG_ENUM_END = 129,

    }


    /// <summary>
    /// These values encode the bit positions of the decode position. These values can be used to read the value of a flag bit by combining the base_mode variable with AND with the flag position value. The result will be either 0 or 1, depending on if the flag is set or not.
    /// </summary>
    public enum MAV_MODE_FLAG_DECODE_POSITION : uint
    {

        /// <summary>
        /// Eighth bit: 00000001
        /// </summary>
        MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE = 1,

        /// <summary>
        /// Seventh bit: 00000010
        /// </summary>
        MAV_MODE_FLAG_DECODE_POSITION_TEST = 2,

        /// <summary>
        /// Sixth bit:   00000100
        /// </summary>
        MAV_MODE_FLAG_DECODE_POSITION_AUTO = 4,

        /// <summary>
        /// Fifth bit:  00001000
        /// </summary>
        MAV_MODE_FLAG_DECODE_POSITION_GUIDED = 8,

        /// <summary>
        /// Fourth bit: 00010000
        /// </summary>
        MAV_MODE_FLAG_DECODE_POSITION_STABILIZE = 16,

        /// <summary>
        /// Third bit:  00100000
        /// </summary>
        MAV_MODE_FLAG_DECODE_POSITION_HIL = 32,

        /// <summary>
        /// Second bit: 01000000
        /// </summary>
        MAV_MODE_FLAG_DECODE_POSITION_MANUAL = 64,

        /// <summary>
        /// First bit:  10000000
        /// </summary>
        MAV_MODE_FLAG_DECODE_POSITION_SAFETY = 128,
        MAV_MODE_FLAG_DECODE_POSITION_ENUM_END = 129,

    }


    /// <summary>
    /// Actions that may be specified in MAV_CMD_OVERRIDE_GOTO to override mission execution.
    /// </summary>
    public enum MAV_GOTO : uint
    {

        /// <summary>
        /// Hold at the current position.
        /// </summary>
        MAV_GOTO_DO_HOLD = 0,

        /// <summary>
        /// Continue with the next item in mission execution.
        /// </summary>
        MAV_GOTO_DO_CONTINUE = 1,

        /// <summary>
        /// Hold at the current position of the system
        /// </summary>
        MAV_GOTO_HOLD_AT_CURRENT_POSITION = 2,

        /// <summary>
        /// Hold at the position specified in the parameters of the DO_HOLD action
        /// </summary>
        MAV_GOTO_HOLD_AT_SPECIFIED_POSITION = 3,
        MAV_GOTO_ENUM_END = 4,

    }


    /// <summary>
    /// These defines are predefined OR-combined mode flags. There is no need to use values from this enum, but it
    ///               simplifies the use of the mode flags. Note that manual input is enabled in all modes as a safety override.
    /// </summary>
    public enum MAV_MODE : uint
    {

        /// <summary>
        /// System is not ready to fly, booting, calibrating, etc. No flag is set.
        /// </summary>
        MAV_MODE_PREFLIGHT = 0,

        /// <summary>
        /// System is allowed to be active, under manual (RC) control, no stabilization
        /// </summary>
        MAV_MODE_MANUAL_DISARMED = 64,

        /// <summary>
        /// UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only.
        /// </summary>
        MAV_MODE_TEST_DISARMED = 66,

        /// <summary>
        /// System is allowed to be active, under assisted RC control.
        /// </summary>
        MAV_MODE_STABILIZE_DISARMED = 80,

        /// <summary>
        /// System is allowed to be active, under autonomous control, manual setpoint
        /// </summary>
        MAV_MODE_GUIDED_DISARMED = 88,

        /// <summary>
        /// System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by waypoints)
        /// </summary>
        MAV_MODE_AUTO_DISARMED = 92,

        /// <summary>
        /// System is allowed to be active, under manual (RC) control, no stabilization
        /// </summary>
        MAV_MODE_MANUAL_ARMED = 192,

        /// <summary>
        /// UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only.
        /// </summary>
        MAV_MODE_TEST_ARMED = 194,

        /// <summary>
        /// System is allowed to be active, under assisted RC control.
        /// </summary>
        MAV_MODE_STABILIZE_ARMED = 208,

        /// <summary>
        /// System is allowed to be active, under autonomous control, manual setpoint
        /// </summary>
        MAV_MODE_GUIDED_ARMED = 216,

        /// <summary>
        /// System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by waypoints)
        /// </summary>
        MAV_MODE_AUTO_ARMED = 220,
        MAV_MODE_ENUM_END = 221,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_STATE : uint
    {

        /// <summary>
        /// Uninitialized system, state is unknown.
        /// </summary>
        MAV_STATE_UNINIT = 0,

        /// <summary>
        /// System is booting up.
        /// </summary>
        MAV_STATE_BOOT = 1,

        /// <summary>
        /// System is calibrating and not flight-ready.
        /// </summary>
        MAV_STATE_CALIBRATING = 2,

        /// <summary>
        /// System is grounded and on standby. It can be launched any time.
        /// </summary>
        MAV_STATE_STANDBY = 3,

        /// <summary>
        /// System is active and might be already airborne. Motors are engaged.
        /// </summary>
        MAV_STATE_ACTIVE = 4,

        /// <summary>
        /// System is in a non-normal flight mode. It can however still navigate.
        /// </summary>
        MAV_STATE_CRITICAL = 5,

        /// <summary>
        /// System is in a non-normal flight mode. It lost control over parts or over the whole airframe. It is in mayday and going down.
        /// </summary>
        MAV_STATE_EMERGENCY = 6,

        /// <summary>
        /// System just initialized its power-down sequence, will shut down now.
        /// </summary>
        MAV_STATE_POWEROFF = 7,

        /// <summary>
        /// System is terminating itself.
        /// </summary>
        MAV_STATE_FLIGHT_TERMINATION = 8,
        MAV_STATE_ENUM_END = 9,

    }


    /// <summary>
    /// Component ids (values) for the different types and instances of onboard hardware/software that might make up a MAVLink system (autopilot, cameras, servos, GPS systems, avoidance systems etc.).
    ///      Components must use the appropriate ID in their source address when sending messages. Components can also use IDs to determine if they are the intended recipient of an incoming message. The MAV_COMP_ID_ALL value is used to indicate messages that must be processed by all components.
    ///      When creating new entries, components that can have multiple instances (e.g. cameras, servos etc.) should be allocated sequential values. An appropriate number of values should be left free after these components to allow the number of instances to be expanded.
    /// </summary>
    public enum MAV_COMPONENT : uint
    {

        /// <summary>
        /// Target id (target_component) used to broadcast messages to all components of the receiving system. Components should attempt to process messages with this component ID and forward to components on any other interfaces. Note: This is not a valid *source* component id for a message.
        /// </summary>
        MAV_COMP_ID_ALL = 0,

        /// <summary>
        /// System flight controller component ("autopilot"). Only one autopilot is expected in a particular system.
        /// </summary>
        MAV_COMP_ID_AUTOPILOT1 = 1,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER1 = 25,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER2 = 26,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER3 = 27,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER4 = 28,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER5 = 29,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER6 = 30,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER7 = 31,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER8 = 32,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER9 = 33,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER10 = 34,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER11 = 35,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER12 = 36,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER13 = 37,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER14 = 38,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER15 = 39,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USE16 = 40,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER17 = 41,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER18 = 42,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER19 = 43,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER20 = 44,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER21 = 45,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER22 = 46,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER23 = 47,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER24 = 48,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER25 = 49,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER26 = 50,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER27 = 51,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER28 = 52,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER29 = 53,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER30 = 54,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER31 = 55,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER32 = 56,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER33 = 57,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER34 = 58,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER35 = 59,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER36 = 60,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER37 = 61,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER38 = 62,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER39 = 63,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER40 = 64,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER41 = 65,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER42 = 66,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER43 = 67,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER44 = 68,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER45 = 69,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER46 = 70,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER47 = 71,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER48 = 72,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER49 = 73,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER50 = 74,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER51 = 75,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER52 = 76,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER53 = 77,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER54 = 78,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER55 = 79,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER56 = 80,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER57 = 81,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER58 = 82,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER59 = 83,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER60 = 84,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER61 = 85,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER62 = 86,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER63 = 87,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER64 = 88,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER65 = 89,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER66 = 90,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER67 = 91,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER68 = 92,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER69 = 93,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER70 = 94,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER71 = 95,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER72 = 96,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER73 = 97,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER74 = 98,

        /// <summary>
        /// Id for a component on privately managed MAVLink network. Can be used for any purpose but may not be published by components outside of the private network.
        /// </summary>
        MAV_COMP_ID_USER75 = 99,

        /// <summary>
        /// Camera #1.
        /// </summary>
        MAV_COMP_ID_CAMERA = 100,

        /// <summary>
        /// Camera #2.
        /// </summary>
        MAV_COMP_ID_CAMERA2 = 101,

        /// <summary>
        /// Camera #3.
        /// </summary>
        MAV_COMP_ID_CAMERA3 = 102,

        /// <summary>
        /// Camera #4.
        /// </summary>
        MAV_COMP_ID_CAMERA4 = 103,

        /// <summary>
        /// Camera #5.
        /// </summary>
        MAV_COMP_ID_CAMERA5 = 104,

        /// <summary>
        /// Camera #6.
        /// </summary>
        MAV_COMP_ID_CAMERA6 = 105,

        /// <summary>
        /// Servo #1.
        /// </summary>
        MAV_COMP_ID_SERVO1 = 140,

        /// <summary>
        /// Servo #2.
        /// </summary>
        MAV_COMP_ID_SERVO2 = 141,

        /// <summary>
        /// Servo #3.
        /// </summary>
        MAV_COMP_ID_SERVO3 = 142,

        /// <summary>
        /// Servo #4.
        /// </summary>
        MAV_COMP_ID_SERVO4 = 143,

        /// <summary>
        /// Servo #5.
        /// </summary>
        MAV_COMP_ID_SERVO5 = 144,

        /// <summary>
        /// Servo #6.
        /// </summary>
        MAV_COMP_ID_SERVO6 = 145,

        /// <summary>
        /// Servo #7.
        /// </summary>
        MAV_COMP_ID_SERVO7 = 146,

        /// <summary>
        /// Servo #8.
        /// </summary>
        MAV_COMP_ID_SERVO8 = 147,

        /// <summary>
        /// Servo #9.
        /// </summary>
        MAV_COMP_ID_SERVO9 = 148,

        /// <summary>
        /// Servo #10.
        /// </summary>
        MAV_COMP_ID_SERVO10 = 149,

        /// <summary>
        /// Servo #11.
        /// </summary>
        MAV_COMP_ID_SERVO11 = 150,

        /// <summary>
        /// Servo #12.
        /// </summary>
        MAV_COMP_ID_SERVO12 = 151,

        /// <summary>
        /// Servo #13.
        /// </summary>
        MAV_COMP_ID_SERVO13 = 152,

        /// <summary>
        /// Servo #14.
        /// </summary>
        MAV_COMP_ID_SERVO14 = 153,

        /// <summary>
        /// Gimbal #1.
        /// </summary>
        MAV_COMP_ID_GIMBAL = 154,

        /// <summary>
        /// Logging component.
        /// </summary>
        MAV_COMP_ID_LOG = 155,

        /// <summary>
        /// Automatic Dependent Surveillance-Broadcast (ADS-B) component.
        /// </summary>
        MAV_COMP_ID_ADSB = 156,

        /// <summary>
        /// On Screen Display (OSD) devices for video links.
        /// </summary>
        MAV_COMP_ID_OSD = 157,

        /// <summary>
        /// Generic autopilot peripheral component ID. Meant for devices that do not implement the parameter microservice.
        /// </summary>
        MAV_COMP_ID_PERIPHERAL = 158,

        /// <summary>
        /// Gimbal ID for QX1.
        /// </summary>
        MAV_COMP_ID_QX1_GIMBAL = 159,

        /// <summary>
        /// FLARM collision alert component.
        /// </summary>
        MAV_COMP_ID_FLARM = 160,

        /// <summary>
        /// Gimbal #2.
        /// </summary>
        MAV_COMP_ID_GIMBAL2 = 171,

        /// <summary>
        /// Gimbal #3.
        /// </summary>
        MAV_COMP_ID_GIMBAL3 = 172,

        /// <summary>
        /// Gimbal #4
        /// </summary>
        MAV_COMP_ID_GIMBAL4 = 173,

        /// <summary>
        /// Gimbal #5.
        /// </summary>
        MAV_COMP_ID_GIMBAL5 = 174,

        /// <summary>
        /// Gimbal #6.
        /// </summary>
        MAV_COMP_ID_GIMBAL6 = 175,

        /// <summary>
        /// Component that can generate/supply a mission flight plan (e.g. GCS or developer API).
        /// </summary>
        MAV_COMP_ID_MISSIONPLANNER = 190,

        /// <summary>
        /// Component that finds an optimal path between points based on a certain constraint (e.g. minimum snap, shortest path, cost, etc.).
        /// </summary>
        MAV_COMP_ID_PATHPLANNER = 195,

        /// <summary>
        /// Component that plans a collision free path between two points.
        /// </summary>
        MAV_COMP_ID_OBSTACLE_AVOIDANCE = 196,

        /// <summary>
        /// Component that provides position estimates using VIO techniques.
        /// </summary>
        MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY = 197,

        /// <summary>
        /// Component that manages pairing of vehicle and GCS.
        /// </summary>
        MAV_COMP_ID_PAIRING_MANAGER = 198,

        /// <summary>
        /// Inertial Measurement Unit (IMU) #1.
        /// </summary>
        MAV_COMP_ID_IMU = 200,

        /// <summary>
        /// Inertial Measurement Unit (IMU) #2.
        /// </summary>
        MAV_COMP_ID_IMU_2 = 201,

        /// <summary>
        /// Inertial Measurement Unit (IMU) #3.
        /// </summary>
        MAV_COMP_ID_IMU_3 = 202,

        /// <summary>
        /// GPS #1.
        /// </summary>
        MAV_COMP_ID_GPS = 220,

        /// <summary>
        /// GPS #2.
        /// </summary>
        MAV_COMP_ID_GPS2 = 221,

        /// <summary>
        /// Component to bridge MAVLink to UDP (i.e. from a UART).
        /// </summary>
        MAV_COMP_ID_UDP_BRIDGE = 240,

        /// <summary>
        /// Component to bridge to UART (i.e. from UDP).
        /// </summary>
        MAV_COMP_ID_UART_BRIDGE = 241,

        /// <summary>
        /// Component handling TUNNEL messages (e.g. vendor specific GUI of a component).
        /// </summary>
        MAV_COMP_ID_TUNNEL_NODE = 242,

        /// <summary>
        /// Component for handling system messages (e.g. to ARM, takeoff, etc.).
        /// </summary>
        MAV_COMP_ID_SYSTEM_CONTROL = 250,
        MAV_COMPONENT_ENUM_END = 251,

    }


    /// <summary>
    /// These encode the sensors whose status is sent as part of the SYS_STATUS message.
    /// </summary>
    public enum MAV_SYS_STATUS_SENSOR : uint
    {

        /// <summary>
        /// 0x01 3D gyro
        /// </summary>
        MAV_SYS_STATUS_SENSOR_3D_GYRO = 1,

        /// <summary>
        /// 0x02 3D accelerometer
        /// </summary>
        MAV_SYS_STATUS_SENSOR_3D_ACCEL = 2,

        /// <summary>
        /// 0x04 3D magnetometer
        /// </summary>
        MAV_SYS_STATUS_SENSOR_3D_MAG = 4,

        /// <summary>
        /// 0x08 absolute pressure
        /// </summary>
        MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = 8,

        /// <summary>
        /// 0x10 differential pressure
        /// </summary>
        MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = 16,

        /// <summary>
        /// 0x20 GPS
        /// </summary>
        MAV_SYS_STATUS_SENSOR_GPS = 32,

        /// <summary>
        /// 0x40 optical flow
        /// </summary>
        MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = 64,

        /// <summary>
        /// 0x80 computer vision position
        /// </summary>
        MAV_SYS_STATUS_SENSOR_VISION_POSITION = 128,

        /// <summary>
        /// 0x100 laser based position
        /// </summary>
        MAV_SYS_STATUS_SENSOR_LASER_POSITION = 256,

        /// <summary>
        /// 0x200 external ground truth (Vicon or Leica)
        /// </summary>
        MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = 512,

        /// <summary>
        /// 0x400 3D angular rate control
        /// </summary>
        MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = 1024,

        /// <summary>
        /// 0x800 attitude stabilization
        /// </summary>
        MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = 2048,

        /// <summary>
        /// 0x1000 yaw position
        /// </summary>
        MAV_SYS_STATUS_SENSOR_YAW_POSITION = 4096,

        /// <summary>
        /// 0x2000 z/altitude control
        /// </summary>
        MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = 8192,

        /// <summary>
        /// 0x4000 x/y position control
        /// </summary>
        MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = 16384,

        /// <summary>
        /// 0x8000 motor outputs / control
        /// </summary>
        MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = 32768,

        /// <summary>
        /// 0x10000 rc receiver
        /// </summary>
        MAV_SYS_STATUS_SENSOR_RC_RECEIVER = 65536,

        /// <summary>
        /// 0x20000 2nd 3D gyro
        /// </summary>
        MAV_SYS_STATUS_SENSOR_3D_GYRO2 = 131072,

        /// <summary>
        /// 0x40000 2nd 3D accelerometer
        /// </summary>
        MAV_SYS_STATUS_SENSOR_3D_ACCEL2 = 262144,

        /// <summary>
        /// 0x80000 2nd 3D magnetometer
        /// </summary>
        MAV_SYS_STATUS_SENSOR_3D_MAG2 = 524288,

        /// <summary>
        /// 0x100000 geofence
        /// </summary>
        MAV_SYS_STATUS_GEOFENCE = 1048576,

        /// <summary>
        /// 0x200000 AHRS subsystem health
        /// </summary>
        MAV_SYS_STATUS_AHRS = 2097152,

        /// <summary>
        /// 0x400000 Terrain subsystem health
        /// </summary>
        MAV_SYS_STATUS_TERRAIN = 4194304,

        /// <summary>
        /// 0x800000 Motors are reversed
        /// </summary>
        MAV_SYS_STATUS_REVERSE_MOTOR = 8388608,

        /// <summary>
        /// 0x1000000 Logging
        /// </summary>
        MAV_SYS_STATUS_LOGGING = 16777216,

        /// <summary>
        /// 0x2000000 Battery
        /// </summary>
        MAV_SYS_STATUS_SENSOR_BATTERY = 33554432,

        /// <summary>
        /// 0x4000000 Proximity
        /// </summary>
        MAV_SYS_STATUS_SENSOR_PROXIMITY = 67108864,

        /// <summary>
        /// 0x8000000 Satellite Communication 
        /// </summary>
        MAV_SYS_STATUS_SENSOR_SATCOM = 134217728,

        /// <summary>
        /// 0x10000000 pre-arm check status. Always healthy when armed
        /// </summary>
        MAV_SYS_STATUS_PREARM_CHECK = 268435456,

        /// <summary>
        /// 0x20000000 Avoidance/collision prevention
        /// </summary>
        MAV_SYS_STATUS_OBSTACLE_AVOIDANCE = 536870912,
        MAV_SYS_STATUS_SENSOR_ENUM_END = 536870913,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_FRAME : uint
    {

        /// <summary>
        /// Global (WGS84) coordinate frame + MSL altitude. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL).
        /// </summary>
        MAV_FRAME_GLOBAL = 0,

        /// <summary>
        /// Local coordinate frame, Z-down (x: north, y: east, z: down).
        /// </summary>
        MAV_FRAME_LOCAL_NED = 1,

        /// <summary>
        /// NOT a coordinate frame, indicates a mission command.
        /// </summary>
        MAV_FRAME_MISSION = 2,

        /// <summary>
        /// Global (WGS84) coordinate frame + altitude relative to the home position. First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home location.
        /// </summary>
        MAV_FRAME_GLOBAL_RELATIVE_ALT = 3,

        /// <summary>
        /// Local coordinate frame, Z-up (x: east, y: north, z: up).
        /// </summary>
        MAV_FRAME_LOCAL_ENU = 4,

        /// <summary>
        /// Global (WGS84) coordinate frame (scaled) + MSL altitude. First value / x: latitude in degrees*1.0e-7, second value / y: longitude in degrees*1.0e-7, third value / z: positive altitude over mean sea level (MSL).
        /// </summary>
        MAV_FRAME_GLOBAL_INT = 5,

        /// <summary>
        /// Global (WGS84) coordinate frame (scaled) + altitude relative to the home position. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude with 0 being at the altitude of the home location.
        /// </summary>
        MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6,

        /// <summary>
        /// Offset to the current local frame. Anything expressed in this frame should be added to the current local frame position.
        /// </summary>
        MAV_FRAME_LOCAL_OFFSET_NED = 7,

        /// <summary>
        /// Setpoint in body NED frame. This makes sense if all position control is externalized - e.g. useful to command 2 m/s^2 acceleration to the right.
        /// </summary>
        MAV_FRAME_BODY_NED = 8,

        /// <summary>
        /// Offset in body NED frame. This makes sense if adding setpoints to the current flight path, to avoid an obstacle - e.g. useful to command 2 m/s^2 acceleration to the east.
        /// </summary>
        MAV_FRAME_BODY_OFFSET_NED = 9,

        /// <summary>
        /// Global (WGS84) coordinate frame with AGL altitude (at the waypoint coordinate). First value / x: latitude in degrees, second value / y: longitude in degrees, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
        /// </summary>
        MAV_FRAME_GLOBAL_TERRAIN_ALT = 10,

        /// <summary>
        /// Global (WGS84) coordinate frame (scaled) with AGL altitude (at the waypoint coordinate). First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
        /// </summary>
        MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11,

        /// <summary>
        /// Body fixed frame of reference, Z-down (x: forward, y: right, z: down).
        /// </summary>
        MAV_FRAME_BODY_FRD = 12,

        /// <summary>
        /// Body fixed frame of reference, Z-up (x: forward, y: left, z: up).
        /// </summary>
        MAV_FRAME_BODY_FLU = 13,

        /// <summary>
        /// Odometry local coordinate frame of data given by a motion capture system, Z-down (x: north, y: east, z: down).
        /// </summary>
        MAV_FRAME_MOCAP_NED = 14,

        /// <summary>
        /// Odometry local coordinate frame of data given by a motion capture system, Z-up (x: east, y: north, z: up).
        /// </summary>
        MAV_FRAME_MOCAP_ENU = 15,

        /// <summary>
        /// Odometry local coordinate frame of data given by a vision estimation system, Z-down (x: north, y: east, z: down).
        /// </summary>
        MAV_FRAME_VISION_NED = 16,

        /// <summary>
        /// Odometry local coordinate frame of data given by a vision estimation system, Z-up (x: east, y: north, z: up).
        /// </summary>
        MAV_FRAME_VISION_ENU = 17,

        /// <summary>
        /// Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-down (x: north, y: east, z: down).
        /// </summary>
        MAV_FRAME_ESTIM_NED = 18,

        /// <summary>
        /// Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-up (x: east, y: noth, z: up).
        /// </summary>
        MAV_FRAME_ESTIM_ENU = 19,

        /// <summary>
        /// Forward, Right, Down coordinate frame. This is a local frame with Z-down and arbitrary F/R alignment (i.e. not aligned with NED/earth frame).
        /// </summary>
        MAV_FRAME_LOCAL_FRD = 20,

        /// <summary>
        /// Forward, Left, Up coordinate frame. This is a local frame with Z-up and arbitrary F/L alignment (i.e. not aligned with ENU/earth frame).
        /// </summary>
        MAV_FRAME_LOCAL_FLU = 21,
        MAV_FRAME_ENUM_END = 22,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAVLINK_DATA_STREAM_TYPE : uint
    {
        MAVLINK_DATA_STREAM_IMG_JPEG = 1,
        MAVLINK_DATA_STREAM_IMG_BMP = 2,
        MAVLINK_DATA_STREAM_IMG_RAW8U = 3,
        MAVLINK_DATA_STREAM_IMG_RAW32U = 4,
        MAVLINK_DATA_STREAM_IMG_PGM = 5,
        MAVLINK_DATA_STREAM_IMG_PNG = 6,
        MAVLINK_DATA_STREAM_TYPE_ENUM_END = 7,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum FENCE_ACTION : uint
    {

        /// <summary>
        /// Disable fenced mode
        /// </summary>
        FENCE_ACTION_NONE = 0,

        /// <summary>
        /// Switched to guided mode to return point (fence point 0)
        /// </summary>
        FENCE_ACTION_GUIDED = 1,

        /// <summary>
        /// Report fence breach, but don't take action
        /// </summary>
        FENCE_ACTION_REPORT = 2,

        /// <summary>
        /// Switched to guided mode to return point (fence point 0) with manual throttle control
        /// </summary>
        FENCE_ACTION_GUIDED_THR_PASS = 3,

        /// <summary>
        /// Switch to RTL (return to launch) mode and head for the return point.
        /// </summary>
        FENCE_ACTION_RTL = 4,
        FENCE_ACTION_ENUM_END = 5,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum FENCE_BREACH : uint
    {

        /// <summary>
        /// No last fence breach
        /// </summary>
        FENCE_BREACH_NONE = 0,

        /// <summary>
        /// Breached minimum altitude
        /// </summary>
        FENCE_BREACH_MINALT = 1,

        /// <summary>
        /// Breached maximum altitude
        /// </summary>
        FENCE_BREACH_MAXALT = 2,

        /// <summary>
        /// Breached fence boundary
        /// </summary>
        FENCE_BREACH_BOUNDARY = 3,
        FENCE_BREACH_ENUM_END = 4,

    }


    /// <summary>
    /// Actions being taken to mitigate/prevent fence breach
    /// </summary>
    public enum FENCE_MITIGATE : uint
    {

        /// <summary>
        /// Unknown
        /// </summary>
        FENCE_MITIGATE_UNKNOWN = 0,

        /// <summary>
        /// No actions being taken
        /// </summary>
        FENCE_MITIGATE_NONE = 1,

        /// <summary>
        /// Velocity limiting active to prevent breach
        /// </summary>
        FENCE_MITIGATE_VEL_LIMIT = 2,
        FENCE_MITIGATE_ENUM_END = 3,

    }


    /// <summary>
    /// Enumeration of possible mount operation modes. This message is used by obsolete/deprecated gimbal messages.
    /// </summary>
    public enum MAV_MOUNT_MODE : uint
    {

        /// <summary>
        /// Load and keep safe position (Roll,Pitch,Yaw) from permant memory and stop stabilization
        /// </summary>
        MAV_MOUNT_MODE_RETRACT = 0,

        /// <summary>
        /// Load and keep neutral position (Roll,Pitch,Yaw) from permanent memory.
        /// </summary>
        MAV_MOUNT_MODE_NEUTRAL = 1,

        /// <summary>
        /// Load neutral position and start MAVLink Roll,Pitch,Yaw control with stabilization
        /// </summary>
        MAV_MOUNT_MODE_MAVLINK_TARGETING = 2,

        /// <summary>
        /// Load neutral position and start RC Roll,Pitch,Yaw control with stabilization
        /// </summary>
        MAV_MOUNT_MODE_RC_TARGETING = 3,

        /// <summary>
        /// Load neutral position and start to point to Lat,Lon,Alt
        /// </summary>
        MAV_MOUNT_MODE_GPS_POINT = 4,

        /// <summary>
        /// Gimbal tracks system with specified system ID
        /// </summary>
        MAV_MOUNT_MODE_SYSID_TARGET = 5,
        MAV_MOUNT_MODE_ENUM_END = 6,

    }


    /// <summary>
    /// Gimbal device (low level) capability flags (bitmap)
    /// </summary>
    public enum GIMBAL_DEVICE_CAP_FLAGS : uint
    {

        /// <summary>
        /// Gimbal device supports a retracted position
        /// </summary>
        GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT = 1,

        /// <summary>
        /// Gimbal device supports a horizontal, forward looking position, stabilized
        /// </summary>
        GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL = 2,

        /// <summary>
        /// Gimbal device supports rotating around roll axis.
        /// </summary>
        GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS = 4,

        /// <summary>
        /// Gimbal device supports to follow a roll angle relative to the vehicle
        /// </summary>
        GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW = 8,

        /// <summary>
        /// Gimbal device supports locking to an roll angle (generally that's the default with roll stabilized)
        /// </summary>
        GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK = 16,

        /// <summary>
        /// Gimbal device supports rotating around pitch axis.
        /// </summary>
        GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS = 32,

        /// <summary>
        /// Gimbal device supports to follow a pitch angle relative to the vehicle
        /// </summary>
        GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW = 64,

        /// <summary>
        /// Gimbal device supports locking to an pitch angle (generally that's the default with pitch stabilized)
        /// </summary>
        GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK = 128,

        /// <summary>
        /// Gimbal device supports rotating around yaw axis.
        /// </summary>
        GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS = 256,

        /// <summary>
        /// Gimbal device supports to follow a yaw angle relative to the vehicle (generally that's the default)
        /// </summary>
        GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW = 512,

        /// <summary>
        /// Gimbal device supports locking to an absolute heading (often this is an option available)
        /// </summary>
        GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK = 1024,

        /// <summary>
        /// Gimbal device supports yawing/panning infinetely (e.g. using slip disk).
        /// </summary>
        GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW = 2048,
        GIMBAL_DEVICE_CAP_FLAGS_ENUM_END = 2049,

    }


    /// <summary>
    /// Gimbal manager high level capability flags (bitmap). The first 16 bits are identical to the GIMBAL_DEVICE_CAP_FLAGS which are identical with GIMBAL_DEVICE_FLAGS. However, the gimbal manager does not need to copy the flags from the gimbal but can also enhance the capabilities and thus add flags.
    /// </summary>
    public enum GIMBAL_MANAGER_CAP_FLAGS : uint
    {

        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT = 1,

        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL = 2,

        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS = 4,

        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW = 8,

        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK = 16,

        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS = 32,

        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW = 64,

        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK = 128,

        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS = 256,

        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW = 512,

        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK = 1024,

        /// <summary>
        /// Based on GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW = 2048,

        /// <summary>
        /// Gimbal manager supports to point to a local position.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL = 65536,

        /// <summary>
        /// Gimbal manager supports to point to a global latitude, longitude, altitude position.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL = 131072,

        /// <summary>
        /// Gimbal manager supports tracking of a point on the camera.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_HAS_TRACKING_POINT = 262144,

        /// <summary>
        /// Gimbal manager supports tracking of a point on the camera.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_HAS_TRACKING_RECTANGLE = 524288,

        /// <summary>
        /// Gimbal manager supports pitching and yawing at an angular velocity scaled by focal length (the more zoomed in, the slower the movement).
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_FOCAL_LENGTH_SCALE = 1048576,

        /// <summary>
        /// Gimbal manager supports nudging when pointing to a location or tracking.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_NUDGING = 2097152,

        /// <summary>
        /// Gimbal manager supports overriding when pointing to a location or tracking.
        /// </summary>
        GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_OVERRIDE = 4194304,
        GIMBAL_MANAGER_CAP_FLAGS_ENUM_END = 4194305,

    }


    /// <summary>
    /// Flags for gimbal device (lower level) operation.
    /// </summary>
    public enum GIMBAL_DEVICE_FLAGS : uint
    {

        /// <summary>
        /// Set to retracted safe position (no stabilization), takes presedence over all other flags.
        /// </summary>
        GIMBAL_DEVICE_FLAGS_RETRACT = 1,

        /// <summary>
        /// Set to neutral position (horizontal, forward looking, with stabiliziation), takes presedence over all other flags except RETRACT.
        /// </summary>
        GIMBAL_DEVICE_FLAGS_NEUTRAL = 2,

        /// <summary>
        /// Lock roll angle to absolute angle relative to horizon (not relative to drone). This is generally the default with a stabilizing gimbal.
        /// </summary>
        GIMBAL_DEVICE_FLAGS_ROLL_LOCK = 4,

        /// <summary>
        /// Lock pitch angle to absolute angle relative to horizon (not relative to drone). This is generally the default.
        /// </summary>
        GIMBAL_DEVICE_FLAGS_PITCH_LOCK = 8,

        /// <summary>
        /// Lock yaw angle to absolute angle relative to North (not relative to drone). If this flag is set, the quaternion is in the Earth frame with the x-axis pointing North (yaw absolute). If this flag is not set, the quaternion frame is in the Earth frame rotated so that the x-axis is pointing forward (yaw relative to vehicle).
        /// </summary>
        GIMBAL_DEVICE_FLAGS_YAW_LOCK = 16,
        GIMBAL_DEVICE_FLAGS_ENUM_END = 17,

    }


    /// <summary>
    /// Flags for high level gimbal manager operation The first 16 bytes are identical to the GIMBAL_DEVICE_FLAGS.
    /// </summary>
    public enum GIMBAL_MANAGER_FLAGS : uint
    {

        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_RETRACT
        /// </summary>
        GIMBAL_MANAGER_FLAGS_RETRACT = 1,

        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_NEUTRAL
        /// </summary>
        GIMBAL_MANAGER_FLAGS_NEUTRAL = 2,

        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_ROLL_LOCK
        /// </summary>
        GIMBAL_MANAGER_FLAGS_ROLL_LOCK = 4,

        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_PITCH_LOCK
        /// </summary>
        GIMBAL_MANAGER_FLAGS_PITCH_LOCK = 8,

        /// <summary>
        /// Based on GIMBAL_DEVICE_FLAGS_YAW_LOCK
        /// </summary>
        GIMBAL_MANAGER_FLAGS_YAW_LOCK = 16,

        /// <summary>
        /// Scale angular velocity relative to focal length. This means the gimbal moves slower if it is zoomed in.
        /// </summary>
        GIMBAL_MANAGER_FLAGS_ANGULAR_VELOCITY_RELATIVE_TO_FOCAL_LENGTH = 1048576,

        /// <summary>
        /// Interpret attitude control on top of pointing to a location or tracking. If this flag is set, the quaternion is relative to the existing tracking angle.
        /// </summary>
        GIMBAL_MANAGER_FLAGS_NUDGE = 2097152,

        /// <summary>
        /// Completely override pointing to a location or tracking. If this flag is set, the quaternion is (as usual) according to GIMBAL_MANAGER_FLAGS_YAW_LOCK.
        /// </summary>
        GIMBAL_MANAGER_FLAGS_OVERRIDE = 4194304,
        GIMBAL_MANAGER_FLAGS_ENUM_END = 4194305,

    }


    /// <summary>
    /// Gimbal device (low level) error flags (bitmap, 0 means no error)
    /// </summary>
    public enum GIMBAL_DEVICE_ERROR_FLAGS : uint
    {

        /// <summary>
        /// Gimbal device is limited by hardware roll limit.
        /// </summary>
        GIMBAL_DEVICE_ERROR_FLAGS_AT_ROLL_LIMIT = 1,

        /// <summary>
        /// Gimbal device is limited by hardware pitch limit.
        /// </summary>
        GIMBAL_DEVICE_ERROR_FLAGS_AT_PITCH_LIMIT = 2,

        /// <summary>
        /// Gimbal device is limited by hardware yaw limit.
        /// </summary>
        GIMBAL_DEVICE_ERROR_FLAGS_AT_YAW_LIMIT = 4,

        /// <summary>
        /// There is an error with the gimbal encoders.
        /// </summary>
        GIMBAL_DEVICE_ERROR_FLAGS_ENCODER_ERROR = 8,

        /// <summary>
        /// There is an error with the gimbal power source.
        /// </summary>
        GIMBAL_DEVICE_ERROR_FLAGS_POWER_ERROR = 16,

        /// <summary>
        /// There is an error with the gimbal motor's.
        /// </summary>
        GIMBAL_DEVICE_ERROR_FLAGS_MOTOR_ERROR = 32,

        /// <summary>
        /// There is an error with the gimbal's software.
        /// </summary>
        GIMBAL_DEVICE_ERROR_FLAGS_SOFTWARE_ERROR = 64,

        /// <summary>
        /// There is an error with the gimbal's communication.
        /// </summary>
        GIMBAL_DEVICE_ERROR_FLAGS_COMMS_ERROR = 128,
        GIMBAL_DEVICE_ERROR_FLAGS_ENUM_END = 129,

    }


    /// <summary>
    /// Generalized UAVCAN node health
    /// </summary>
    public enum UAVCAN_NODE_HEALTH : uint
    {

        /// <summary>
        /// The node is functioning properly.
        /// </summary>
        UAVCAN_NODE_HEALTH_OK = 0,

        /// <summary>
        /// A critical parameter went out of range or the node has encountered a minor failure.
        /// </summary>
        UAVCAN_NODE_HEALTH_WARNING = 1,

        /// <summary>
        /// The node has encountered a major failure.
        /// </summary>
        UAVCAN_NODE_HEALTH_ERROR = 2,

        /// <summary>
        /// The node has suffered a fatal malfunction.
        /// </summary>
        UAVCAN_NODE_HEALTH_CRITICAL = 3,
        UAVCAN_NODE_HEALTH_ENUM_END = 4,

    }


    /// <summary>
    /// Generalized UAVCAN node mode
    /// </summary>
    public enum UAVCAN_NODE_MODE : uint
    {

        /// <summary>
        /// The node is performing its primary functions.
        /// </summary>
        UAVCAN_NODE_MODE_OPERATIONAL = 0,

        /// <summary>
        /// The node is initializing; this mode is entered immediately after startup.
        /// </summary>
        UAVCAN_NODE_MODE_INITIALIZATION = 1,

        /// <summary>
        /// The node is under maintenance.
        /// </summary>
        UAVCAN_NODE_MODE_MAINTENANCE = 2,

        /// <summary>
        /// The node is in the process of updating its software.
        /// </summary>
        UAVCAN_NODE_MODE_SOFTWARE_UPDATE = 3,

        /// <summary>
        /// The node is no longer available online.
        /// </summary>
        UAVCAN_NODE_MODE_OFFLINE = 7,
        UAVCAN_NODE_MODE_ENUM_END = 8,

    }


    /// <summary>
    /// Flags to indicate the status of camera storage.
    /// </summary>
    public enum STORAGE_STATUS : uint
    {

        /// <summary>
        /// Storage is missing (no microSD card loaded for example.)
        /// </summary>
        STORAGE_STATUS_EMPTY = 0,

        /// <summary>
        /// Storage present but unformatted.
        /// </summary>
        STORAGE_STATUS_UNFORMATTED = 1,

        /// <summary>
        /// Storage present and ready.
        /// </summary>
        STORAGE_STATUS_READY = 2,

        /// <summary>
        /// Camera does not supply storage status information. Capacity information in STORAGE_INFORMATION fields will be ignored.
        /// </summary>
        STORAGE_STATUS_NOT_SUPPORTED = 3,
        STORAGE_STATUS_ENUM_END = 4,

    }


    /// <summary>
    /// Yaw behaviour during orbit flight.
    /// </summary>
    public enum ORBIT_YAW_BEHAVIOUR : uint
    {

        /// <summary>
        /// Vehicle front points to the center (default).
        /// </summary>
        ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TO_CIRCLE_CENTER = 0,

        /// <summary>
        /// Vehicle front holds heading when message received.
        /// </summary>
        ORBIT_YAW_BEHAVIOUR_HOLD_INITIAL_HEADING = 1,

        /// <summary>
        /// Yaw uncontrolled.
        /// </summary>
        ORBIT_YAW_BEHAVIOUR_UNCONTROLLED = 2,

        /// <summary>
        /// Vehicle front follows flight path (tangential to circle).
        /// </summary>
        ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TANGENT_TO_CIRCLE = 3,

        /// <summary>
        /// Yaw controlled by RC input.
        /// </summary>
        ORBIT_YAW_BEHAVIOUR_RC_CONTROLLED = 4,
        ORBIT_YAW_BEHAVIOUR_ENUM_END = 5,

    }


    /// <summary>
    /// Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data. NaN and INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current yaw or latitude rather than a specific value). See https://mavlink.io/en/guide/xml_schema.html#MAV_CMD for information about the structure of the MAV_CMD entries
    /// </summary>
    public enum MAV_CMD : uint
    {

        /// <summary>
        /// Navigate to waypoint.
        /// </summary>
        MAV_CMD_NAV_WAYPOINT = 16,

        /// <summary>
        /// Loiter around this waypoint an unlimited amount of time
        /// </summary>
        MAV_CMD_NAV_LOITER_UNLIM = 17,

        /// <summary>
        /// Loiter around this waypoint for X turns
        /// </summary>
        MAV_CMD_NAV_LOITER_TURNS = 18,

        /// <summary>
        /// Loiter around this waypoint for X seconds
        /// </summary>
        MAV_CMD_NAV_LOITER_TIME = 19,

        /// <summary>
        /// Return to launch location
        /// </summary>
        MAV_CMD_NAV_RETURN_TO_LAUNCH = 20,

        /// <summary>
        /// Land at location.
        /// </summary>
        MAV_CMD_NAV_LAND = 21,

        /// <summary>
        /// Takeoff from ground / hand
        /// </summary>
        MAV_CMD_NAV_TAKEOFF = 22,

        /// <summary>
        /// Land at local position (local frame only)
        /// </summary>
        MAV_CMD_NAV_LAND_LOCAL = 23,

        /// <summary>
        /// Takeoff from local position (local frame only)
        /// </summary>
        MAV_CMD_NAV_TAKEOFF_LOCAL = 24,

        /// <summary>
        /// Vehicle following, i.e. this waypoint represents the position of a moving vehicle
        /// </summary>
        MAV_CMD_NAV_FOLLOW = 25,

        /// <summary>
        /// Continue on the current course and climb/descend to specified altitude.  When the altitude is reached continue to the next command (i.e., don't proceed to the next command until the desired altitude is reached.
        /// </summary>
        MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT = 30,

        /// <summary>
        /// Begin loiter at the specified Latitude and Longitude.  If Lat=Lon=0, then loiter at the current position.  Don't consider the navigation command complete (don't leave loiter) until the altitude has been reached.  Additionally, if the Heading Required parameter is non-zero the  aircraft will not leave the loiter until heading toward the next waypoint.
        /// </summary>
        MAV_CMD_NAV_LOITER_TO_ALT = 31,

        /// <summary>
        /// Begin following a target
        /// </summary>
        MAV_CMD_DO_FOLLOW = 32,

        /// <summary>
        /// Reposition the MAV after a follow target command has been sent
        /// </summary>
        MAV_CMD_DO_FOLLOW_REPOSITION = 33,

        /// <summary>
        /// Start orbiting on the circumference of a circle defined by the parameters. Setting any value NaN results in using defaults.
        /// </summary>
        MAV_CMD_DO_ORBIT = 34,

        /// <summary>
        /// Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
        /// </summary>
        MAV_CMD_NAV_ROI = 80,

        /// <summary>
        /// Control autonomous path planning on the MAV.
        /// </summary>
        MAV_CMD_NAV_PATHPLANNING = 81,

        /// <summary>
        /// Navigate to waypoint using a spline path.
        /// </summary>
        MAV_CMD_NAV_SPLINE_WAYPOINT = 82,

        /// <summary>
        /// Takeoff from ground using VTOL mode, and transition to forward flight with specified heading.
        /// </summary>
        MAV_CMD_NAV_VTOL_TAKEOFF = 84,

        /// <summary>
        /// Land using VTOL mode
        /// </summary>
        MAV_CMD_NAV_VTOL_LAND = 85,

        /// <summary>
        /// hand control over to an external controller
        /// </summary>
        MAV_CMD_NAV_GUIDED_ENABLE = 92,

        /// <summary>
        /// Delay the next navigation command a number of seconds or until a specified time
        /// </summary>
        MAV_CMD_NAV_DELAY = 93,

        /// <summary>
        /// Descend and place payload. Vehicle moves to specified location, descends until it detects a hanging payload has reached the ground, and then releases the payload. If ground is not detected before the reaching the maximum descent value (param1), the command will complete without releasing the payload.
        /// </summary>
        MAV_CMD_NAV_PAYLOAD_PLACE = 94,

        /// <summary>
        /// NOP - This command is only used to mark the upper limit of the NAV/ACTION commands in the enumeration
        /// </summary>
        MAV_CMD_NAV_LAST = 95,

        /// <summary>
        /// Delay mission state machine.
        /// </summary>
        MAV_CMD_CONDITION_DELAY = 112,

        /// <summary>
        /// Ascend/descend at rate.  Delay mission state machine until desired altitude reached.
        /// </summary>
        MAV_CMD_CONDITION_CHANGE_ALT = 113,

        /// <summary>
        /// Delay mission state machine until within desired distance of next NAV point.
        /// </summary>
        MAV_CMD_CONDITION_DISTANCE = 114,

        /// <summary>
        /// Reach a certain target angle.
        /// </summary>
        MAV_CMD_CONDITION_YAW = 115,

        /// <summary>
        /// NOP - This command is only used to mark the upper limit of the CONDITION commands in the enumeration
        /// </summary>
        MAV_CMD_CONDITION_LAST = 159,

        /// <summary>
        /// Set system mode.
        /// </summary>
        MAV_CMD_DO_SET_MODE = 176,

        /// <summary>
        /// Jump to the desired command in the mission list.  Repeat this action only the specified number of times
        /// </summary>
        MAV_CMD_DO_JUMP = 177,

        /// <summary>
        /// Change speed and/or throttle set points.
        /// </summary>
        MAV_CMD_DO_CHANGE_SPEED = 178,

        /// <summary>
        /// Changes the home location either to the current location or a specified location.
        /// </summary>
        MAV_CMD_DO_SET_HOME = 179,

        /// <summary>
        /// Set a system parameter.  Caution!  Use of this command requires knowledge of the numeric enumeration value of the parameter.
        /// </summary>
        MAV_CMD_DO_SET_PARAMETER = 180,

        /// <summary>
        /// Set a relay to a condition.
        /// </summary>
        MAV_CMD_DO_SET_RELAY = 181,

        /// <summary>
        /// Cycle a relay on and off for a desired number of cycles with a desired period.
        /// </summary>
        MAV_CMD_DO_REPEAT_RELAY = 182,

        /// <summary>
        /// Set a servo to a desired PWM value.
        /// </summary>
        MAV_CMD_DO_SET_SERVO = 183,

        /// <summary>
        /// Cycle a between its nominal setting and a desired PWM for a desired number of cycles with a desired period.
        /// </summary>
        MAV_CMD_DO_REPEAT_SERVO = 184,

        /// <summary>
        /// Terminate flight immediately
        /// </summary>
        MAV_CMD_DO_FLIGHTTERMINATION = 185,

        /// <summary>
        /// Change altitude set point.
        /// </summary>
        MAV_CMD_DO_CHANGE_ALTITUDE = 186,

        /// <summary>
        /// Mission command to perform a landing. This is used as a marker in a mission to tell the autopilot where a sequence of mission items that represents a landing starts. It may also be sent via a COMMAND_LONG to trigger a landing, in which case the nearest (geographically) landing sequence in the mission will be used. The Latitude/Longitude is optional, and may be set to 0 if not needed. If specified then it will be used to help find the closest landing sequence.
        /// </summary>
        MAV_CMD_DO_LAND_START = 189,

        /// <summary>
        /// Mission command to perform a landing from a rally point.
        /// </summary>
        MAV_CMD_DO_RALLY_LAND = 190,

        /// <summary>
        /// Mission command to safely abort an autonomous landing.
        /// </summary>
        MAV_CMD_DO_GO_AROUND = 191,

        /// <summary>
        /// Reposition the vehicle to a specific WGS84 global position.
        /// </summary>
        MAV_CMD_DO_REPOSITION = 192,

        /// <summary>
        /// If in a GPS controlled position mode, hold the current position or continue.
        /// </summary>
        MAV_CMD_DO_PAUSE_CONTINUE = 193,

        /// <summary>
        /// Set moving direction to forward or reverse.
        /// </summary>
        MAV_CMD_DO_SET_REVERSE = 194,

        /// <summary>
        /// Sets the region of interest (ROI) to a location. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal is not to react to this message.
        /// </summary>
        MAV_CMD_DO_SET_ROI_LOCATION = 195,

        /// <summary>
        /// Sets the region of interest (ROI) to be toward next waypoint, with optional pitch/roll/yaw offset. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message.
        /// </summary>
        MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET = 196,

        /// <summary>
        /// Cancels any previous ROI command returning the vehicle/sensors to default flight characteristics. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message. After this command the gimbal manager should go back to manual input if available, and otherwise assume a neutral position.
        /// </summary>
        MAV_CMD_DO_SET_ROI_NONE = 197,

        /// <summary>
        /// Mount tracks system with specified system ID. Determination of target vehicle position may be done with GLOBAL_POSITION_INT or any other means. This command can be sent to a gimbal manager but not to a gimbal device. A gimbal device is not to react to this message.
        /// </summary>
        MAV_CMD_DO_SET_ROI_SYSID = 198,

        /// <summary>
        /// Control onboard camera system.
        /// </summary>
        MAV_CMD_DO_CONTROL_VIDEO = 200,

        /// <summary>
        /// Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
        /// </summary>
        MAV_CMD_DO_SET_ROI = 201,

        /// <summary>
        /// Configure digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).
        /// </summary>
        MAV_CMD_DO_DIGICAM_CONFIGURE = 202,

        /// <summary>
        /// Control digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).
        /// </summary>
        MAV_CMD_DO_DIGICAM_CONTROL = 203,

        /// <summary>
        /// Mission command to configure a camera or antenna mount
        /// </summary>
        MAV_CMD_DO_MOUNT_CONFIGURE = 204,

        /// <summary>
        /// Mission command to control a camera or antenna mount
        /// </summary>
        MAV_CMD_DO_MOUNT_CONTROL = 205,

        /// <summary>
        /// Mission command to set camera trigger distance for this flight. The camera is triggered each time this distance is exceeded. This command can also be used to set the shutter integration time for the camera.
        /// </summary>
        MAV_CMD_DO_SET_CAM_TRIGG_DIST = 206,

        /// <summary>
        /// Mission command to enable the geofence
        /// </summary>
        MAV_CMD_DO_FENCE_ENABLE = 207,

        /// <summary>
        /// Mission command to trigger a parachute
        /// </summary>
        MAV_CMD_DO_PARACHUTE = 208,

        /// <summary>
        /// Mission command to perform motor test.
        /// </summary>
        MAV_CMD_DO_MOTOR_TEST = 209,

        /// <summary>
        /// Change to/from inverted flight.
        /// </summary>
        MAV_CMD_DO_INVERTED_FLIGHT = 210,

        /// <summary>
        /// Sets a desired vehicle turn angle and speed change.
        /// </summary>
        MAV_CMD_NAV_SET_YAW_SPEED = 213,

        /// <summary>
        /// Mission command to set camera trigger interval for this flight. If triggering is enabled, the camera is triggered each time this interval expires. This command can also be used to set the shutter integration time for the camera.
        /// </summary>
        MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL = 214,

        /// <summary>
        /// Mission command to control a camera or antenna mount, using a quaternion as reference.
        /// </summary>
        MAV_CMD_DO_MOUNT_CONTROL_QUAT = 220,

        /// <summary>
        /// set id of master controller
        /// </summary>
        MAV_CMD_DO_GUIDED_MASTER = 221,

        /// <summary>
        /// Set limits for external control
        /// </summary>
        MAV_CMD_DO_GUIDED_LIMITS = 222,

        /// <summary>
        /// Control vehicle engine. This is interpreted by the vehicles engine controller to change the target engine state. It is intended for vehicles with internal combustion engines
        /// </summary>
        MAV_CMD_DO_ENGINE_CONTROL = 223,

        /// <summary>
        /// Set the mission item with sequence number seq as current item. This means that the MAV will continue to this mission item on the shortest path (not following the mission items in-between).
        /// </summary>
        MAV_CMD_DO_SET_MISSION_CURRENT = 224,

        /// <summary>
        /// NOP - This command is only used to mark the upper limit of the DO commands in the enumeration
        /// </summary>
        MAV_CMD_DO_LAST = 240,

        /// <summary>
        /// Trigger calibration. This command will be only accepted if in pre-flight mode. Except for Temperature Calibration, only one sensor should be set in a single message and all others should be zero.
        /// </summary>
        MAV_CMD_PREFLIGHT_CALIBRATION = 241,

        /// <summary>
        /// Set sensor offsets. This command will be only accepted if in pre-flight mode.
        /// </summary>
        MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS = 242,

        /// <summary>
        /// Trigger UAVCAN config. This command will be only accepted if in pre-flight mode.
        /// </summary>
        MAV_CMD_PREFLIGHT_UAVCAN = 243,

        /// <summary>
        /// Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode.
        /// </summary>
        MAV_CMD_PREFLIGHT_STORAGE = 245,

        /// <summary>
        /// Request the reboot or shutdown of system components.
        /// </summary>
        MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN = 246,

        /// <summary>
        /// Override current mission with command to pause mission, pause mission and move to position, continue/resume mission. When param 1 indicates that the mission is paused (MAV_GOTO_DO_HOLD), param 2 defines whether it holds in place or moves to another position.
        /// </summary>
        MAV_CMD_OVERRIDE_GOTO = 252,

        /// <summary>
        /// start running a mission
        /// </summary>
        MAV_CMD_MISSION_START = 300,

        /// <summary>
        /// Arms / Disarms a component
        /// </summary>
        MAV_CMD_COMPONENT_ARM_DISARM = 400,

        /// <summary>
        /// Turns illuminators ON/OFF. An illuminator is a light source that is used for lighting up dark areas external to the sytstem: e.g. a torch or searchlight (as opposed to a light source for illuminating the system itself, e.g. an indicator light).
        /// </summary>
        MAV_CMD_ILLUMINATOR_ON_OFF = 405,

        /// <summary>
        /// Request the home position from the vehicle.
        /// </summary>
        MAV_CMD_GET_HOME_POSITION = 410,

        /// <summary>
        /// Starts receiver pairing.
        /// </summary>
        MAV_CMD_START_RX_PAIR = 500,

        /// <summary>
        /// Request the interval between messages for a particular MAVLink message ID. The receiver should ACK the command and then emit its response in a MESSAGE_INTERVAL message.
        /// </summary>
        MAV_CMD_GET_MESSAGE_INTERVAL = 510,

        /// <summary>
        /// Set the interval between messages for a particular MAVLink message ID. This interface replaces REQUEST_DATA_STREAM.
        /// </summary>
        MAV_CMD_SET_MESSAGE_INTERVAL = 511,

        /// <summary>
        /// Request the target system(s) emit a single instance of a specified message (i.e. a "one-shot" version of MAV_CMD_SET_MESSAGE_INTERVAL).
        /// </summary>
        MAV_CMD_REQUEST_MESSAGE = 512,

        /// <summary>
        /// Request MAVLink protocol version compatibility
        /// </summary>
        MAV_CMD_REQUEST_PROTOCOL_VERSION = 519,

        /// <summary>
        /// Request autopilot capabilities. The receiver should ACK the command and then emit its capabilities in an AUTOPILOT_VERSION message
        /// </summary>
        MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES = 520,

        /// <summary>
        /// Request camera information (CAMERA_INFORMATION).
        /// </summary>
        MAV_CMD_REQUEST_CAMERA_INFORMATION = 521,

        /// <summary>
        /// Request camera settings (CAMERA_SETTINGS).
        /// </summary>
        MAV_CMD_REQUEST_CAMERA_SETTINGS = 522,

        /// <summary>
        /// Request storage information (STORAGE_INFORMATION). Use the command's target_component to target a specific component's storage.
        /// </summary>
        MAV_CMD_REQUEST_STORAGE_INFORMATION = 525,

        /// <summary>
        /// Format a storage medium. Once format is complete, a STORAGE_INFORMATION message is sent. Use the command's target_component to target a specific component's storage.
        /// </summary>
        MAV_CMD_STORAGE_FORMAT = 526,

        /// <summary>
        /// Request camera capture status (CAMERA_CAPTURE_STATUS)
        /// </summary>
        MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS = 527,

        /// <summary>
        /// Request flight information (FLIGHT_INFORMATION)
        /// </summary>
        MAV_CMD_REQUEST_FLIGHT_INFORMATION = 528,

        /// <summary>
        /// Reset all camera settings to Factory Default
        /// </summary>
        MAV_CMD_RESET_CAMERA_SETTINGS = 529,

        /// <summary>
        /// Set camera running mode. Use NaN for reserved values. GCS will send a MAV_CMD_REQUEST_VIDEO_STREAM_STATUS command after a mode change if the camera supports video streaming.
        /// </summary>
        MAV_CMD_SET_CAMERA_MODE = 530,

        /// <summary>
        /// Set camera zoom. Camera must respond with a CAMERA_SETTINGS message (on success). Use NaN for reserved values.
        /// </summary>
        MAV_CMD_SET_CAMERA_ZOOM = 531,

        /// <summary>
        /// Set camera focus. Camera must respond with a CAMERA_SETTINGS message (on success). Use NaN for reserved values.
        /// </summary>
        MAV_CMD_SET_CAMERA_FOCUS = 532,

        /// <summary>
        /// Tagged jump target. Can be jumped to with MAV_CMD_DO_JUMP_TAG.
        /// </summary>
        MAV_CMD_JUMP_TAG = 600,

        /// <summary>
        /// Jump to the matching tag in the mission list. Repeat this action for the specified number of times. A mission should contain a single matching tag for each jump. If this is not the case then a jump to a missing tag should complete the mission, and a jump where there are multiple matching tags should always select the one with the lowest mission sequence number.
        /// </summary>
        MAV_CMD_DO_JUMP_TAG = 601,

        /// <summary>
        /// High level setpoint to be sent to a gimbal manager to set a gimbal attitude. It is possible to set combinations of the values below. E.g. an angle as well as a desired angular rate can be used to get to this angle at a certain angular rate, or an angular rate only will result in continuous turning. NaN is to be used to signal unset. Note: a gimbal is never to react to this command but only the gimbal manager.
        /// </summary>
        MAV_CMD_DO_GIMBAL_MANAGER_ATTITUDE = 1000,

        /// <summary>
        /// If the gimbal manager supports visual tracking (GIMBAL_MANAGER_CAP_FLAGS_HAS_TRACKING_POINT is set), this command allows to initiate the tracking. Such a tracking gimbal manager would usually be an integrated camera/gimbal, or alternatively a companion computer connected to a camera.
        /// </summary>
        MAV_CMD_DO_GIMBAL_MANAGER_TRACK_POINT = 1001,

        /// <summary>
        /// If the gimbal supports visual tracking (GIMBAL_MANAGER_CAP_FLAGS_HAS_TRACKING_RECTANGLE is set), this command allows to initiate the tracking. Such a tracking gimbal manager would usually be an integrated camera/gimbal, or alternatively a companion computer connected to a camera.
        /// </summary>
        MAV_CMD_DO_GIMBAL_MANAGER_TRACK_RECTANGLE = 1002,

        /// <summary>
        /// Start image capture sequence. Sends CAMERA_IMAGE_CAPTURED after each capture. Use NaN for reserved values.
        /// </summary>
        MAV_CMD_IMAGE_START_CAPTURE = 2000,

        /// <summary>
        /// Stop image capture sequence Use NaN for reserved values.
        /// </summary>
        MAV_CMD_IMAGE_STOP_CAPTURE = 2001,

        /// <summary>
        /// Re-request a CAMERA_IMAGE_CAPTURE message. Use NaN for reserved values.
        /// </summary>
        MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE = 2002,

        /// <summary>
        /// Enable or disable on-board camera triggering system.
        /// </summary>
        MAV_CMD_DO_TRIGGER_CONTROL = 2003,

        /// <summary>
        /// Starts video capture (recording). Use NaN for reserved values.
        /// </summary>
        MAV_CMD_VIDEO_START_CAPTURE = 2500,

        /// <summary>
        /// Stop the current video capture (recording). Use NaN for reserved values.
        /// </summary>
        MAV_CMD_VIDEO_STOP_CAPTURE = 2501,

        /// <summary>
        /// Start video streaming
        /// </summary>
        MAV_CMD_VIDEO_START_STREAMING = 2502,

        /// <summary>
        /// Stop the given video stream
        /// </summary>
        MAV_CMD_VIDEO_STOP_STREAMING = 2503,

        /// <summary>
        /// Request video stream information (VIDEO_STREAM_INFORMATION)
        /// </summary>
        MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION = 2504,

        /// <summary>
        /// Request video stream status (VIDEO_STREAM_STATUS)
        /// </summary>
        MAV_CMD_REQUEST_VIDEO_STREAM_STATUS = 2505,

        /// <summary>
        /// Request to start streaming logging data over MAVLink (see also LOGGING_DATA message)
        /// </summary>
        MAV_CMD_LOGGING_START = 2510,

        /// <summary>
        /// Request to stop streaming log data over MAVLink
        /// </summary>
        MAV_CMD_LOGGING_STOP = 2511,
        MAV_CMD_AIRFRAME_CONFIGURATION = 2520,

        /// <summary>
        /// Request to start/stop transmitting over the high latency telemetry
        /// </summary>
        MAV_CMD_CONTROL_HIGH_LATENCY = 2600,

        /// <summary>
        /// Create a panorama at the current position
        /// </summary>
        MAV_CMD_PANORAMA_CREATE = 2800,

        /// <summary>
        /// Request VTOL transition
        /// </summary>
        MAV_CMD_DO_VTOL_TRANSITION = 3000,

        /// <summary>
        /// Request authorization to arm the vehicle to a external entity, the arm authorizer is responsible to request all data that is needs from the vehicle before authorize or deny the request. If approved the progress of command_ack message should be set with period of time that this authorization is valid in seconds or in case it was denied it should be set with one of the reasons in ARM_AUTH_DENIED_REASON.
        ///        
        /// </summary>
        MAV_CMD_ARM_AUTHORIZATION_REQUEST = 3001,

        /// <summary>
        /// This command sets the submode to standard guided when vehicle is in guided mode. The vehicle holds position and altitude and the user can input the desired velocities along all three axes.
        ///                  
        /// </summary>
        MAV_CMD_SET_GUIDED_SUBMODE_STANDARD = 4000,

        /// <summary>
        /// This command sets submode circle when vehicle is in guided mode. Vehicle flies along a circle facing the center of the circle. The user can input the velocity along the circle and change the radius. If no input is given the vehicle will hold position.
        ///                  
        /// </summary>
        MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE = 4001,

        /// <summary>
        /// Delay mission state machine until gate has been reached.
        /// </summary>
        MAV_CMD_CONDITION_GATE = 4501,

        /// <summary>
        /// Fence return point. There can only be one fence return point.
        ///        
        /// </summary>
        MAV_CMD_NAV_FENCE_RETURN_POINT = 5000,

        /// <summary>
        /// Fence vertex for an inclusion polygon (the polygon must not be self-intersecting). The vehicle must stay within this area. Minimum of 3 vertices required.
        ///        
        /// </summary>
        MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION = 5001,

        /// <summary>
        /// Fence vertex for an exclusion polygon (the polygon must not be self-intersecting). The vehicle must stay outside this area. Minimum of 3 vertices required.
        ///        
        /// </summary>
        MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION = 5002,

        /// <summary>
        /// Circular fence area. The vehicle must stay inside this area.
        ///        
        /// </summary>
        MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION = 5003,

        /// <summary>
        /// Circular fence area. The vehicle must stay outside this area.
        ///        
        /// </summary>
        MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION = 5004,

        /// <summary>
        /// Rally point. You can have multiple rally points defined.
        ///        
        /// </summary>
        MAV_CMD_NAV_RALLY_POINT = 5100,

        /// <summary>
        /// Commands the vehicle to respond with a sequence of messages UAVCAN_NODE_INFO, one message per every UAVCAN node that is online. Note that some of the response messages can be lost, which the receiver can detect easily by checking whether every received UAVCAN_NODE_STATUS has a matching message UAVCAN_NODE_INFO received earlier; if not, this command should be sent again in order to request re-transmission of the node information messages.
        /// </summary>
        MAV_CMD_UAVCAN_GET_NODE_INFO = 5200,

        /// <summary>
        /// Deploy payload on a Lat / Lon / Alt position. This includes the navigation to reach the required release position and velocity.
        /// </summary>
        MAV_CMD_PAYLOAD_PREPARE_DEPLOY = 30001,

        /// <summary>
        /// Control the payload deployment.
        /// </summary>
        MAV_CMD_PAYLOAD_CONTROL_DEPLOY = 30002,

        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// </summary>
        MAV_CMD_WAYPOINT_USER_1 = 31000,

        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// </summary>
        MAV_CMD_WAYPOINT_USER_2 = 31001,

        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// </summary>
        MAV_CMD_WAYPOINT_USER_3 = 31002,

        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// </summary>
        MAV_CMD_WAYPOINT_USER_4 = 31003,

        /// <summary>
        /// User defined waypoint item. Ground Station will show the Vehicle as flying through this item.
        /// </summary>
        MAV_CMD_WAYPOINT_USER_5 = 31004,

        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// </summary>
        MAV_CMD_SPATIAL_USER_1 = 31005,

        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// </summary>
        MAV_CMD_SPATIAL_USER_2 = 31006,

        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// </summary>
        MAV_CMD_SPATIAL_USER_3 = 31007,

        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// </summary>
        MAV_CMD_SPATIAL_USER_4 = 31008,

        /// <summary>
        /// User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item.
        /// </summary>
        MAV_CMD_SPATIAL_USER_5 = 31009,

        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// </summary>
        MAV_CMD_USER_1 = 31010,

        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// </summary>
        MAV_CMD_USER_2 = 31011,

        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// </summary>
        MAV_CMD_USER_3 = 31012,

        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// </summary>
        MAV_CMD_USER_4 = 31013,

        /// <summary>
        /// User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item.
        /// </summary>
        MAV_CMD_USER_5 = 31014,
        MAV_CMD_ENUM_END = 31015,

    }


    /// <summary>
    /// A data stream is not a fixed set of messages, but rather a
    ///     recommendation to the autopilot software. Individual autopilots may or may not obey
    ///     the recommended messages.
    /// </summary>
    public enum MAV_DATA_STREAM : uint
    {

        /// <summary>
        /// Enable all data streams
        /// </summary>
        MAV_DATA_STREAM_ALL = 0,

        /// <summary>
        /// Enable IMU_RAW, GPS_RAW, GPS_STATUS packets.
        /// </summary>
        MAV_DATA_STREAM_RAW_SENSORS = 1,

        /// <summary>
        /// Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS
        /// </summary>
        MAV_DATA_STREAM_EXTENDED_STATUS = 2,

        /// <summary>
        /// Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW
        /// </summary>
        MAV_DATA_STREAM_RC_CHANNELS = 3,

        /// <summary>
        /// Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT, NAV_CONTROLLER_OUTPUT.
        /// </summary>
        MAV_DATA_STREAM_RAW_CONTROLLER = 4,

        /// <summary>
        /// Enable LOCAL_POSITION, GLOBAL_POSITION/GLOBAL_POSITION_INT messages.
        /// </summary>
        MAV_DATA_STREAM_POSITION = 6,

        /// <summary>
        /// Dependent on the autopilot
        /// </summary>
        MAV_DATA_STREAM_EXTRA1 = 10,

        /// <summary>
        /// Dependent on the autopilot
        /// </summary>
        MAV_DATA_STREAM_EXTRA2 = 11,

        /// <summary>
        /// Dependent on the autopilot
        /// </summary>
        MAV_DATA_STREAM_EXTRA3 = 12,
        MAV_DATA_STREAM_ENUM_END = 13,

    }


    /// <summary>
    /// The ROI (region of interest) for the vehicle. This can be
    ///                be used by the vehicle for camera/vehicle attitude alignment (see
    ///                MAV_CMD_NAV_ROI).
    /// </summary>
    public enum MAV_ROI : uint
    {

        /// <summary>
        /// No region of interest.
        /// </summary>
        MAV_ROI_NONE = 0,

        /// <summary>
        /// Point toward next waypoint, with optional pitch/roll/yaw offset.
        /// </summary>
        MAV_ROI_WPNEXT = 1,

        /// <summary>
        /// Point toward given waypoint.
        /// </summary>
        MAV_ROI_WPINDEX = 2,

        /// <summary>
        /// Point toward fixed location.
        /// </summary>
        MAV_ROI_LOCATION = 3,

        /// <summary>
        /// Point toward of given id.
        /// </summary>
        MAV_ROI_TARGET = 4,
        MAV_ROI_ENUM_END = 5,

    }


    /// <summary>
    /// ACK / NACK / ERROR values as a result of MAV_CMDs and for mission item transmission.
    /// </summary>
    public enum MAV_CMD_ACK : uint
    {

        /// <summary>
        /// Command / mission item is ok.
        /// </summary>
        MAV_CMD_ACK_OK = 1,

        /// <summary>
        /// Generic error message if none of the other reasons fails or if no detailed error reporting is implemented.
        /// </summary>
        MAV_CMD_ACK_ERR_FAIL = 2,

        /// <summary>
        /// The system is refusing to accept this command from this source / communication partner.
        /// </summary>
        MAV_CMD_ACK_ERR_ACCESS_DENIED = 3,

        /// <summary>
        /// Command or mission item is not supported, other commands would be accepted.
        /// </summary>
        MAV_CMD_ACK_ERR_NOT_SUPPORTED = 4,

        /// <summary>
        /// The coordinate frame of this command / mission item is not supported.
        /// </summary>
        MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED = 5,

        /// <summary>
        /// The coordinate frame of this command is ok, but he coordinate values exceed the safety limits of this system. This is a generic error, please use the more specific error messages below if possible.
        /// </summary>
        MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE = 6,

        /// <summary>
        /// The X or latitude value is out of range.
        /// </summary>
        MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE = 7,

        /// <summary>
        /// The Y or longitude value is out of range.
        /// </summary>
        MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE = 8,

        /// <summary>
        /// The Z or altitude value is out of range.
        /// </summary>
        MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE = 9,
        MAV_CMD_ACK_ENUM_END = 10,

    }


    /// <summary>
    /// Specifies the datatype of a MAVLink parameter.
    /// </summary>
    public enum MAV_PARAM_TYPE : uint
    {

        /// <summary>
        /// 8-bit unsigned integer
        /// </summary>
        MAV_PARAM_TYPE_UINT8 = 1,

        /// <summary>
        /// 8-bit signed integer
        /// </summary>
        MAV_PARAM_TYPE_INT8 = 2,

        /// <summary>
        /// 16-bit unsigned integer
        /// </summary>
        MAV_PARAM_TYPE_UINT16 = 3,

        /// <summary>
        /// 16-bit signed integer
        /// </summary>
        MAV_PARAM_TYPE_INT16 = 4,

        /// <summary>
        /// 32-bit unsigned integer
        /// </summary>
        MAV_PARAM_TYPE_UINT32 = 5,

        /// <summary>
        /// 32-bit signed integer
        /// </summary>
        MAV_PARAM_TYPE_INT32 = 6,

        /// <summary>
        /// 64-bit unsigned integer
        /// </summary>
        MAV_PARAM_TYPE_UINT64 = 7,

        /// <summary>
        /// 64-bit signed integer
        /// </summary>
        MAV_PARAM_TYPE_INT64 = 8,

        /// <summary>
        /// 32-bit floating-point
        /// </summary>
        MAV_PARAM_TYPE_REAL32 = 9,

        /// <summary>
        /// 64-bit floating-point
        /// </summary>
        MAV_PARAM_TYPE_REAL64 = 10,
        MAV_PARAM_TYPE_ENUM_END = 11,

    }


    /// <summary>
    /// Specifies the datatype of a MAVLink extended parameter.
    /// </summary>
    public enum MAV_PARAM_EXT_TYPE : uint
    {

        /// <summary>
        /// 8-bit unsigned integer
        /// </summary>
        MAV_PARAM_EXT_TYPE_UINT8 = 1,

        /// <summary>
        /// 8-bit signed integer
        /// </summary>
        MAV_PARAM_EXT_TYPE_INT8 = 2,

        /// <summary>
        /// 16-bit unsigned integer
        /// </summary>
        MAV_PARAM_EXT_TYPE_UINT16 = 3,

        /// <summary>
        /// 16-bit signed integer
        /// </summary>
        MAV_PARAM_EXT_TYPE_INT16 = 4,

        /// <summary>
        /// 32-bit unsigned integer
        /// </summary>
        MAV_PARAM_EXT_TYPE_UINT32 = 5,

        /// <summary>
        /// 32-bit signed integer
        /// </summary>
        MAV_PARAM_EXT_TYPE_INT32 = 6,

        /// <summary>
        /// 64-bit unsigned integer
        /// </summary>
        MAV_PARAM_EXT_TYPE_UINT64 = 7,

        /// <summary>
        /// 64-bit signed integer
        /// </summary>
        MAV_PARAM_EXT_TYPE_INT64 = 8,

        /// <summary>
        /// 32-bit floating-point
        /// </summary>
        MAV_PARAM_EXT_TYPE_REAL32 = 9,

        /// <summary>
        /// 64-bit floating-point
        /// </summary>
        MAV_PARAM_EXT_TYPE_REAL64 = 10,

        /// <summary>
        /// Custom Type
        /// </summary>
        MAV_PARAM_EXT_TYPE_CUSTOM = 11,
        MAV_PARAM_EXT_TYPE_ENUM_END = 12,

    }


    /// <summary>
    /// Result from a MAVLink command (MAV_CMD)
    /// </summary>
    public enum MAV_RESULT : uint
    {

        /// <summary>
        /// Command is valid (is supported and has valid parameters), and was executed.
        /// </summary>
        MAV_RESULT_ACCEPTED = 0,

        /// <summary>
        /// Command is valid, but cannot be executed at this time. This is used to indicate a problem that should be fixed just by waiting (e.g. a state machine is busy, can't arm because have not got GPS lock, etc.). Retrying later should work.
        /// </summary>
        MAV_RESULT_TEMPORARILY_REJECTED = 1,

        /// <summary>
        /// Command is invalid (is supported but has invalid parameters). Retrying same command and parameters will not work.
        /// </summary>
        MAV_RESULT_DENIED = 2,

        /// <summary>
        /// Command is not supported (unknown).
        /// </summary>
        MAV_RESULT_UNSUPPORTED = 3,

        /// <summary>
        /// Command is valid, but execution has failed. This is used to indicate any non-temporary or unexpected problem, i.e. any problem that must be fixed before the command can succeed/be retried. For example, attempting to write a file when out of memory, attempting to arm when sensors are not calibrated, etc.
        /// </summary>
        MAV_RESULT_FAILED = 4,

        /// <summary>
        /// Command is valid and is being executed. This will be followed by further progress updates, i.e. the component may send further COMMAND_ACK messages with result MAV_RESULT_IN_PROGRESS (at a rate decided by the implementation), and must terminate by sending a COMMAND_ACK message with final result of the operation. The COMMAND_ACK.progress field can be used to indicate the progress of the operation. There is no need for the sender to retry the command, but if done during execution, the component will return MAV_RESULT_IN_PROGRESS with an updated progress.
        /// </summary>
        MAV_RESULT_IN_PROGRESS = 5,
        MAV_RESULT_ENUM_END = 6,

    }


    /// <summary>
    /// Result of mission operation (in a MISSION_ACK message).
    /// </summary>
    public enum MAV_MISSION_RESULT : uint
    {

        /// <summary>
        /// mission accepted OK
        /// </summary>
        MAV_MISSION_ACCEPTED = 0,

        /// <summary>
        /// Generic error / not accepting mission commands at all right now.
        /// </summary>
        MAV_MISSION_ERROR = 1,

        /// <summary>
        /// Coordinate frame is not supported.
        /// </summary>
        MAV_MISSION_UNSUPPORTED_FRAME = 2,

        /// <summary>
        /// Command is not supported.
        /// </summary>
        MAV_MISSION_UNSUPPORTED = 3,

        /// <summary>
        /// Mission item exceeds storage space.
        /// </summary>
        MAV_MISSION_NO_SPACE = 4,

        /// <summary>
        /// One of the parameters has an invalid value.
        /// </summary>
        MAV_MISSION_INVALID = 5,

        /// <summary>
        /// param1 has an invalid value.
        /// </summary>
        MAV_MISSION_INVALID_PARAM1 = 6,

        /// <summary>
        /// param2 has an invalid value.
        /// </summary>
        MAV_MISSION_INVALID_PARAM2 = 7,

        /// <summary>
        /// param3 has an invalid value.
        /// </summary>
        MAV_MISSION_INVALID_PARAM3 = 8,

        /// <summary>
        /// param4 has an invalid value.
        /// </summary>
        MAV_MISSION_INVALID_PARAM4 = 9,

        /// <summary>
        /// x / param5 has an invalid value.
        /// </summary>
        MAV_MISSION_INVALID_PARAM5_X = 10,

        /// <summary>
        /// y / param6 has an invalid value.
        /// </summary>
        MAV_MISSION_INVALID_PARAM6_Y = 11,

        /// <summary>
        /// z / param7 has an invalid value.
        /// </summary>
        MAV_MISSION_INVALID_PARAM7 = 12,

        /// <summary>
        /// Mission item received out of sequence
        /// </summary>
        MAV_MISSION_INVALID_SEQUENCE = 13,

        /// <summary>
        /// Not accepting any mission commands from this communication partner.
        /// </summary>
        MAV_MISSION_DENIED = 14,

        /// <summary>
        /// Current mission operation cancelled (e.g. mission upload, mission download).
        /// </summary>
        MAV_MISSION_OPERATION_CANCELLED = 15,
        MAV_MISSION_RESULT_ENUM_END = 16,

    }


    /// <summary>
    /// Indicates the severity level, generally used for status messages to indicate their relative urgency. Based on RFC-5424 using expanded definitions at: http://www.kiwisyslog.com/kb/info:-syslog-message-levels/.
    /// </summary>
    public enum MAV_SEVERITY : uint
    {

        /// <summary>
        /// System is unusable. This is a "panic" condition.
        /// </summary>
        MAV_SEVERITY_EMERGENCY = 0,

        /// <summary>
        /// Action should be taken immediately. Indicates error in non-critical systems.
        /// </summary>
        MAV_SEVERITY_ALERT = 1,

        /// <summary>
        /// Action must be taken immediately. Indicates failure in a primary system.
        /// </summary>
        MAV_SEVERITY_CRITICAL = 2,

        /// <summary>
        /// Indicates an error in secondary/redundant systems.
        /// </summary>
        MAV_SEVERITY_ERROR = 3,

        /// <summary>
        /// Indicates about a possible future error if this is not resolved within a given timeframe. Example would be a low battery warning.
        /// </summary>
        MAV_SEVERITY_WARNING = 4,

        /// <summary>
        /// An unusual event has occurred, though not an error condition. This should be investigated for the root cause.
        /// </summary>
        MAV_SEVERITY_NOTICE = 5,

        /// <summary>
        /// Normal operational messages. Useful for logging. No action is required for these messages.
        /// </summary>
        MAV_SEVERITY_INFO = 6,

        /// <summary>
        /// Useful non-operational messages that can assist in debugging. These should not occur during normal operation.
        /// </summary>
        MAV_SEVERITY_DEBUG = 7,
        MAV_SEVERITY_ENUM_END = 8,

    }


    /// <summary>
    /// Power supply status flags (bitmask)
    /// </summary>
    public enum MAV_POWER_STATUS : uint
    {

        /// <summary>
        /// main brick power supply valid
        /// </summary>
        MAV_POWER_STATUS_BRICK_VALID = 1,

        /// <summary>
        /// main servo power supply valid for FMU
        /// </summary>
        MAV_POWER_STATUS_SERVO_VALID = 2,

        /// <summary>
        /// USB power is connected
        /// </summary>
        MAV_POWER_STATUS_USB_CONNECTED = 4,

        /// <summary>
        /// peripheral supply is in over-current state
        /// </summary>
        MAV_POWER_STATUS_PERIPH_OVERCURRENT = 8,

        /// <summary>
        /// hi-power peripheral supply is in over-current state
        /// </summary>
        MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT = 16,

        /// <summary>
        /// Power status has changed since boot
        /// </summary>
        MAV_POWER_STATUS_CHANGED = 32,
        MAV_POWER_STATUS_ENUM_END = 33,

    }


    /// <summary>
    /// SERIAL_CONTROL device types
    /// </summary>
    public enum SERIAL_CONTROL_DEV : uint
    {

        /// <summary>
        /// First telemetry port
        /// </summary>
        SERIAL_CONTROL_DEV_TELEM1 = 0,

        /// <summary>
        /// Second telemetry port
        /// </summary>
        SERIAL_CONTROL_DEV_TELEM2 = 1,

        /// <summary>
        /// First GPS port
        /// </summary>
        SERIAL_CONTROL_DEV_GPS1 = 2,

        /// <summary>
        /// Second GPS port
        /// </summary>
        SERIAL_CONTROL_DEV_GPS2 = 3,

        /// <summary>
        /// system shell
        /// </summary>
        SERIAL_CONTROL_DEV_SHELL = 10,

        /// <summary>
        /// SERIAL0
        /// </summary>
        SERIAL_CONTROL_SERIAL0 = 100,

        /// <summary>
        /// SERIAL1
        /// </summary>
        SERIAL_CONTROL_SERIAL1 = 101,

        /// <summary>
        /// SERIAL2
        /// </summary>
        SERIAL_CONTROL_SERIAL2 = 102,

        /// <summary>
        /// SERIAL3
        /// </summary>
        SERIAL_CONTROL_SERIAL3 = 103,

        /// <summary>
        /// SERIAL4
        /// </summary>
        SERIAL_CONTROL_SERIAL4 = 104,

        /// <summary>
        /// SERIAL5
        /// </summary>
        SERIAL_CONTROL_SERIAL5 = 105,

        /// <summary>
        /// SERIAL6
        /// </summary>
        SERIAL_CONTROL_SERIAL6 = 106,

        /// <summary>
        /// SERIAL7
        /// </summary>
        SERIAL_CONTROL_SERIAL7 = 107,

        /// <summary>
        /// SERIAL8
        /// </summary>
        SERIAL_CONTROL_SERIAL8 = 108,

        /// <summary>
        /// SERIAL9
        /// </summary>
        SERIAL_CONTROL_SERIAL9 = 109,
        SERIAL_CONTROL_DEV_ENUM_END = 110,

    }


    /// <summary>
    /// SERIAL_CONTROL flags (bitmask)
    /// </summary>
    public enum SERIAL_CONTROL_FLAG : uint
    {

        /// <summary>
        /// Set if this is a reply
        /// </summary>
        SERIAL_CONTROL_FLAG_REPLY = 1,

        /// <summary>
        /// Set if the sender wants the receiver to send a response as another SERIAL_CONTROL message
        /// </summary>
        SERIAL_CONTROL_FLAG_RESPOND = 2,

        /// <summary>
        /// Set if access to the serial port should be removed from whatever driver is currently using it, giving exclusive access to the SERIAL_CONTROL protocol. The port can be handed back by sending a request without this flag set
        /// </summary>
        SERIAL_CONTROL_FLAG_EXCLUSIVE = 4,

        /// <summary>
        /// Block on writes to the serial port
        /// </summary>
        SERIAL_CONTROL_FLAG_BLOCKING = 8,

        /// <summary>
        /// Send multiple replies until port is drained
        /// </summary>
        SERIAL_CONTROL_FLAG_MULTI = 16,
        SERIAL_CONTROL_FLAG_ENUM_END = 17,

    }


    /// <summary>
    /// Enumeration of distance sensor types
    /// </summary>
    public enum MAV_DISTANCE_SENSOR : uint
    {

        /// <summary>
        /// Laser rangefinder, e.g. LightWare SF02/F or PulsedLight units
        /// </summary>
        MAV_DISTANCE_SENSOR_LASER = 0,

        /// <summary>
        /// Ultrasound rangefinder, e.g. MaxBotix units
        /// </summary>
        MAV_DISTANCE_SENSOR_ULTRASOUND = 1,

        /// <summary>
        /// Infrared rangefinder, e.g. Sharp units
        /// </summary>
        MAV_DISTANCE_SENSOR_INFRARED = 2,

        /// <summary>
        /// Radar type, e.g. uLanding units
        /// </summary>
        MAV_DISTANCE_SENSOR_RADAR = 3,

        /// <summary>
        /// Broken or unknown type, e.g. analog units
        /// </summary>
        MAV_DISTANCE_SENSOR_UNKNOWN = 4,
        MAV_DISTANCE_SENSOR_ENUM_END = 5,

    }


    /// <summary>
    /// Enumeration of sensor orientation, according to its rotations
    /// </summary>
    public enum MAV_SENSOR_ORIENTATION : uint
    {

        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_NONE = 0,

        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 45
        /// </summary>
        MAV_SENSOR_ROTATION_YAW_45 = 1,

        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 90
        /// </summary>
        MAV_SENSOR_ROTATION_YAW_90 = 2,

        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 135
        /// </summary>
        MAV_SENSOR_ROTATION_YAW_135 = 3,

        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 180
        /// </summary>
        MAV_SENSOR_ROTATION_YAW_180 = 4,

        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 225
        /// </summary>
        MAV_SENSOR_ROTATION_YAW_225 = 5,

        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 270
        /// </summary>
        MAV_SENSOR_ROTATION_YAW_270 = 6,

        /// <summary>
        /// Roll: 0, Pitch: 0, Yaw: 315
        /// </summary>
        MAV_SENSOR_ROTATION_YAW_315 = 7,

        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_180 = 8,

        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 45
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_180_YAW_45 = 9,

        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 90
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_180_YAW_90 = 10,

        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 135
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_180_YAW_135 = 11,

        /// <summary>
        /// Roll: 0, Pitch: 180, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_PITCH_180 = 12,

        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 225
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_180_YAW_225 = 13,

        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 270
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_180_YAW_270 = 14,

        /// <summary>
        /// Roll: 180, Pitch: 0, Yaw: 315
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_180_YAW_315 = 15,

        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_90 = 16,

        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 45
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_90_YAW_45 = 17,

        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 90
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_90_YAW_90 = 18,

        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 135
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_90_YAW_135 = 19,

        /// <summary>
        /// Roll: 270, Pitch: 0, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_270 = 20,

        /// <summary>
        /// Roll: 270, Pitch: 0, Yaw: 45
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_270_YAW_45 = 21,

        /// <summary>
        /// Roll: 270, Pitch: 0, Yaw: 90
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_270_YAW_90 = 22,

        /// <summary>
        /// Roll: 270, Pitch: 0, Yaw: 135
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_270_YAW_135 = 23,

        /// <summary>
        /// Roll: 0, Pitch: 90, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_PITCH_90 = 24,

        /// <summary>
        /// Roll: 0, Pitch: 270, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_PITCH_270 = 25,

        /// <summary>
        /// Roll: 0, Pitch: 180, Yaw: 90
        /// </summary>
        MAV_SENSOR_ROTATION_PITCH_180_YAW_90 = 26,

        /// <summary>
        /// Roll: 0, Pitch: 180, Yaw: 270
        /// </summary>
        MAV_SENSOR_ROTATION_PITCH_180_YAW_270 = 27,

        /// <summary>
        /// Roll: 90, Pitch: 90, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_90_PITCH_90 = 28,

        /// <summary>
        /// Roll: 180, Pitch: 90, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_180_PITCH_90 = 29,

        /// <summary>
        /// Roll: 270, Pitch: 90, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_270_PITCH_90 = 30,

        /// <summary>
        /// Roll: 90, Pitch: 180, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_90_PITCH_180 = 31,

        /// <summary>
        /// Roll: 270, Pitch: 180, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_270_PITCH_180 = 32,

        /// <summary>
        /// Roll: 90, Pitch: 270, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_90_PITCH_270 = 33,

        /// <summary>
        /// Roll: 180, Pitch: 270, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_180_PITCH_270 = 34,

        /// <summary>
        /// Roll: 270, Pitch: 270, Yaw: 0
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_270_PITCH_270 = 35,

        /// <summary>
        /// Roll: 90, Pitch: 180, Yaw: 90
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90 = 36,

        /// <summary>
        /// Roll: 90, Pitch: 0, Yaw: 270
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_90_YAW_270 = 37,

        /// <summary>
        /// Roll: 90, Pitch: 68, Yaw: 293
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293 = 38,

        /// <summary>
        /// Pitch: 315
        /// </summary>
        MAV_SENSOR_ROTATION_PITCH_315 = 39,

        /// <summary>
        /// Roll: 90, Pitch: 315
        /// </summary>
        MAV_SENSOR_ROTATION_ROLL_90_PITCH_315 = 40,

        /// <summary>
        /// Custom orientation
        /// </summary>
        MAV_SENSOR_ROTATION_CUSTOM = 100,
        MAV_SENSOR_ORIENTATION_ENUM_END = 101,

    }


    /// <summary>
    /// Bitmask of (optional) autopilot capabilities (64 bit). If a bit is set, the autopilot supports this capability.
    /// </summary>
    public enum MAV_PROTOCOL_CAPABILITY : uint
    {

        /// <summary>
        /// Autopilot supports MISSION float message type.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT = 1,

        /// <summary>
        /// Autopilot supports the new param float message type.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT = 2,

        /// <summary>
        /// Autopilot supports MISSION_INT scaled integer message type.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_MISSION_INT = 4,

        /// <summary>
        /// Autopilot supports COMMAND_INT scaled integer message type.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_COMMAND_INT = 8,

        /// <summary>
        /// Autopilot supports the new param union message type.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_PARAM_UNION = 16,

        /// <summary>
        /// Autopilot supports the new FILE_TRANSFER_PROTOCOL message type.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_FTP = 32,

        /// <summary>
        /// Autopilot supports commanding attitude offboard.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET = 64,

        /// <summary>
        /// Autopilot supports commanding position and velocity targets in local NED frame.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED = 128,

        /// <summary>
        /// Autopilot supports commanding position and velocity targets in global scaled integers.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT = 256,

        /// <summary>
        /// Autopilot supports terrain protocol / data handling.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_TERRAIN = 512,

        /// <summary>
        /// Autopilot supports direct actuator control.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET = 1024,

        /// <summary>
        /// Autopilot supports the flight termination command.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION = 2048,

        /// <summary>
        /// Autopilot supports onboard compass calibration.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION = 4096,

        /// <summary>
        /// Autopilot supports MAVLink version 2.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_MAVLINK2 = 8192,

        /// <summary>
        /// Autopilot supports mission fence protocol.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_MISSION_FENCE = 16384,

        /// <summary>
        /// Autopilot supports mission rally point protocol.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_MISSION_RALLY = 32768,

        /// <summary>
        /// Autopilot supports the flight information protocol.
        /// </summary>
        MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION = 65536,
        MAV_PROTOCOL_CAPABILITY_ENUM_END = 65537,

    }


    /// <summary>
    /// Type of mission items being requested/sent in mission protocol.
    /// </summary>
    public enum MAV_MISSION_TYPE : uint
    {

        /// <summary>
        /// Items are mission commands for main mission.
        /// </summary>
        MAV_MISSION_TYPE_MISSION = 0,

        /// <summary>
        /// Specifies GeoFence area(s). Items are MAV_CMD_NAV_FENCE_ GeoFence items.
        /// </summary>
        MAV_MISSION_TYPE_FENCE = 1,

        /// <summary>
        /// Specifies the rally points for the vehicle. Rally points are alternative RTL points. Items are MAV_CMD_NAV_RALLY_POINT rally point items.
        /// </summary>
        MAV_MISSION_TYPE_RALLY = 2,

        /// <summary>
        /// Only used in MISSION_CLEAR_ALL to clear all mission types.
        /// </summary>
        MAV_MISSION_TYPE_ALL = 255,
        MAV_MISSION_TYPE_ENUM_END = 256,

    }


    /// <summary>
    /// Enumeration of estimator types
    /// </summary>
    public enum MAV_ESTIMATOR_TYPE : uint
    {

        /// <summary>
        /// Unknown type of the estimator.
        /// </summary>
        MAV_ESTIMATOR_TYPE_UNKNOWN = 0,

        /// <summary>
        /// This is a naive estimator without any real covariance feedback.
        /// </summary>
        MAV_ESTIMATOR_TYPE_NAIVE = 1,

        /// <summary>
        /// Computer vision based estimate. Might be up to scale.
        /// </summary>
        MAV_ESTIMATOR_TYPE_VISION = 2,

        /// <summary>
        /// Visual-inertial estimate.
        /// </summary>
        MAV_ESTIMATOR_TYPE_VIO = 3,

        /// <summary>
        /// Plain GPS estimate.
        /// </summary>
        MAV_ESTIMATOR_TYPE_GPS = 4,

        /// <summary>
        /// Estimator integrating GPS and inertial sensing.
        /// </summary>
        MAV_ESTIMATOR_TYPE_GPS_INS = 5,

        /// <summary>
        /// Estimate from external motion capturing system.
        /// </summary>
        MAV_ESTIMATOR_TYPE_MOCAP = 6,

        /// <summary>
        /// Estimator based on lidar sensor input.
        /// </summary>
        MAV_ESTIMATOR_TYPE_LIDAR = 7,

        /// <summary>
        /// Estimator on autopilot.
        /// </summary>
        MAV_ESTIMATOR_TYPE_AUTOPILOT = 8,
        MAV_ESTIMATOR_TYPE_ENUM_END = 9,

    }


    /// <summary>
    /// Enumeration of battery types
    /// </summary>
    public enum MAV_BATTERY_TYPE : uint
    {

        /// <summary>
        /// Not specified.
        /// </summary>
        MAV_BATTERY_TYPE_UNKNOWN = 0,

        /// <summary>
        /// Lithium polymer battery
        /// </summary>
        MAV_BATTERY_TYPE_LIPO = 1,

        /// <summary>
        /// Lithium-iron-phosphate battery
        /// </summary>
        MAV_BATTERY_TYPE_LIFE = 2,

        /// <summary>
        /// Lithium-ION battery
        /// </summary>
        MAV_BATTERY_TYPE_LION = 3,

        /// <summary>
        /// Nickel metal hydride battery
        /// </summary>
        MAV_BATTERY_TYPE_NIMH = 4,
        MAV_BATTERY_TYPE_ENUM_END = 5,

    }


    /// <summary>
    /// Enumeration of battery functions
    /// </summary>
    public enum MAV_BATTERY_FUNCTION : uint
    {

        /// <summary>
        /// Battery function is unknown
        /// </summary>
        MAV_BATTERY_FUNCTION_UNKNOWN = 0,

        /// <summary>
        /// Battery supports all flight systems
        /// </summary>
        MAV_BATTERY_FUNCTION_ALL = 1,

        /// <summary>
        /// Battery for the propulsion system
        /// </summary>
        MAV_BATTERY_FUNCTION_PROPULSION = 2,

        /// <summary>
        /// Avionics battery
        /// </summary>
        MAV_BATTERY_FUNCTION_AVIONICS = 3,

        /// <summary>
        /// Payload battery
        /// </summary>
        MAV_BATTERY_TYPE_PAYLOAD = 4,
        MAV_BATTERY_FUNCTION_ENUM_END = 5,

    }


    /// <summary>
    /// Enumeration for battery charge states.
    /// </summary>
    public enum MAV_BATTERY_CHARGE_STATE : uint
    {

        /// <summary>
        /// Low battery state is not provided
        /// </summary>
        MAV_BATTERY_CHARGE_STATE_UNDEFINED = 0,

        /// <summary>
        /// Battery is not in low state. Normal operation.
        /// </summary>
        MAV_BATTERY_CHARGE_STATE_OK = 1,

        /// <summary>
        /// Battery state is low, warn and monitor close.
        /// </summary>
        MAV_BATTERY_CHARGE_STATE_LOW = 2,

        /// <summary>
        /// Battery state is critical, return or abort immediately.
        /// </summary>
        MAV_BATTERY_CHARGE_STATE_CRITICAL = 3,

        /// <summary>
        /// Battery state is too low for ordinary abort sequence. Perform fastest possible emergency stop to prevent damage.
        /// </summary>
        MAV_BATTERY_CHARGE_STATE_EMERGENCY = 4,

        /// <summary>
        /// Battery failed, damage unavoidable.
        /// </summary>
        MAV_BATTERY_CHARGE_STATE_FAILED = 5,

        /// <summary>
        /// Battery is diagnosed to be defective or an error occurred, usage is discouraged / prohibited.
        /// </summary>
        MAV_BATTERY_CHARGE_STATE_UNHEALTHY = 6,

        /// <summary>
        /// Battery is charging.
        /// </summary>
        MAV_BATTERY_CHARGE_STATE_CHARGING = 7,
        MAV_BATTERY_CHARGE_STATE_ENUM_END = 8,

    }


    /// <summary>
    /// Smart battery supply status/fault flags (bitmask) for health indication.
    /// </summary>
    public enum MAV_SMART_BATTERY_FAULT : uint
    {

        /// <summary>
        /// Battery has deep discharged.
        /// </summary>
        MAV_SMART_BATTERY_FAULT_DEEP_DISCHARGE = 1,

        /// <summary>
        /// Voltage spikes.
        /// </summary>
        MAV_SMART_BATTERY_FAULT_SPIKES = 2,

        /// <summary>
        /// Single cell has failed.
        /// </summary>
        MAV_SMART_BATTERY_FAULT_SINGLE_CELL_FAIL = 4,

        /// <summary>
        /// Over-current fault.
        /// </summary>
        MAV_SMART_BATTERY_FAULT_OVER_CURRENT = 8,

        /// <summary>
        /// Over-temperature fault.
        /// </summary>
        MAV_SMART_BATTERY_FAULT_OVER_TEMPERATURE = 16,

        /// <summary>
        /// Under-temperature fault.
        /// </summary>
        MAV_SMART_BATTERY_FAULT_UNDER_TEMPERATURE = 32,
        MAV_SMART_BATTERY_FAULT_ENUM_END = 33,

    }


    /// <summary>
    /// Enumeration of VTOL states
    /// </summary>
    public enum MAV_VTOL_STATE : uint
    {

        /// <summary>
        /// MAV is not configured as VTOL
        /// </summary>
        MAV_VTOL_STATE_UNDEFINED = 0,

        /// <summary>
        /// VTOL is in transition from multicopter to fixed-wing
        /// </summary>
        MAV_VTOL_STATE_TRANSITION_TO_FW = 1,

        /// <summary>
        /// VTOL is in transition from fixed-wing to multicopter
        /// </summary>
        MAV_VTOL_STATE_TRANSITION_TO_MC = 2,

        /// <summary>
        /// VTOL is in multicopter state
        /// </summary>
        MAV_VTOL_STATE_MC = 3,

        /// <summary>
        /// VTOL is in fixed-wing state
        /// </summary>
        MAV_VTOL_STATE_FW = 4,
        MAV_VTOL_STATE_ENUM_END = 5,

    }


    /// <summary>
    /// Enumeration of landed detector states
    /// </summary>
    public enum MAV_LANDED_STATE : uint
    {

        /// <summary>
        /// MAV landed state is unknown
        /// </summary>
        MAV_LANDED_STATE_UNDEFINED = 0,

        /// <summary>
        /// MAV is landed (on ground)
        /// </summary>
        MAV_LANDED_STATE_ON_GROUND = 1,

        /// <summary>
        /// MAV is in air
        /// </summary>
        MAV_LANDED_STATE_IN_AIR = 2,

        /// <summary>
        /// MAV currently taking off
        /// </summary>
        MAV_LANDED_STATE_TAKEOFF = 3,

        /// <summary>
        /// MAV currently landing
        /// </summary>
        MAV_LANDED_STATE_LANDING = 4,
        MAV_LANDED_STATE_ENUM_END = 5,

    }


    /// <summary>
    /// Enumeration of the ADSB altimeter types
    /// </summary>
    public enum ADSB_ALTITUDE_TYPE : uint
    {

        /// <summary>
        /// Altitude reported from a Baro source using QNH reference
        /// </summary>
        ADSB_ALTITUDE_TYPE_PRESSURE_QNH = 0,

        /// <summary>
        /// Altitude reported from a GNSS source
        /// </summary>
        ADSB_ALTITUDE_TYPE_GEOMETRIC = 1,
        ADSB_ALTITUDE_TYPE_ENUM_END = 2,

    }


    /// <summary>
    /// ADSB classification for the type of vehicle emitting the transponder signal
    /// </summary>
    public enum ADSB_EMITTER_TYPE : uint
    {
        ADSB_EMITTER_TYPE_NO_INFO = 0,
        ADSB_EMITTER_TYPE_LIGHT = 1,
        ADSB_EMITTER_TYPE_SMALL = 2,
        ADSB_EMITTER_TYPE_LARGE = 3,
        ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE = 4,
        ADSB_EMITTER_TYPE_HEAVY = 5,
        ADSB_EMITTER_TYPE_HIGHLY_MANUV = 6,
        ADSB_EMITTER_TYPE_ROTOCRAFT = 7,
        ADSB_EMITTER_TYPE_UNASSIGNED = 8,
        ADSB_EMITTER_TYPE_GLIDER = 9,
        ADSB_EMITTER_TYPE_LIGHTER_AIR = 10,
        ADSB_EMITTER_TYPE_PARACHUTE = 11,
        ADSB_EMITTER_TYPE_ULTRA_LIGHT = 12,
        ADSB_EMITTER_TYPE_UNASSIGNED2 = 13,
        ADSB_EMITTER_TYPE_UAV = 14,
        ADSB_EMITTER_TYPE_SPACE = 15,
        ADSB_EMITTER_TYPE_UNASSGINED3 = 16,
        ADSB_EMITTER_TYPE_EMERGENCY_SURFACE = 17,
        ADSB_EMITTER_TYPE_SERVICE_SURFACE = 18,
        ADSB_EMITTER_TYPE_POINT_OBSTACLE = 19,
        ADSB_EMITTER_TYPE_ENUM_END = 20,

    }


    /// <summary>
    /// These flags indicate status such as data validity of each data source. Set = data valid
    /// </summary>
    public enum ADSB_FLAGS : uint
    {
        ADSB_FLAGS_VALID_COORDS = 1,
        ADSB_FLAGS_VALID_ALTITUDE = 2,
        ADSB_FLAGS_VALID_HEADING = 4,
        ADSB_FLAGS_VALID_VELOCITY = 8,
        ADSB_FLAGS_VALID_CALLSIGN = 16,
        ADSB_FLAGS_VALID_SQUAWK = 32,
        ADSB_FLAGS_SIMULATED = 64,
        ADSB_FLAGS_VERTICAL_VELOCITY_VALID = 128,
        ADSB_FLAGS_BARO_VALID = 256,
        ADSB_FLAGS_SOURCE_UAT = 32768,
        ADSB_FLAGS_ENUM_END = 32769,

    }


    /// <summary>
    /// Bitmap of options for the MAV_CMD_DO_REPOSITION
    /// </summary>
    public enum MAV_DO_REPOSITION_FLAGS : uint
    {

        /// <summary>
        /// The aircraft should immediately transition into guided. This should not be set for follow me applications
        /// </summary>
        MAV_DO_REPOSITION_FLAGS_CHANGE_MODE = 1,
        MAV_DO_REPOSITION_FLAGS_ENUM_END = 2,

    }


    /// <summary>
    /// Flags in EKF_STATUS message
    /// </summary>
    public enum ESTIMATOR_STATUS_FLAGS : uint
    {

        /// <summary>
        /// True if the attitude estimate is good
        /// </summary>
        ESTIMATOR_ATTITUDE = 1,

        /// <summary>
        /// True if the horizontal velocity estimate is good
        /// </summary>
        ESTIMATOR_VELOCITY_HORIZ = 2,

        /// <summary>
        /// True if the  vertical velocity estimate is good
        /// </summary>
        ESTIMATOR_VELOCITY_VERT = 4,

        /// <summary>
        /// True if the horizontal position (relative) estimate is good
        /// </summary>
        ESTIMATOR_POS_HORIZ_REL = 8,

        /// <summary>
        /// True if the horizontal position (absolute) estimate is good
        /// </summary>
        ESTIMATOR_POS_HORIZ_ABS = 16,

        /// <summary>
        /// True if the vertical position (absolute) estimate is good
        /// </summary>
        ESTIMATOR_POS_VERT_ABS = 32,

        /// <summary>
        /// True if the vertical position (above ground) estimate is good
        /// </summary>
        ESTIMATOR_POS_VERT_AGL = 64,

        /// <summary>
        /// True if the EKF is in a constant position mode and is not using external measurements (eg GPS or optical flow)
        /// </summary>
        ESTIMATOR_CONST_POS_MODE = 128,

        /// <summary>
        /// True if the EKF has sufficient data to enter a mode that will provide a (relative) position estimate
        /// </summary>
        ESTIMATOR_PRED_POS_HORIZ_REL = 256,

        /// <summary>
        /// True if the EKF has sufficient data to enter a mode that will provide a (absolute) position estimate
        /// </summary>
        ESTIMATOR_PRED_POS_HORIZ_ABS = 512,

        /// <summary>
        /// True if the EKF has detected a GPS glitch
        /// </summary>
        ESTIMATOR_GPS_GLITCH = 1024,

        /// <summary>
        /// True if the EKF has detected bad accelerometer data
        /// </summary>
        ESTIMATOR_ACCEL_ERROR = 2048,
        ESTIMATOR_STATUS_FLAGS_ENUM_END = 2049,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MOTOR_TEST_ORDER : uint
    {

        /// <summary>
        /// default autopilot motor test method
        /// </summary>
        MOTOR_TEST_ORDER_DEFAULT = 0,

        /// <summary>
        /// motor numbers are specified as their index in a predefined vehicle-specific sequence
        /// </summary>
        MOTOR_TEST_ORDER_SEQUENCE = 1,

        /// <summary>
        /// motor numbers are specified as the output as labeled on the board
        /// </summary>
        MOTOR_TEST_ORDER_BOARD = 2,
        MOTOR_TEST_ORDER_ENUM_END = 3,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MOTOR_TEST_THROTTLE_TYPE : uint
    {

        /// <summary>
        /// throttle as a percentage from 0 ~ 100
        /// </summary>
        MOTOR_TEST_THROTTLE_PERCENT = 0,

        /// <summary>
        /// throttle as an absolute PWM value (normally in range of 1000~2000)
        /// </summary>
        MOTOR_TEST_THROTTLE_PWM = 1,

        /// <summary>
        /// throttle pass-through from pilot's transmitter
        /// </summary>
        MOTOR_TEST_THROTTLE_PILOT = 2,

        /// <summary>
        /// per-motor compass calibration test
        /// </summary>
        MOTOR_TEST_COMPASS_CAL = 3,
        MOTOR_TEST_THROTTLE_TYPE_ENUM_END = 4,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum GPS_INPUT_IGNORE_FLAGS : uint
    {

        /// <summary>
        /// ignore altitude field
        /// </summary>
        GPS_INPUT_IGNORE_FLAG_ALT = 1,

        /// <summary>
        /// ignore hdop field
        /// </summary>
        GPS_INPUT_IGNORE_FLAG_HDOP = 2,

        /// <summary>
        /// ignore vdop field
        /// </summary>
        GPS_INPUT_IGNORE_FLAG_VDOP = 4,

        /// <summary>
        /// ignore horizontal velocity field (vn and ve)
        /// </summary>
        GPS_INPUT_IGNORE_FLAG_VEL_HORIZ = 8,

        /// <summary>
        /// ignore vertical velocity field (vd)
        /// </summary>
        GPS_INPUT_IGNORE_FLAG_VEL_VERT = 16,

        /// <summary>
        /// ignore speed accuracy field
        /// </summary>
        GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY = 32,

        /// <summary>
        /// ignore horizontal accuracy field
        /// </summary>
        GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY = 64,

        /// <summary>
        /// ignore vertical accuracy field
        /// </summary>
        GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY = 128,
        GPS_INPUT_IGNORE_FLAGS_ENUM_END = 129,

    }


    /// <summary>
    /// Possible actions an aircraft can take to avoid a collision.
    /// </summary>
    public enum MAV_COLLISION_ACTION : uint
    {

        /// <summary>
        /// Ignore any potential collisions
        /// </summary>
        MAV_COLLISION_ACTION_NONE = 0,

        /// <summary>
        /// Report potential collision
        /// </summary>
        MAV_COLLISION_ACTION_REPORT = 1,

        /// <summary>
        /// Ascend or Descend to avoid threat
        /// </summary>
        MAV_COLLISION_ACTION_ASCEND_OR_DESCEND = 2,

        /// <summary>
        /// Move horizontally to avoid threat
        /// </summary>
        MAV_COLLISION_ACTION_MOVE_HORIZONTALLY = 3,

        /// <summary>
        /// Aircraft to move perpendicular to the collision's velocity vector
        /// </summary>
        MAV_COLLISION_ACTION_MOVE_PERPENDICULAR = 4,

        /// <summary>
        /// Aircraft to fly directly back to its launch point
        /// </summary>
        MAV_COLLISION_ACTION_RTL = 5,

        /// <summary>
        /// Aircraft to stop in place
        /// </summary>
        MAV_COLLISION_ACTION_HOVER = 6,
        MAV_COLLISION_ACTION_ENUM_END = 7,

    }


    /// <summary>
    /// Aircraft-rated danger from this threat.
    /// </summary>
    public enum MAV_COLLISION_THREAT_LEVEL : uint
    {

        /// <summary>
        /// Not a threat
        /// </summary>
        MAV_COLLISION_THREAT_LEVEL_NONE = 0,

        /// <summary>
        /// Craft is mildly concerned about this threat
        /// </summary>
        MAV_COLLISION_THREAT_LEVEL_LOW = 1,

        /// <summary>
        /// Craft is panicking, and may take actions to avoid threat
        /// </summary>
        MAV_COLLISION_THREAT_LEVEL_HIGH = 2,
        MAV_COLLISION_THREAT_LEVEL_ENUM_END = 3,

    }


    /// <summary>
    /// Source of information about this collision.
    /// </summary>
    public enum MAV_COLLISION_SRC : uint
    {

        /// <summary>
        /// ID field references ADSB_VEHICLE packets
        /// </summary>
        MAV_COLLISION_SRC_ADSB = 0,

        /// <summary>
        /// ID field references MAVLink SRC ID
        /// </summary>
        MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT = 1,
        MAV_COLLISION_SRC_ENUM_END = 2,

    }


    /// <summary>
    /// Type of GPS fix
    /// </summary>
    public enum GPS_FIX_TYPE : uint
    {

        /// <summary>
        /// No GPS connected
        /// </summary>
        GPS_FIX_TYPE_NO_GPS = 0,

        /// <summary>
        /// No position information, GPS is connected
        /// </summary>
        GPS_FIX_TYPE_NO_FIX = 1,

        /// <summary>
        /// 2D position
        /// </summary>
        GPS_FIX_TYPE_2D_FIX = 2,

        /// <summary>
        /// 3D position
        /// </summary>
        GPS_FIX_TYPE_3D_FIX = 3,

        /// <summary>
        /// DGPS/SBAS aided 3D position
        /// </summary>
        GPS_FIX_TYPE_DGPS = 4,

        /// <summary>
        /// RTK float, 3D position
        /// </summary>
        GPS_FIX_TYPE_RTK_FLOAT = 5,

        /// <summary>
        /// RTK Fixed, 3D position
        /// </summary>
        GPS_FIX_TYPE_RTK_FIXED = 6,

        /// <summary>
        /// Static fixed, typically used for base stations
        /// </summary>
        GPS_FIX_TYPE_STATIC = 7,

        /// <summary>
        /// PPP, 3D position.
        /// </summary>
        GPS_FIX_TYPE_PPP = 8,
        GPS_FIX_TYPE_ENUM_END = 9,

    }


    /// <summary>
    /// RTK GPS baseline coordinate system, used for RTK corrections
    /// </summary>
    public enum RTK_BASELINE_COORDINATE_SYSTEM : uint
    {

        /// <summary>
        /// Earth-centered, Earth-fixed
        /// </summary>
        RTK_BASELINE_COORDINATE_SYSTEM_ECEF = 0,

        /// <summary>
        /// RTK basestation centered, north, east, down
        /// </summary>
        RTK_BASELINE_COORDINATE_SYSTEM_NED = 1,
        RTK_BASELINE_COORDINATE_SYSTEM_ENUM_END = 2,

    }


    /// <summary>
    /// Type of landing target
    /// </summary>
    public enum LANDING_TARGET_TYPE : uint
    {

        /// <summary>
        /// Landing target signaled by light beacon (ex: IR-LOCK)
        /// </summary>
        LANDING_TARGET_TYPE_LIGHT_BEACON = 0,

        /// <summary>
        /// Landing target signaled by radio beacon (ex: ILS, NDB)
        /// </summary>
        LANDING_TARGET_TYPE_RADIO_BEACON = 1,

        /// <summary>
        /// Landing target represented by a fiducial marker (ex: ARTag)
        /// </summary>
        LANDING_TARGET_TYPE_VISION_FIDUCIAL = 2,

        /// <summary>
        /// Landing target represented by a pre-defined visual shape/feature (ex: X-marker, H-marker, square)
        /// </summary>
        LANDING_TARGET_TYPE_VISION_OTHER = 3,
        LANDING_TARGET_TYPE_ENUM_END = 4,

    }


    /// <summary>
    /// Direction of VTOL transition
    /// </summary>
    public enum VTOL_TRANSITION_HEADING : uint
    {

        /// <summary>
        /// Respect the heading configuration of the vehicle.
        /// </summary>
        VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT = 0,

        /// <summary>
        /// Use the heading pointing towards the next waypoint.
        /// </summary>
        VTOL_TRANSITION_HEADING_NEXT_WAYPOINT = 1,

        /// <summary>
        /// Use the heading on takeoff (while sitting on the ground).
        /// </summary>
        VTOL_TRANSITION_HEADING_TAKEOFF = 2,

        /// <summary>
        /// Use the specified heading in parameter 4.
        /// </summary>
        VTOL_TRANSITION_HEADING_SPECIFIED = 3,

        /// <summary>
        /// Use the current heading when reaching takeoff altitude (potentially facing the wind when weather-vaning is active).
        /// </summary>
        VTOL_TRANSITION_HEADING_ANY = 4,
        VTOL_TRANSITION_HEADING_ENUM_END = 5,

    }


    /// <summary>
    /// Camera capability flags (Bitmap)
    /// </summary>
    public enum CAMERA_CAP_FLAGS : uint
    {

        /// <summary>
        /// Camera is able to record video
        /// </summary>
        CAMERA_CAP_FLAGS_CAPTURE_VIDEO = 1,

        /// <summary>
        /// Camera is able to capture images
        /// </summary>
        CAMERA_CAP_FLAGS_CAPTURE_IMAGE = 2,

        /// <summary>
        /// Camera has separate Video and Image/Photo modes (MAV_CMD_SET_CAMERA_MODE)
        /// </summary>
        CAMERA_CAP_FLAGS_HAS_MODES = 4,

        /// <summary>
        /// Camera can capture images while in video mode
        /// </summary>
        CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE = 8,

        /// <summary>
        /// Camera can capture videos while in Photo/Image mode
        /// </summary>
        CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE = 16,

        /// <summary>
        /// Camera has image survey mode (MAV_CMD_SET_CAMERA_MODE)
        /// </summary>
        CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE = 32,

        /// <summary>
        /// Camera has basic zoom control (MAV_CMD_SET_CAMERA_ZOOM)
        /// </summary>
        CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM = 64,

        /// <summary>
        /// Camera has basic focus control (MAV_CMD_SET_CAMERA_FOCUS)
        /// </summary>
        CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS = 128,

        /// <summary>
        /// Camera has video streaming capabilities (use MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION for video streaming info)
        /// </summary>
        CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM = 256,
        CAMERA_CAP_FLAGS_ENUM_END = 257,

    }


    /// <summary>
    /// Stream status flags (Bitmap)
    /// </summary>
    public enum VIDEO_STREAM_STATUS_FLAGS : uint
    {

        /// <summary>
        /// Stream is active (running)
        /// </summary>
        VIDEO_STREAM_STATUS_FLAGS_RUNNING = 1,

        /// <summary>
        /// Stream is thermal imaging
        /// </summary>
        VIDEO_STREAM_STATUS_FLAGS_THERMAL = 2,
        VIDEO_STREAM_STATUS_FLAGS_ENUM_END = 3,

    }


    /// <summary>
    /// Video stream types
    /// </summary>
    public enum VIDEO_STREAM_TYPE : uint
    {

        /// <summary>
        /// Stream is RTSP
        /// </summary>
        VIDEO_STREAM_TYPE_RTSP = 0,

        /// <summary>
        /// Stream is RTP UDP (URI gives the port number)
        /// </summary>
        VIDEO_STREAM_TYPE_RTPUDP = 1,

        /// <summary>
        /// Stream is MPEG on TCP
        /// </summary>
        VIDEO_STREAM_TYPE_TCP_MPEG = 2,

        /// <summary>
        /// Stream is h.264 on MPEG TS (URI gives the port number)
        /// </summary>
        VIDEO_STREAM_TYPE_MPEG_TS_H264 = 3,
        VIDEO_STREAM_TYPE_ENUM_END = 4,

    }


    /// <summary>
    /// Zoom types for MAV_CMD_SET_CAMERA_ZOOM
    /// </summary>
    public enum CAMERA_ZOOM_TYPE : uint
    {

        /// <summary>
        /// Zoom one step increment (-1 for wide, 1 for tele)
        /// </summary>
        ZOOM_TYPE_STEP = 0,

        /// <summary>
        /// Continuous zoom up/down until stopped (-1 for wide, 1 for tele, 0 to stop zooming)
        /// </summary>
        ZOOM_TYPE_CONTINUOUS = 1,

        /// <summary>
        /// Zoom value as proportion of full camera range (a value between 0.0 and 100.0)
        /// </summary>
        ZOOM_TYPE_RANGE = 2,

        /// <summary>
        /// Zoom value/variable focal length in milimetres. Note that there is no message to get the valid zoom range of the camera, so this can type can only be used for cameras where the zoom range is known (implying that this cannot reliably be used in a GCS for an arbitrary camera)
        /// </summary>
        ZOOM_TYPE_FOCAL_LENGTH = 3,
        CAMERA_ZOOM_TYPE_ENUM_END = 4,

    }


    /// <summary>
    /// Focus types for MAV_CMD_SET_CAMERA_FOCUS
    /// </summary>
    public enum SET_FOCUS_TYPE : uint
    {

        /// <summary>
        /// Focus one step increment (-1 for focusing in, 1 for focusing out towards infinity).
        /// </summary>
        FOCUS_TYPE_STEP = 0,

        /// <summary>
        /// Continuous focus up/down until stopped (-1 for focusing in, 1 for focusing out towards infinity, 0 to stop focusing)
        /// </summary>
        FOCUS_TYPE_CONTINUOUS = 1,

        /// <summary>
        /// Focus value as proportion of full camera focus range (a value between 0.0 and 100.0)
        /// </summary>
        FOCUS_TYPE_RANGE = 2,

        /// <summary>
        /// Focus value in metres. Note that there is no message to get the valid focus range of the camera, so this can type can only be used for cameras where the range is known (implying that this cannot reliably be used in a GCS for an arbitrary camera).
        /// </summary>
        FOCUS_TYPE_METERS = 3,
        SET_FOCUS_TYPE_ENUM_END = 4,

    }


    /// <summary>
    /// Result from a PARAM_EXT_SET message.
    /// </summary>
    public enum PARAM_ACK : uint
    {

        /// <summary>
        /// Parameter value ACCEPTED and SET
        /// </summary>
        PARAM_ACK_ACCEPTED = 0,

        /// <summary>
        /// Parameter value UNKNOWN/UNSUPPORTED
        /// </summary>
        PARAM_ACK_VALUE_UNSUPPORTED = 1,

        /// <summary>
        /// Parameter failed to set
        /// </summary>
        PARAM_ACK_FAILED = 2,

        /// <summary>
        /// Parameter value received but not yet validated or set. A subsequent PARAM_EXT_ACK will follow once operation is completed with the actual result. These are for parameters that may take longer to set. Instead of waiting for an ACK and potentially timing out, you will immediately receive this response to let you know it was received.
        /// </summary>
        PARAM_ACK_IN_PROGRESS = 3,
        PARAM_ACK_ENUM_END = 4,

    }


    /// <summary>
    /// Camera Modes.
    /// </summary>
    public enum CAMERA_MODE : uint
    {

        /// <summary>
        /// Camera is in image/photo capture mode.
        /// </summary>
        CAMERA_MODE_IMAGE = 0,

        /// <summary>
        /// Camera is in video capture mode.
        /// </summary>
        CAMERA_MODE_VIDEO = 1,

        /// <summary>
        /// Camera is in image survey capture mode. It allows for camera controller to do specific settings for surveys.
        /// </summary>
        CAMERA_MODE_IMAGE_SURVEY = 2,
        CAMERA_MODE_ENUM_END = 3,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_ARM_AUTH_DENIED_REASON : uint
    {

        /// <summary>
        /// Not a specific reason
        /// </summary>
        MAV_ARM_AUTH_DENIED_REASON_GENERIC = 0,

        /// <summary>
        /// Authorizer will send the error as string to GCS
        /// </summary>
        MAV_ARM_AUTH_DENIED_REASON_NONE = 1,

        /// <summary>
        /// At least one waypoint have a invalid value
        /// </summary>
        MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT = 2,

        /// <summary>
        /// Timeout in the authorizer process(in case it depends on network)
        /// </summary>
        MAV_ARM_AUTH_DENIED_REASON_TIMEOUT = 3,

        /// <summary>
        /// Airspace of the mission in use by another vehicle, second result parameter can have the waypoint id that caused it to be denied.
        /// </summary>
        MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE = 4,

        /// <summary>
        /// Weather is not good to fly
        /// </summary>
        MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER = 5,
        MAV_ARM_AUTH_DENIED_REASON_ENUM_END = 6,

    }


    /// <summary>
    /// RC type
    /// </summary>
    public enum RC_TYPE : uint
    {

        /// <summary>
        /// Spektrum DSM2
        /// </summary>
        RC_TYPE_SPEKTRUM_DSM2 = 0,

        /// <summary>
        /// Spektrum DSMX
        /// </summary>
        RC_TYPE_SPEKTRUM_DSMX = 1,
        RC_TYPE_ENUM_END = 2,

    }


    /// <summary>
    /// Bitmap to indicate which dimensions should be ignored by the vehicle: a value of 0b0000000000000000 or 0b0000001000000000 indicates that none of the setpoint dimensions should be ignored. If bit 9 is set the floats afx afy afz should be interpreted as force instead of acceleration.
    /// </summary>
    public enum POSITION_TARGET_TYPEMASK : uint
    {

        /// <summary>
        /// Ignore position x
        /// </summary>
        POSITION_TARGET_TYPEMASK_X_IGNORE = 1,

        /// <summary>
        /// Ignore position y
        /// </summary>
        POSITION_TARGET_TYPEMASK_Y_IGNORE = 2,

        /// <summary>
        /// Ignore position z
        /// </summary>
        POSITION_TARGET_TYPEMASK_Z_IGNORE = 4,

        /// <summary>
        /// Ignore velocity x
        /// </summary>
        POSITION_TARGET_TYPEMASK_VX_IGNORE = 8,

        /// <summary>
        /// Ignore velocity y
        /// </summary>
        POSITION_TARGET_TYPEMASK_VY_IGNORE = 16,

        /// <summary>
        /// Ignore velocity z
        /// </summary>
        POSITION_TARGET_TYPEMASK_VZ_IGNORE = 32,

        /// <summary>
        /// Ignore acceleration x
        /// </summary>
        POSITION_TARGET_TYPEMASK_AX_IGNORE = 64,

        /// <summary>
        /// Ignore acceleration y
        /// </summary>
        POSITION_TARGET_TYPEMASK_AY_IGNORE = 128,

        /// <summary>
        /// Ignore acceleration z
        /// </summary>
        POSITION_TARGET_TYPEMASK_AZ_IGNORE = 256,

        /// <summary>
        /// Use force instead of acceleration
        /// </summary>
        POSITION_TARGET_TYPEMASK_FORCE_SET = 512,

        /// <summary>
        /// Ignore yaw
        /// </summary>
        POSITION_TARGET_TYPEMASK_YAW_IGNORE = 1024,

        /// <summary>
        /// Ignore yaw rate
        /// </summary>
        POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = 2048,
        POSITION_TARGET_TYPEMASK_ENUM_END = 2049,

    }


    /// <summary>
    /// Airborne status of UAS.
    /// </summary>
    public enum UTM_FLIGHT_STATE : uint
    {

        /// <summary>
        /// The flight state can't be determined.
        /// </summary>
        UTM_FLIGHT_STATE_UNKNOWN = 1,

        /// <summary>
        /// UAS on ground.
        /// </summary>
        UTM_FLIGHT_STATE_GROUND = 2,

        /// <summary>
        /// UAS airborne.
        /// </summary>
        UTM_FLIGHT_STATE_AIRBORNE = 3,

        /// <summary>
        /// UAS is in an emergency flight state.
        /// </summary>
        UTM_FLIGHT_STATE_EMERGENCY = 16,

        /// <summary>
        /// UAS has no active controls.
        /// </summary>
        UTM_FLIGHT_STATE_NOCTRL = 32,
        UTM_FLIGHT_STATE_ENUM_END = 33,

    }


    /// <summary>
    /// Flags for the global position report.
    /// </summary>
    public enum UTM_DATA_AVAIL_FLAGS : uint
    {

        /// <summary>
        /// The field time contains valid data.
        /// </summary>
        UTM_DATA_AVAIL_FLAGS_TIME_VALID = 1,

        /// <summary>
        /// The field uas_id contains valid data.
        /// </summary>
        UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE = 2,

        /// <summary>
        /// The fields lat, lon and h_acc contain valid data.
        /// </summary>
        UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE = 4,

        /// <summary>
        /// The fields alt and v_acc contain valid data.
        /// </summary>
        UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE = 8,

        /// <summary>
        /// The field relative_alt contains valid data.
        /// </summary>
        UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE = 16,

        /// <summary>
        /// The fields vx and vy contain valid data.
        /// </summary>
        UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE = 32,

        /// <summary>
        /// The field vz contains valid data.
        /// </summary>
        UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE = 64,

        /// <summary>
        /// The fields next_lat, next_lon and next_alt contain valid data.
        /// </summary>
        UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE = 128,
        UTM_DATA_AVAIL_FLAGS_ENUM_END = 129,

    }


    /// <summary>
    /// Cellular network radio type
    /// </summary>
    public enum CELLULAR_NETWORK_RADIO_TYPE : uint
    {
        CELLULAR_NETWORK_RADIO_TYPE_NONE = 0,
        CELLULAR_NETWORK_RADIO_TYPE_GSM = 1,
        CELLULAR_NETWORK_RADIO_TYPE_CDMA = 2,
        CELLULAR_NETWORK_RADIO_TYPE_WCDMA = 3,
        CELLULAR_NETWORK_RADIO_TYPE_LTE = 4,
        CELLULAR_NETWORK_RADIO_TYPE_ENUM_END = 5,

    }


    /// <summary>
    /// These flags encode the cellular network status
    /// </summary>
    public enum CELLULAR_NETWORK_STATUS_FLAG : uint
    {

        /// <summary>
        /// Roaming is active
        /// </summary>
        CELLULAR_NETWORK_STATUS_FLAG_ROAMING = 1,
        CELLULAR_NETWORK_STATUS_FLAG_ENUM_END = 2,

    }


    /// <summary>
    /// Precision land modes (used in MAV_CMD_NAV_LAND).
    /// </summary>
    public enum PRECISION_LAND_MODE : uint
    {

        /// <summary>
        /// Normal (non-precision) landing.
        /// </summary>
        PRECISION_LAND_MODE_DISABLED = 0,

        /// <summary>
        /// Use precision landing if beacon detected when land command accepted, otherwise land normally.
        /// </summary>
        PRECISION_LAND_MODE_OPPORTUNISTIC = 1,

        /// <summary>
        /// Use precision landing, searching for beacon if not found when land command accepted (land normally if beacon cannot be found).
        /// </summary>
        PRECISION_LAND_MODE_REQUIRED = 2,
        PRECISION_LAND_MODE_ENUM_END = 3,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum PARACHUTE_ACTION : uint
    {

        /// <summary>
        /// Disable parachute release.
        /// </summary>
        PARACHUTE_DISABLE = 0,

        /// <summary>
        /// Enable parachute release.
        /// </summary>
        PARACHUTE_ENABLE = 1,

        /// <summary>
        /// Release parachute.
        /// </summary>
        PARACHUTE_RELEASE = 2,
        PARACHUTE_ACTION_ENUM_END = 3,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_TUNNEL_PAYLOAD_TYPE : uint
    {

        /// <summary>
        /// Encoding of payload unknown.
        /// </summary>
        MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN = 0,

        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// </summary>
        MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0 = 200,

        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// </summary>
        MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1 = 201,

        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// </summary>
        MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2 = 202,

        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// </summary>
        MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3 = 203,

        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// </summary>
        MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4 = 204,

        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// </summary>
        MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5 = 205,

        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// </summary>
        MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6 = 206,

        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// </summary>
        MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7 = 207,

        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// </summary>
        MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8 = 208,

        /// <summary>
        /// Registered for STorM32 gimbal controller.
        /// </summary>
        MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9 = 209,
        MAV_TUNNEL_PAYLOAD_TYPE_ENUM_END = 210,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_ODID_ID_TYPE : uint
    {

        /// <summary>
        /// No type defined.
        /// </summary>
        MAV_ODID_ID_TYPE_NONE = 0,

        /// <summary>
        /// Manufacturer Serial Number (ANSI/CTA-2063 format).
        /// </summary>
        MAV_ODID_ID_TYPE_SERIAL_NUMBER = 1,

        /// <summary>
        /// CAA (Civil Aviation Authority) registered ID. Format: [ICAO Country Code].[CAA Assigned ID].
        /// </summary>
        MAV_ODID_ID_TYPE_CAA_REGISTRATION_ID = 2,

        /// <summary>
        /// UTM (Unmanned Traffic Management) assigned UUID (RFC4122).
        /// </summary>
        MAV_ODID_ID_TYPE_UTM_ASSIGNED_UUID = 3,
        MAV_ODID_ID_TYPE_ENUM_END = 4,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_ODID_UA_TYPE : uint
    {

        /// <summary>
        /// No UA (Unmanned Aircraft) type defined.
        /// </summary>
        MAV_ODID_UA_TYPE_NONE = 0,

        /// <summary>
        /// Aeroplane/Airplane. Fixed wing.
        /// </summary>
        MAV_ODID_UA_TYPE_AEROPLANE = 1,

        /// <summary>
        /// Helicopter or multirotor.
        /// </summary>
        MAV_ODID_UA_TYPE_HELICOPTER_OR_MULTIROTOR = 2,

        /// <summary>
        /// Gyroplane.
        /// </summary>
        MAV_ODID_UA_TYPE_GYROPLANE = 3,

        /// <summary>
        /// VTOL (Vertical Take-Off and Landing). Fixed wing aircraft that can take off vertically.
        /// </summary>
        MAV_ODID_UA_TYPE_HYBRID_LIFT = 4,

        /// <summary>
        /// Ornithopter.
        /// </summary>
        MAV_ODID_UA_TYPE_ORNITHOPTER = 5,

        /// <summary>
        /// Glider.
        /// </summary>
        MAV_ODID_UA_TYPE_GLIDER = 6,

        /// <summary>
        /// Kite.
        /// </summary>
        MAV_ODID_UA_TYPE_KITE = 7,

        /// <summary>
        /// Free Balloon.
        /// </summary>
        MAV_ODID_UA_TYPE_FREE_BALLOON = 8,

        /// <summary>
        /// Captive Balloon.
        /// </summary>
        MAV_ODID_UA_TYPE_CAPTIVE_BALLOON = 9,

        /// <summary>
        /// Airship. E.g. a blimp.
        /// </summary>
        MAV_ODID_UA_TYPE_AIRSHIP = 10,

        /// <summary>
        /// Free Fall/Parachute (unpowered).
        /// </summary>
        MAV_ODID_UA_TYPE_FREE_FALL_PARACHUTE = 11,

        /// <summary>
        /// Rocket.
        /// </summary>
        MAV_ODID_UA_TYPE_ROCKET = 12,

        /// <summary>
        /// Tethered powered aircraft.
        /// </summary>
        MAV_ODID_UA_TYPE_TETHERED_POWERED_AIRCRAFT = 13,

        /// <summary>
        /// Ground Obstacle.
        /// </summary>
        MAV_ODID_UA_TYPE_GROUND_OBSTACLE = 14,

        /// <summary>
        /// Other type of aircraft not listed earlier.
        /// </summary>
        MAV_ODID_UA_TYPE_OTHER = 15,
        MAV_ODID_UA_TYPE_ENUM_END = 16,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_ODID_STATUS : uint
    {

        /// <summary>
        /// The status of the (UA) Unmanned Aircraft is undefined.
        /// </summary>
        MAV_ODID_STATUS_UNDECLARED = 0,

        /// <summary>
        /// The UA is on the ground.
        /// </summary>
        MAV_ODID_STATUS_GROUND = 1,

        /// <summary>
        /// The UA is in the air.
        /// </summary>
        MAV_ODID_STATUS_AIRBORNE = 2,
        MAV_ODID_STATUS_ENUM_END = 3,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_ODID_HEIGHT_REF : uint
    {

        /// <summary>
        /// The height field is relative to the take-off location.
        /// </summary>
        MAV_ODID_HEIGHT_REF_OVER_TAKEOFF = 0,

        /// <summary>
        /// The height field is relative to ground.
        /// </summary>
        MAV_ODID_HEIGHT_REF_OVER_GROUND = 1,
        MAV_ODID_HEIGHT_REF_ENUM_END = 2,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_ODID_HOR_ACC : uint
    {

        /// <summary>
        /// The horizontal accuracy is unknown.
        /// </summary>
        MAV_ODID_HOR_ACC_UNKNOWN = 0,

        /// <summary>
        /// The horizontal accuracy is smaller than 10 Nautical Miles. 18.52 km.
        /// </summary>
        MAV_ODID_HOR_ACC_10NM = 1,

        /// <summary>
        /// The horizontal accuracy is smaller than 4 Nautical Miles. 7.408 km.
        /// </summary>
        MAV_ODID_HOR_ACC_4NM = 2,

        /// <summary>
        /// The horizontal accuracy is smaller than 2 Nautical Miles. 3.704 km.
        /// </summary>
        MAV_ODID_HOR_ACC_2NM = 3,

        /// <summary>
        /// The horizontal accuracy is smaller than 1 Nautical Miles. 1.852 km.
        /// </summary>
        MAV_ODID_HOR_ACC_1NM = 4,

        /// <summary>
        /// The horizontal accuracy is smaller than 0.5 Nautical Miles. 926 m.
        /// </summary>
        MAV_ODID_HOR_ACC_0_5NM = 5,

        /// <summary>
        /// The horizontal accuracy is smaller than 0.3 Nautical Miles. 555.6 m.
        /// </summary>
        MAV_ODID_HOR_ACC_0_3NM = 6,

        /// <summary>
        /// The horizontal accuracy is smaller than 0.1 Nautical Miles. 185.2 m.
        /// </summary>
        MAV_ODID_HOR_ACC_0_1NM = 7,

        /// <summary>
        /// The horizontal accuracy is smaller than 0.05 Nautical Miles. 92.6 m.
        /// </summary>
        MAV_ODID_HOR_ACC_0_05NM = 8,

        /// <summary>
        /// The horizontal accuracy is smaller than 30 meter.
        /// </summary>
        MAV_ODID_HOR_ACC_30_METER = 9,

        /// <summary>
        /// The horizontal accuracy is smaller than 10 meter.
        /// </summary>
        MAV_ODID_HOR_ACC_10_METER = 10,

        /// <summary>
        /// The horizontal accuracy is smaller than 3 meter.
        /// </summary>
        MAV_ODID_HOR_ACC_3_METER = 11,

        /// <summary>
        /// The horizontal accuracy is smaller than 1 meter.
        /// </summary>
        MAV_ODID_HOR_ACC_1_METER = 12,
        MAV_ODID_HOR_ACC_ENUM_END = 13,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_ODID_VER_ACC : uint
    {

        /// <summary>
        /// The vertical accuracy is unknown.
        /// </summary>
        MAV_ODID_VER_ACC_UNKNOWN = 0,

        /// <summary>
        /// The vertical accuracy is smaller than 150 meter.
        /// </summary>
        MAV_ODID_VER_ACC_150_METER = 1,

        /// <summary>
        /// The vertical accuracy is smaller than 45 meter.
        /// </summary>
        MAV_ODID_VER_ACC_45_METER = 2,

        /// <summary>
        /// The vertical accuracy is smaller than 25 meter.
        /// </summary>
        MAV_ODID_VER_ACC_25_METER = 3,

        /// <summary>
        /// The vertical accuracy is smaller than 10 meter.
        /// </summary>
        MAV_ODID_VER_ACC_10_METER = 4,

        /// <summary>
        /// The vertical accuracy is smaller than 3 meter.
        /// </summary>
        MAV_ODID_VER_ACC_3_METER = 5,

        /// <summary>
        /// The vertical accuracy is smaller than 1 meter.
        /// </summary>
        MAV_ODID_VER_ACC_1_METER = 6,
        MAV_ODID_VER_ACC_ENUM_END = 7,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_ODID_SPEED_ACC : uint
    {

        /// <summary>
        /// The speed accuracy is unknown.
        /// </summary>
        MAV_ODID_SPEED_ACC_UNKNOWN = 0,

        /// <summary>
        /// The speed accuracy is smaller than 10 meters per second.
        /// </summary>
        MAV_ODID_SPEED_ACC_10_METERS_PER_SECOND = 1,

        /// <summary>
        /// The speed accuracy is smaller than 3 meters per second.
        /// </summary>
        MAV_ODID_SPEED_ACC_3_METERS_PER_SECOND = 2,

        /// <summary>
        /// The speed accuracy is smaller than 1 meters per second.
        /// </summary>
        MAV_ODID_SPEED_ACC_1_METERS_PER_SECOND = 3,

        /// <summary>
        /// The speed accuracy is smaller than 0.3 meters per second.
        /// </summary>
        MAV_ODID_SPEED_ACC_0_3_METERS_PER_SECOND = 4,
        MAV_ODID_SPEED_ACC_ENUM_END = 5,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_ODID_TIME_ACC : uint
    {

        /// <summary>
        /// The timestamp accuracy is unknown.
        /// </summary>
        MAV_ODID_TIME_ACC_UNKNOWN = 0,

        /// <summary>
        /// The timestamp accuracy is smaller than 0.1 second.
        /// </summary>
        MAV_ODID_TIME_ACC_0_1_SECOND = 1,

        /// <summary>
        /// The timestamp accuracy is smaller than 0.2 second.
        /// </summary>
        MAV_ODID_TIME_ACC_0_2_SECOND = 2,

        /// <summary>
        /// The timestamp accuracy is smaller than 0.3 second.
        /// </summary>
        MAV_ODID_TIME_ACC_0_3_SECOND = 3,

        /// <summary>
        /// The timestamp accuracy is smaller than 0.4 second.
        /// </summary>
        MAV_ODID_TIME_ACC_0_4_SECOND = 4,

        /// <summary>
        /// The timestamp accuracy is smaller than 0.5 second.
        /// </summary>
        MAV_ODID_TIME_ACC_0_5_SECOND = 5,

        /// <summary>
        /// The timestamp accuracy is smaller than 0.6 second.
        /// </summary>
        MAV_ODID_TIME_ACC_0_6_SECOND = 6,

        /// <summary>
        /// The timestamp accuracy is smaller than 0.7 second.
        /// </summary>
        MAV_ODID_TIME_ACC_0_7_SECOND = 7,

        /// <summary>
        /// The timestamp accuracy is smaller than 0.8 second.
        /// </summary>
        MAV_ODID_TIME_ACC_0_8_SECOND = 8,

        /// <summary>
        /// The timestamp accuracy is smaller than 0.9 second.
        /// </summary>
        MAV_ODID_TIME_ACC_0_9_SECOND = 9,

        /// <summary>
        /// The timestamp accuracy is smaller than 1.0 second.
        /// </summary>
        MAV_ODID_TIME_ACC_1_0_SECOND = 10,

        /// <summary>
        /// The timestamp accuracy is smaller than 1.1 second.
        /// </summary>
        MAV_ODID_TIME_ACC_1_1_SECOND = 11,

        /// <summary>
        /// The timestamp accuracy is smaller than 1.2 second.
        /// </summary>
        MAV_ODID_TIME_ACC_1_2_SECOND = 12,

        /// <summary>
        /// The timestamp accuracy is smaller than 1.3 second.
        /// </summary>
        MAV_ODID_TIME_ACC_1_3_SECOND = 13,

        /// <summary>
        /// The timestamp accuracy is smaller than 1.4 second.
        /// </summary>
        MAV_ODID_TIME_ACC_1_4_SECOND = 14,

        /// <summary>
        /// The timestamp accuracy is smaller than 1.5 second.
        /// </summary>
        MAV_ODID_TIME_ACC_1_5_SECOND = 15,
        MAV_ODID_TIME_ACC_ENUM_END = 16,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_ODID_AUTH_TYPE : uint
    {

        /// <summary>
        /// No authentication type is specified.
        /// </summary>
        MAV_ODID_AUTH_TYPE_NONE = 0,

        /// <summary>
        /// Signature for the UAS (Unmanned Aircraft System) ID.
        /// </summary>
        MAV_ODID_AUTH_TYPE_UAS_ID_SIGNATURE = 1,

        /// <summary>
        /// Signature for the Operator ID.
        /// </summary>
        MAV_ODID_AUTH_TYPE_OPERATOR_ID_SIGNATURE = 2,

        /// <summary>
        /// Signature for the entire message set.
        /// </summary>
        MAV_ODID_AUTH_TYPE_MESSAGE_SET_SIGNATURE = 3,

        /// <summary>
        /// Authentication is provided by Network Remote ID.
        /// </summary>
        MAV_ODID_AUTH_TYPE_NETWORK_REMOTE_ID = 4,
        MAV_ODID_AUTH_TYPE_ENUM_END = 5,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_ODID_DESC_TYPE : uint
    {

        /// <summary>
        /// Free-form text description of the purpose of the flight.
        /// </summary>
        MAV_ODID_DESC_TYPE_TEXT = 0,
        MAV_ODID_DESC_TYPE_ENUM_END = 1,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_ODID_LOCATION_SRC : uint
    {

        /// <summary>
        /// The location of the operator is the same as the take-off location.
        /// </summary>
        MAV_ODID_LOCATION_SRC_TAKEOFF = 0,

        /// <summary>
        /// The location of the operator is based on live GNSS data.
        /// </summary>
        MAV_ODID_LOCATION_SRC_LIVE_GNSS = 1,

        /// <summary>
        /// The location of the operator is a fixed location.
        /// </summary>
        MAV_ODID_LOCATION_SRC_FIXED = 2,
        MAV_ODID_LOCATION_SRC_ENUM_END = 3,

    }


    /// <summary>
    /// 
    /// </summary>
    public enum MAV_ODID_OPERATOR_ID_TYPE : uint
    {

        /// <summary>
        /// CAA (Civil Aviation Authority) registered operator ID.
        /// </summary>
        MAV_ODID_OPERATOR_ID_TYPE_CAA = 0,
        MAV_ODID_OPERATOR_ID_TYPE_ENUM_END = 1,

    }


    /// <summary>
    /// Tune formats (used for vehicle buzzer/tone generation).
    /// </summary>
    public enum TUNE_FORMAT : uint
    {

        /// <summary>
        /// Format is QBasic 1.1 Play: https://www.qbasic.net/en/reference/qb11/Statement/PLAY-006.htm.
        /// </summary>
        TUNE_FORMAT_QBASIC1_1 = 1,

        /// <summary>
        /// Format is Modern Music Markup Language (MML): https://en.wikipedia.org/wiki/Music_Macro_Language#Modern_MML.
        /// </summary>
        TUNE_FORMAT_MML_MODERN = 2,
        TUNE_FORMAT_ENUM_END = 3,

    }


    /// <summary>
    /// Component capability flags (Bitmap)
    /// </summary>
    public enum COMPONENT_CAP_FLAGS : uint
    {

        /// <summary>
        /// Component has parameters, and supports the parameter protocol (PARAM messages).
        /// </summary>
        COMPONENT_CAP_FLAGS_PARAM = 1,

        /// <summary>
        /// Component has parameters, and supports the extended parameter protocol (PARAM_EXT messages).
        /// </summary>
        COMPONENT_CAP_FLAGS_PARAM_EXT = 2,
        COMPONENT_CAP_FLAGS_ENUM_END = 3,

    }


    /// <summary>
    /// Type of AIS vessel, enum duplicated from AIS standard, https://gpsd.gitlab.io/gpsd/AIVDM.html
    /// </summary>
    public enum AIS_TYPE : uint
    {

        /// <summary>
        /// Not available (default).
        /// </summary>
        AIS_TYPE_UNKNOWN = 0,
        AIS_TYPE_RESERVED_1 = 1,
        AIS_TYPE_RESERVED_2 = 2,
        AIS_TYPE_RESERVED_3 = 3,
        AIS_TYPE_RESERVED_4 = 4,
        AIS_TYPE_RESERVED_5 = 5,
        AIS_TYPE_RESERVED_6 = 6,
        AIS_TYPE_RESERVED_7 = 7,
        AIS_TYPE_RESERVED_8 = 8,
        AIS_TYPE_RESERVED_9 = 9,
        AIS_TYPE_RESERVED_10 = 10,
        AIS_TYPE_RESERVED_11 = 11,
        AIS_TYPE_RESERVED_12 = 12,
        AIS_TYPE_RESERVED_13 = 13,
        AIS_TYPE_RESERVED_14 = 14,
        AIS_TYPE_RESERVED_15 = 15,
        AIS_TYPE_RESERVED_16 = 16,
        AIS_TYPE_RESERVED_17 = 17,
        AIS_TYPE_RESERVED_18 = 18,
        AIS_TYPE_RESERVED_19 = 19,

        /// <summary>
        /// Wing In Ground effect.
        /// </summary>
        AIS_TYPE_WIG = 20,
        AIS_TYPE_WIG_HAZARDOUS_A = 21,
        AIS_TYPE_WIG_HAZARDOUS_B = 22,
        AIS_TYPE_WIG_HAZARDOUS_C = 23,
        AIS_TYPE_WIG_HAZARDOUS_D = 24,
        AIS_TYPE_WIG_RESERVED_1 = 25,
        AIS_TYPE_WIG_RESERVED_2 = 26,
        AIS_TYPE_WIG_RESERVED_3 = 27,
        AIS_TYPE_WIG_RESERVED_4 = 28,
        AIS_TYPE_WIG_RESERVED_5 = 29,
        AIS_TYPE_FISHING = 30,
        AIS_TYPE_TOWING = 31,

        /// <summary>
        /// Towing: length exceeds 200m or breadth exceeds 25m.
        /// </summary>
        AIS_TYPE_TOWING_LARGE = 32,

        /// <summary>
        /// Dredging or other underwater ops.
        /// </summary>
        AIS_TYPE_DREDGING = 33,
        AIS_TYPE_DIVING = 34,
        AIS_TYPE_MILITARY = 35,
        AIS_TYPE_SAILING = 36,
        AIS_TYPE_PLEASURE = 37,
        AIS_TYPE_RESERVED_20 = 38,
        AIS_TYPE_RESERVED_21 = 39,

        /// <summary>
        /// High Speed Craft.
        /// </summary>
        AIS_TYPE_HSC = 40,
        AIS_TYPE_HSC_HAZARDOUS_A = 41,
        AIS_TYPE_HSC_HAZARDOUS_B = 42,
        AIS_TYPE_HSC_HAZARDOUS_C = 43,
        AIS_TYPE_HSC_HAZARDOUS_D = 44,
        AIS_TYPE_HSC_RESERVED_1 = 45,
        AIS_TYPE_HSC_RESERVED_2 = 46,
        AIS_TYPE_HSC_RESERVED_3 = 47,
        AIS_TYPE_HSC_RESERVED_4 = 48,
        AIS_TYPE_HSC_UNKNOWN = 49,
        AIS_TYPE_PILOT = 50,

        /// <summary>
        /// Search And Rescue vessel.
        /// </summary>
        AIS_TYPE_SAR = 51,
        AIS_TYPE_TUG = 52,
        AIS_TYPE_PORT_TENDER = 53,

        /// <summary>
        /// Anti-pollution equipment.
        /// </summary>
        AIS_TYPE_ANTI_POLLUTION = 54,
        AIS_TYPE_LAW_ENFORCEMENT = 55,
        AIS_TYPE_SPARE_LOCAL_1 = 56,
        AIS_TYPE_SPARE_LOCAL_2 = 57,
        AIS_TYPE_MEDICAL_TRANSPORT = 58,

        /// <summary>
        /// Noncombatant ship according to RR Resolution No. 18.
        /// </summary>
        AIS_TYPE_NONECOMBATANT = 59,
        AIS_TYPE_PASSENGER = 60,
        AIS_TYPE_PASSENGER_HAZARDOUS_A = 61,
        AIS_TYPE_PASSENGER_HAZARDOUS_B = 62,
        AIS_TYPE_AIS_TYPE_PASSENGER_HAZARDOUS_C = 63,
        AIS_TYPE_PASSENGER_HAZARDOUS_D = 64,
        AIS_TYPE_PASSENGER_RESERVED_1 = 65,
        AIS_TYPE_PASSENGER_RESERVED_2 = 66,
        AIS_TYPE_PASSENGER_RESERVED_3 = 67,
        AIS_TYPE_AIS_TYPE_PASSENGER_RESERVED_4 = 68,
        AIS_TYPE_PASSENGER_UNKNOWN = 69,
        AIS_TYPE_CARGO = 70,
        AIS_TYPE_CARGO_HAZARDOUS_A = 71,
        AIS_TYPE_CARGO_HAZARDOUS_B = 72,
        AIS_TYPE_CARGO_HAZARDOUS_C = 73,
        AIS_TYPE_CARGO_HAZARDOUS_D = 74,
        AIS_TYPE_CARGO_RESERVED_1 = 75,
        AIS_TYPE_CARGO_RESERVED_2 = 76,
        AIS_TYPE_CARGO_RESERVED_3 = 77,
        AIS_TYPE_CARGO_RESERVED_4 = 78,
        AIS_TYPE_CARGO_UNKNOWN = 79,
        AIS_TYPE_TANKER = 80,
        AIS_TYPE_TANKER_HAZARDOUS_A = 81,
        AIS_TYPE_TANKER_HAZARDOUS_B = 82,
        AIS_TYPE_TANKER_HAZARDOUS_C = 83,
        AIS_TYPE_TANKER_HAZARDOUS_D = 84,
        AIS_TYPE_TANKER_RESERVED_1 = 85,
        AIS_TYPE_TANKER_RESERVED_2 = 86,
        AIS_TYPE_TANKER_RESERVED_3 = 87,
        AIS_TYPE_TANKER_RESERVED_4 = 88,
        AIS_TYPE_TANKER_UNKNOWN = 89,
        AIS_TYPE_OTHER = 90,
        AIS_TYPE_OTHER_HAZARDOUS_A = 91,
        AIS_TYPE_OTHER_HAZARDOUS_B = 92,
        AIS_TYPE_OTHER_HAZARDOUS_C = 93,
        AIS_TYPE_OTHER_HAZARDOUS_D = 94,
        AIS_TYPE_OTHER_RESERVED_1 = 95,
        AIS_TYPE_OTHER_RESERVED_2 = 96,
        AIS_TYPE_OTHER_RESERVED_3 = 97,
        AIS_TYPE_OTHER_RESERVED_4 = 98,
        AIS_TYPE_OTHER_UNKNOWN = 99,
        AIS_TYPE_ENUM_END = 100,

    }


    /// <summary>
    /// Navigational status of AIS vessel, enum duplicated from AIS standard, https://gpsd.gitlab.io/gpsd/AIVDM.html
    /// </summary>
    public enum AIS_NAV_STATUS : uint
    {

        /// <summary>
        /// Under way using engine.
        /// </summary>
        UNDER_WAY = 0,
        AIS_NAV_ANCHORED = 1,
        AIS_NAV_UN_COMMANDED = 2,
        AIS_NAV_RESTRICTED_MANOEUVERABILITY = 3,
        AIS_NAV_DRAUGHT_CONSTRAINED = 4,
        AIS_NAV_MOORED = 5,
        AIS_NAV_AGROUND = 6,
        AIS_NAV_FISHING = 7,
        AIS_NAV_SAILING = 8,
        AIS_NAV_RESERVED_HSC = 9,
        AIS_NAV_RESERVED_WIG = 10,
        AIS_NAV_RESERVED_1 = 11,
        AIS_NAV_RESERVED_2 = 12,
        AIS_NAV_RESERVED_3 = 13,

        /// <summary>
        /// Search And Rescue Transponder.
        /// </summary>
        AIS_NAV_AIS_SART = 14,

        /// <summary>
        /// Not available (default).
        /// </summary>
        AIS_NAV_UNKNOWN = 15,
        AIS_NAV_STATUS_ENUM_END = 16,

    }


    /// <summary>
    /// These flags are used in the AIS_VESSEL.fields bitmask to indicate validity of data in the other message fields. When set, the data is valid.
    /// </summary>
    public enum AIS_FLAGS : uint
    {

        /// <summary>
        /// 1 = Position accuracy less than 10m, 0 = position accuracy greater than 10m.
        /// </summary>
        AIS_FLAGS_POSITION_ACCURACY = 1,
        AIS_FLAGS_VALID_COG = 2,
        AIS_FLAGS_VALID_VELOCITY = 4,

        /// <summary>
        /// 1 = Velocity over 52.5765m/s (102.2 knots)
        /// </summary>
        AIS_FLAGS_HIGH_VELOCITY = 8,
        AIS_FLAGS_VALID_TURN_RATE = 16,

        /// <summary>
        /// Only the sign of the returned turn rate value is valid, either greater than 5deg/30s or less than -5deg/30s
        /// </summary>
        AIS_FLAGS_TURN_RATE_SIGN_ONLY = 32,
        AIS_FLAGS_VALID_DIMENSIONS = 64,

        /// <summary>
        /// Distance to bow is larger than 511m
        /// </summary>
        AIS_FLAGS_LARGE_BOW_DIMENSION = 128,

        /// <summary>
        /// Distance to stern is larger than 511m
        /// </summary>
        AIS_FLAGS_LARGE_STERN_DIMENSION = 256,

        /// <summary>
        /// Distance to port side is larger than 63m
        /// </summary>
        AIS_FLAGS_LARGE_PORT_DIMENSION = 512,

        /// <summary>
        /// Distance to starboard side is larger than 63m
        /// </summary>
        AIS_FLAGS_LARGE_STARBOARD_DIMENSION = 1024,
        AIS_FLAGS_VALID_CALLSIGN = 2048,
        AIS_FLAGS_VALID_NAME = 4096,
        AIS_FLAGS_ENUM_END = 4097,

    }


}



namespace MavLink
{

    public abstract class MavlinkMessage
    {
        public abstract int Serialize(byte[] bytes, ref int offset);
    }

    /// <summary>
    /// The heartbeat message shows that a system or component is present and responding. The type and autopilot fields (along with the message component id), allow the receiving system to treat further messages from this system appropriately (e.g. by laying out the user interface based on the autopilot). This microservice is documented at https://mavlink.io/en/services/heartbeat.html
    /// </summary>
    public class Msg_heartbeat : MavlinkMessage
    {

        /// <summary>
        /// Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.
        /// </summary>
        public byte type;

        /// <summary>
        /// Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.
        /// </summary>
        public byte autopilot;

        /// <summary>
        /// System mode bitmap.
        /// </summary>
        public byte base_mode;

        /// <summary>
        /// A bitfield for use for autopilot-specific flags
        /// </summary>
        public UInt32 custom_mode;

        /// <summary>
        /// System status flag.
        /// </summary>
        public byte system_status;

        /// <summary>
        /// MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version
        /// </summary>
        public byte mavlink_version;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_HEARTBEAT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The general system state. If the system is following the MAVLink standard, the system state is mainly defined by three orthogonal states/modes: The system mode, which is either LOCKED (motors shut down and locked), MANUAL (system under RC control), GUIDED (system with autonomous position control, position setpoint controlled manually) or AUTO (system guided by path/waypoint planner). The NAV_MODE defined the current flight state: LIFTOFF (often an open-loop maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal navigation state machine. The system status shows whether the system is currently active or not and if an emergency occurred. During the CRITICAL and EMERGENCY states the MAV is still considered to be active, but should start emergency procedures autonomously. After a failure occurred it should first move from active to critical to allow manual intervention and then move to emergency after a certain timeout.
    /// </summary>
    public class Msg_sys_status : MavlinkMessage
    {

        /// <summary>
        /// Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present.
        /// </summary>
        public UInt32 onboard_control_sensors_present;

        /// <summary>
        /// Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled.
        /// </summary>
        public UInt32 onboard_control_sensors_enabled;

        /// <summary>
        /// Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy.
        /// </summary>
        public UInt32 onboard_control_sensors_health;

        /// <summary>
        /// Maximum usage in percent of the mainloop time. Values: [0-1000] - should always be below 1000
        /// </summary>
        public UInt16 load;

        /// <summary>
        /// Battery voltage, UINT16_MAX: Voltage not sent by autopilot
        /// </summary>
        public UInt16 voltage_battery;

        /// <summary>
        /// Battery current, -1: Current not sent by autopilot
        /// </summary>
        public Int16 current_battery;

        /// <summary>
        /// Battery energy remaining, -1: Battery remaining energy not sent by autopilot
        /// </summary>
        public sbyte battery_remaining;

        /// <summary>
        /// Communication drop rate, (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)
        /// </summary>
        public UInt16 drop_rate_comm;

        /// <summary>
        /// Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)
        /// </summary>
        public UInt16 errors_comm;

        /// <summary>
        /// Autopilot-specific errors
        /// </summary>
        public UInt16 errors_count1;

        /// <summary>
        /// Autopilot-specific errors
        /// </summary>
        public UInt16 errors_count2;

        /// <summary>
        /// Autopilot-specific errors
        /// </summary>
        public UInt16 errors_count3;

        /// <summary>
        /// Autopilot-specific errors
        /// </summary>
        public UInt16 errors_count4;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SYS_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The system time is the time of the master clock, typically the computer clock of the main onboard computer.
    /// </summary>
    public class Msg_system_time : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX epoch time).
        /// </summary>
        public UInt64 time_unix_usec;

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SYSTEM_TIME(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// A ping message either requesting or responding to a ping. This allows to measure the system latencies, including serial port, radio modem and UDP connections. The ping microservice is documented at https://mavlink.io/en/services/ping.html
    /// </summary>
    public class Msg_ping : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// PING sequence
        /// </summary>
        public UInt32 seq;

        /// <summary>
        /// 0: request ping from all receiving systems. If greater than 0: message is a ping response and number is the system id of the requesting system
        /// </summary>
        public byte target_system;

        /// <summary>
        /// 0: request ping from all receiving components. If greater than 0: message is a ping response and number is the component id of the requesting component.
        /// </summary>
        public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PING(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request to control this MAV
    /// </summary>
    public class Msg_change_operator_control : MavlinkMessage
    {

        /// <summary>
        /// System the GCS requests control for
        /// </summary>
        public byte target_system;

        /// <summary>
        /// 0: request control of this MAV, 1: Release control of this MAV
        /// </summary>
        public byte control_request;

        /// <summary>
        /// 0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch.
        /// </summary>
        public byte version;

        /// <summary>
        /// Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-"
        /// </summary>
        public byte[] passkey; // Array size 25

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_CHANGE_OPERATOR_CONTROL(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Accept / deny control of this MAV
    /// </summary>
    public class Msg_change_operator_control_ack : MavlinkMessage
    {

        /// <summary>
        /// ID of the GCS this message 
        /// </summary>
        public byte gcs_system_id;

        /// <summary>
        /// 0: request control of this MAV, 1: Release control of this MAV
        /// </summary>
        public byte control_request;

        /// <summary>
        /// 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control
        /// </summary>
        public byte ack;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_CHANGE_OPERATOR_CONTROL_ACK(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Emit an encrypted signature / key identifying this system. PLEASE NOTE: This protocol has been kept simple, so transmitting the key requires an encrypted channel for true safety.
    /// </summary>
    public class Msg_auth_key : MavlinkMessage
    {
        public byte[] key; // Array size 32

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_AUTH_KEY(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Status generated in each node in the communication chain and injected into MAVLink stream.
    /// </summary>
    public class Msg_link_node_status : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt64 timestamp;

        /// <summary>
        /// Remaining free transmit buffer space
        /// </summary>
        public byte tx_buf;

        /// <summary>
        /// Remaining free receive buffer space
        /// </summary>
        public byte rx_buf;

        /// <summary>
        /// Transmit rate
        /// </summary>
        public UInt32 tx_rate;

        /// <summary>
        /// Receive rate
        /// </summary>
        public UInt32 rx_rate;

        /// <summary>
        /// Number of bytes that could not be parsed correctly.
        /// </summary>
        public UInt16 rx_parse_err;

        /// <summary>
        /// Transmit buffer overflows. This number wraps around as it reaches UINT16_MAX
        /// </summary>
        public UInt16 tx_overflows;

        /// <summary>
        /// Receive buffer overflows. This number wraps around as it reaches UINT16_MAX
        /// </summary>
        public UInt16 rx_overflows;

        /// <summary>
        /// Messages sent
        /// </summary>
        public UInt32 messages_sent;

        /// <summary>
        /// Messages received (estimated from counting seq)
        /// </summary>
        public UInt32 messages_received;

        /// <summary>
        /// Messages lost (estimated from counting seq)
        /// </summary>
        public UInt32 messages_lost;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LINK_NODE_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Set the system mode, as defined by enum MAV_MODE. There is no target component id as the mode is by definition for the overall aircraft, not only for one component.
    /// </summary>
    public class Msg_set_mode : MavlinkMessage
    {

        /// <summary>
        /// The system setting the mode
        /// </summary>
        public byte target_system;

        /// <summary>
        /// The new base mode.
        /// </summary>
        public byte base_mode;

        /// <summary>
        /// The new autopilot-specific mode. This field can be ignored by an autopilot.
        /// </summary>
        public UInt32 custom_mode;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SET_MODE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also https://mavlink.io/en/services/parameter.html for a full documentation of QGroundControl and IMU code.
    /// </summary>
    public class Msg_param_request_read : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// </summary>
        public byte[] param_id; // Array size 16

        /// <summary>
        /// Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
        /// </summary>
        public Int16 param_index;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PARAM_REQUEST_READ(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request all parameters of this component. After this request, all parameters are emitted. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html
    /// </summary>
    public class Msg_param_request_list : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PARAM_REQUEST_LIST(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html
    /// </summary>
    public class Msg_param_value : MavlinkMessage
    {

        /// <summary>
        /// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// </summary>
        public byte[] param_id; // Array size 16

        /// <summary>
        /// Onboard parameter value
        /// </summary>
        public float param_value;

        /// <summary>
        /// Onboard parameter type.
        /// </summary>
        public byte param_type;

        /// <summary>
        /// Total number of onboard parameters
        /// </summary>
        public UInt16 param_count;

        /// <summary>
        /// Index of this onboard parameter
        /// </summary>
        public UInt16 param_index;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PARAM_VALUE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Set a parameter value (write new value to permanent storage). IMPORTANT: The receiving component should acknowledge the new parameter value by sending a PARAM_VALUE message to all communication partners. This will also ensure that multiple GCS all have an up-to-date list of all parameters. If the sending GCS did not receive a PARAM_VALUE message within its timeout time, it should re-send the PARAM_SET message. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html
    /// </summary>
    public class Msg_param_set : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// </summary>
        public byte[] param_id; // Array size 16

        /// <summary>
        /// Onboard parameter value
        /// </summary>
        public float param_value;

        /// <summary>
        /// Onboard parameter type.
        /// </summary>
        public byte param_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PARAM_SET(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The global position, as returned by the Global Positioning System (GPS). This is
    ///                NOT the global position estimate of the system, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate.
    /// </summary>
    public class Msg_gps_raw_int : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// GPS fix type.
        /// </summary>
        public byte fix_type;

        /// <summary>
        /// Latitude (WGS84, EGM96 ellipsoid)
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude (WGS84, EGM96 ellipsoid)
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude.
        /// </summary>
        public Int32 alt;

        /// <summary>
        /// GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX
        /// </summary>
        public UInt16 eph;

        /// <summary>
        /// GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX
        /// </summary>
        public UInt16 epv;

        /// <summary>
        /// GPS ground speed. If unknown, set to: UINT16_MAX
        /// </summary>
        public UInt16 vel;

        /// <summary>
        /// Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
        /// </summary>
        public UInt16 cog;

        /// <summary>
        /// Number of satellites visible. If unknown, set to 255
        /// </summary>
        public byte satellites_visible;

        /// <summary>
        /// Altitude (above WGS84, EGM96 ellipsoid). Positive for up.
        /// </summary>
        public Int32 alt_ellipsoid;

        /// <summary>
        /// Position uncertainty. Positive for up.
        /// </summary>
        public UInt32 h_acc;

        /// <summary>
        /// Altitude uncertainty. Positive for up.
        /// </summary>
        public UInt32 v_acc;

        /// <summary>
        /// Speed uncertainty. Positive for up.
        /// </summary>
        public UInt32 vel_acc;

        /// <summary>
        /// Heading / track uncertainty
        /// </summary>
        public UInt32 hdg_acc;

        /// <summary>
        /// Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use 65535 if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north.
        /// </summary>
        public UInt16 yaw;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GPS_RAW_INT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The positioning status, as reported by GPS. This message is intended to display status information about each satellite visible to the receiver. See message GLOBAL_POSITION for the global position estimate. This message can contain information for up to 20 satellites.
    /// </summary>
    public class Msg_gps_status : MavlinkMessage
    {

        /// <summary>
        /// Number of satellites visible
        /// </summary>
        public byte satellites_visible;

        /// <summary>
        /// Global satellite ID
        /// </summary>
        public byte[] satellite_prn; // Array size 20

        /// <summary>
        /// 0: Satellite not used, 1: used for localization
        /// </summary>
        public byte[] satellite_used; // Array size 20

        /// <summary>
        /// Elevation (0: right on top of receiver, 90: on the horizon) of satellite
        /// </summary>
        public byte[] satellite_elevation; // Array size 20

        /// <summary>
        /// Direction of satellite, 0: 0 deg, 255: 360 deg.
        /// </summary>
        public byte[] satellite_azimuth; // Array size 20

        /// <summary>
        /// Signal to noise ratio of satellite
        /// </summary>
        public byte[] satellite_snr; // Array size 20

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GPS_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The RAW IMU readings for the usual 9DOF sensor setup. This message should contain the scaled values to the described units
    /// </summary>
    public class Msg_scaled_imu : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// X acceleration
        /// </summary>
        public Int16 xacc;

        /// <summary>
        /// Y acceleration
        /// </summary>
        public Int16 yacc;

        /// <summary>
        /// Z acceleration
        /// </summary>
        public Int16 zacc;

        /// <summary>
        /// Angular speed around X axis
        /// </summary>
        public Int16 xgyro;

        /// <summary>
        /// Angular speed around Y axis
        /// </summary>
        public Int16 ygyro;

        /// <summary>
        /// Angular speed around Z axis
        /// </summary>
        public Int16 zgyro;

        /// <summary>
        /// X Magnetic field
        /// </summary>
        public Int16 xmag;

        /// <summary>
        /// Y Magnetic field
        /// </summary>
        public Int16 ymag;

        /// <summary>
        /// Z Magnetic field
        /// </summary>
        public Int16 zmag;

        /// <summary>
        /// Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
        /// </summary>
        public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SCALED_IMU(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The RAW IMU readings for a 9DOF sensor, which is identified by the id (default IMU1). This message should always contain the true raw values without any scaling to allow data capture and system debugging.
    /// </summary>
    public class Msg_raw_imu : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// X acceleration (raw)
        /// </summary>
        public Int16 xacc;

        /// <summary>
        /// Y acceleration (raw)
        /// </summary>
        public Int16 yacc;

        /// <summary>
        /// Z acceleration (raw)
        /// </summary>
        public Int16 zacc;

        /// <summary>
        /// Angular speed around X axis (raw)
        /// </summary>
        public Int16 xgyro;

        /// <summary>
        /// Angular speed around Y axis (raw)
        /// </summary>
        public Int16 ygyro;

        /// <summary>
        /// Angular speed around Z axis (raw)
        /// </summary>
        public Int16 zgyro;

        /// <summary>
        /// X Magnetic field (raw)
        /// </summary>
        public Int16 xmag;

        /// <summary>
        /// Y Magnetic field (raw)
        /// </summary>
        public Int16 ymag;

        /// <summary>
        /// Z Magnetic field (raw)
        /// </summary>
        public Int16 zmag;

        /// <summary>
        /// Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0)
        /// </summary>
        public byte id;

        /// <summary>
        /// Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
        /// </summary>
        public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_RAW_IMU(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The RAW pressure readings for the typical setup of one absolute pressure and one differential pressure sensor. The sensor values should be the raw, UNSCALED ADC values.
    /// </summary>
    public class Msg_raw_pressure : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Absolute pressure (raw)
        /// </summary>
        public Int16 press_abs;

        /// <summary>
        /// Differential pressure 1 (raw, 0 if nonexistent)
        /// </summary>
        public Int16 press_diff1;

        /// <summary>
        /// Differential pressure 2 (raw, 0 if nonexistent)
        /// </summary>
        public Int16 press_diff2;

        /// <summary>
        /// Raw Temperature measurement (raw)
        /// </summary>
        public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_RAW_PRESSURE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The pressure readings for the typical setup of one absolute and differential pressure sensor. The units are as specified in each field.
    /// </summary>
    public class Msg_scaled_pressure : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Absolute pressure
        /// </summary>
        public float press_abs;

        /// <summary>
        /// Differential pressure 1
        /// </summary>
        public float press_diff;
        public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SCALED_PRESSURE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right).
    /// </summary>
    public class Msg_attitude : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Roll angle (-pi..+pi)
        /// </summary>
        public float roll;

        /// <summary>
        /// Pitch angle (-pi..+pi)
        /// </summary>
        public float pitch;

        /// <summary>
        /// Yaw angle (-pi..+pi)
        /// </summary>
        public float yaw;

        /// <summary>
        /// Roll angular speed
        /// </summary>
        public float rollspeed;

        /// <summary>
        /// Pitch angular speed
        /// </summary>
        public float pitchspeed;

        /// <summary>
        /// Yaw angular speed
        /// </summary>
        public float yawspeed;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ATTITUDE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
    /// </summary>
    public class Msg_attitude_quaternion : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Quaternion component 1, w (1 in null-rotation)
        /// </summary>
        public float q1;

        /// <summary>
        /// Quaternion component 2, x (0 in null-rotation)
        /// </summary>
        public float q2;

        /// <summary>
        /// Quaternion component 3, y (0 in null-rotation)
        /// </summary>
        public float q3;

        /// <summary>
        /// Quaternion component 4, z (0 in null-rotation)
        /// </summary>
        public float q4;

        /// <summary>
        /// Roll angular speed
        /// </summary>
        public float rollspeed;

        /// <summary>
        /// Pitch angular speed
        /// </summary>
        public float pitchspeed;

        /// <summary>
        /// Yaw angular speed
        /// </summary>
        public float yawspeed;

        /// <summary>
        /// Rotation offset by which the attitude quaternion and angular speed vector should be rotated for user display (quaternion with [w, x, y, z] order, zero-rotation is [1, 0, 0, 0], send [0, 0, 0, 0] if field not supported). This field is intended for systems in which the reference attitude may change during flight. For example, tailsitters VTOLs rotate their reference attitude by 90 degrees between hover mode and fixed wing mode, thus repr_offset_q is equal to [1, 0, 0, 0] in hover mode and equal to [0.7071, 0, 0.7071, 0] in fixed wing mode.
        /// </summary>
        public float[] repr_offset_q; // Array size 4

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ATTITUDE_QUATERNION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
    /// </summary>
    public class Msg_local_position_ned : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// X Position
        /// </summary>
        public float x;

        /// <summary>
        /// Y Position
        /// </summary>
        public float y;

        /// <summary>
        /// Z Position
        /// </summary>
        public float z;

        /// <summary>
        /// X Speed
        /// </summary>
        public float vx;

        /// <summary>
        /// Y Speed
        /// </summary>
        public float vy;

        /// <summary>
        /// Z Speed
        /// </summary>
        public float vz;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LOCAL_POSITION_NED(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It
    ///               is designed as scaled integer message since the resolution of float is not sufficient.
    /// </summary>
    public class Msg_global_position_int : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Latitude, expressed
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude, expressed
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL.
        /// </summary>
        public Int32 alt;

        /// <summary>
        /// Altitude above ground
        /// </summary>
        public Int32 relative_alt;

        /// <summary>
        /// Ground X Speed (Latitude, positive north)
        /// </summary>
        public Int16 vx;

        /// <summary>
        /// Ground Y Speed (Longitude, positive east)
        /// </summary>
        public Int16 vy;

        /// <summary>
        /// Ground Z Speed (Altitude, positive down)
        /// </summary>
        public Int16 vz;

        /// <summary>
        /// Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
        /// </summary>
        public UInt16 hdg;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GLOBAL_POSITION_INT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The scaled values of the RC channels received: (-100%) -10000, (0%) 0, (100%) 10000. Channels that are inactive should be set to UINT16_MAX.
    /// </summary>
    public class Msg_rc_channels_scaled : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
        /// </summary>
        public byte port;

        /// <summary>
        /// RC channel 1 value scaled.
        /// </summary>
        public Int16 chan1_scaled;

        /// <summary>
        /// RC channel 2 value scaled.
        /// </summary>
        public Int16 chan2_scaled;

        /// <summary>
        /// RC channel 3 value scaled.
        /// </summary>
        public Int16 chan3_scaled;

        /// <summary>
        /// RC channel 4 value scaled.
        /// </summary>
        public Int16 chan4_scaled;

        /// <summary>
        /// RC channel 5 value scaled.
        /// </summary>
        public Int16 chan5_scaled;

        /// <summary>
        /// RC channel 6 value scaled.
        /// </summary>
        public Int16 chan6_scaled;

        /// <summary>
        /// RC channel 7 value scaled.
        /// </summary>
        public Int16 chan7_scaled;

        /// <summary>
        /// RC channel 8 value scaled.
        /// </summary>
        public Int16 chan8_scaled;

        /// <summary>
        /// Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.
        /// </summary>
        public byte rssi;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_RC_CHANNELS_SCALED(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. A value of UINT16_MAX implies the channel is unused. Individual receivers/transmitters might violate this specification.
    /// </summary>
    public class Msg_rc_channels_raw : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
        /// </summary>
        public byte port;

        /// <summary>
        /// RC channel 1 value.
        /// </summary>
        public UInt16 chan1_raw;

        /// <summary>
        /// RC channel 2 value.
        /// </summary>
        public UInt16 chan2_raw;

        /// <summary>
        /// RC channel 3 value.
        /// </summary>
        public UInt16 chan3_raw;

        /// <summary>
        /// RC channel 4 value.
        /// </summary>
        public UInt16 chan4_raw;

        /// <summary>
        /// RC channel 5 value.
        /// </summary>
        public UInt16 chan5_raw;

        /// <summary>
        /// RC channel 6 value.
        /// </summary>
        public UInt16 chan6_raw;

        /// <summary>
        /// RC channel 7 value.
        /// </summary>
        public UInt16 chan7_raw;

        /// <summary>
        /// RC channel 8 value.
        /// </summary>
        public UInt16 chan8_raw;

        /// <summary>
        /// Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.
        /// </summary>
        public byte rssi;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_RC_CHANNELS_RAW(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Superseded by ACTUATOR_OUTPUT_STATUS. The RAW values of the servo outputs (for RC input from the remote, use the RC_CHANNELS messages). The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.
    /// </summary>
    public class Msg_servo_output_raw : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt32 time_usec;

        /// <summary>
        /// Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
        /// </summary>
        public byte port;

        /// <summary>
        /// Servo output 1 value
        /// </summary>
        public UInt16 servo1_raw;

        /// <summary>
        /// Servo output 2 value
        /// </summary>
        public UInt16 servo2_raw;

        /// <summary>
        /// Servo output 3 value
        /// </summary>
        public UInt16 servo3_raw;

        /// <summary>
        /// Servo output 4 value
        /// </summary>
        public UInt16 servo4_raw;

        /// <summary>
        /// Servo output 5 value
        /// </summary>
        public UInt16 servo5_raw;

        /// <summary>
        /// Servo output 6 value
        /// </summary>
        public UInt16 servo6_raw;

        /// <summary>
        /// Servo output 7 value
        /// </summary>
        public UInt16 servo7_raw;

        /// <summary>
        /// Servo output 8 value
        /// </summary>
        public UInt16 servo8_raw;

        /// <summary>
        /// Servo output 9 value
        /// </summary>
        public UInt16 servo9_raw;

        /// <summary>
        /// Servo output 10 value
        /// </summary>
        public UInt16 servo10_raw;

        /// <summary>
        /// Servo output 11 value
        /// </summary>
        public UInt16 servo11_raw;

        /// <summary>
        /// Servo output 12 value
        /// </summary>
        public UInt16 servo12_raw;

        /// <summary>
        /// Servo output 13 value
        /// </summary>
        public UInt16 servo13_raw;

        /// <summary>
        /// Servo output 14 value
        /// </summary>
        public UInt16 servo14_raw;

        /// <summary>
        /// Servo output 15 value
        /// </summary>
        public UInt16 servo15_raw;

        /// <summary>
        /// Servo output 16 value
        /// </summary>
        public UInt16 servo16_raw;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SERVO_OUTPUT_RAW(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request a partial list of mission items from the system/component. https://mavlink.io/en/services/mission.html. If start and end index are the same, just send one waypoint.
    /// </summary>
    public class Msg_mission_request_partial_list : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Start index
        /// </summary>
        public Int16 start_index;

        /// <summary>
        /// End index, -1 by default (-1: send list to end). Else a valid index of the list
        /// </summary>
        public Int16 end_index;

        /// <summary>
        /// Mission type.
        /// </summary>
        public byte mission_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_REQUEST_PARTIAL_LIST(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// This message is sent to the MAV to write a partial list. If start index == end index, only one item will be transmitted / updated. If the start index is NOT 0 and above the current list size, this request should be REJECTED!
    /// </summary>
    public class Msg_mission_write_partial_list : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Start index. Must be smaller / equal to the largest index of the current onboard list.
        /// </summary>
        public Int16 start_index;

        /// <summary>
        /// End index, equal or greater than start index.
        /// </summary>
        public Int16 end_index;

        /// <summary>
        /// Mission type.
        /// </summary>
        public byte mission_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_WRITE_PARTIAL_LIST(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Message encoding a mission item. This message is emitted to announce
    ///                the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). NaN may be used to indicate an optional/default value (e.g. to use the system's current latitude or yaw rather than a specific value). See also https://mavlink.io/en/services/mission.html.
    /// </summary>
    public class Msg_mission_item : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Sequence
        /// </summary>
        public UInt16 seq;

        /// <summary>
        /// The coordinate system of the waypoint.
        /// </summary>
        public byte frame;

        /// <summary>
        /// The scheduled action for the waypoint.
        /// </summary>
        public UInt16 command;

        /// <summary>
        /// false:0, true:1
        /// </summary>
        public byte current;

        /// <summary>
        /// Autocontinue to next waypoint
        /// </summary>
        public byte autocontinue;

        /// <summary>
        /// PARAM1, see MAV_CMD enum
        /// </summary>
        public float param1;

        /// <summary>
        /// PARAM2, see MAV_CMD enum
        /// </summary>
        public float param2;

        /// <summary>
        /// PARAM3, see MAV_CMD enum
        /// </summary>
        public float param3;

        /// <summary>
        /// PARAM4, see MAV_CMD enum
        /// </summary>
        public float param4;

        /// <summary>
        /// PARAM5 / local: X coordinate, global: latitude
        /// </summary>
        public float x;

        /// <summary>
        /// PARAM6 / local: Y coordinate, global: longitude
        /// </summary>
        public float y;

        /// <summary>
        /// PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame).
        /// </summary>
        public float z;

        /// <summary>
        /// Mission type.
        /// </summary>
        public byte mission_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_ITEM(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM message. https://mavlink.io/en/services/mission.html
    /// </summary>
    public class Msg_mission_request : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Sequence
        /// </summary>
        public UInt16 seq;

        /// <summary>
        /// Mission type.
        /// </summary>
        public byte mission_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_REQUEST(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Set the mission item with sequence number seq as current item. This means that the MAV will continue to this mission item on the shortest path (not following the mission items in-between).
    /// </summary>
    public class Msg_mission_set_current : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Sequence
        /// </summary>
        public UInt16 seq;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_SET_CURRENT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Message that announces the sequence number of the current active mission item. The MAV will fly towards this mission item.
    /// </summary>
    public class Msg_mission_current : MavlinkMessage
    {

        /// <summary>
        /// Sequence
        /// </summary>
        public UInt16 seq;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_CURRENT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request the overall list of mission items from the system/component.
    /// </summary>
    public class Msg_mission_request_list : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Mission type.
        /// </summary>
        public byte mission_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_REQUEST_LIST(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// This message is emitted as response to MISSION_REQUEST_LIST by the MAV and to initiate a write transaction. The GCS can then request the individual mission item based on the knowledge of the total number of waypoints.
    /// </summary>
    public class Msg_mission_count : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Number of mission items in the sequence
        /// </summary>
        public UInt16 count;

        /// <summary>
        /// Mission type.
        /// </summary>
        public byte mission_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_COUNT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Delete all mission items at once.
    /// </summary>
    public class Msg_mission_clear_all : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Mission type.
        /// </summary>
        public byte mission_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_CLEAR_ALL(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// A certain mission item has been reached. The system will either hold this position (or circle on the orbit) or (if the autocontinue on the WP was set) continue to the next waypoint.
    /// </summary>
    public class Msg_mission_item_reached : MavlinkMessage
    {

        /// <summary>
        /// Sequence
        /// </summary>
        public UInt16 seq;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_ITEM_REACHED(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Acknowledgment message during waypoint handling. The type field states if this message is a positive ack (type=0) or if an error happened (type=non-zero).
    /// </summary>
    public class Msg_mission_ack : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Mission result.
        /// </summary>
        public byte type;

        /// <summary>
        /// Mission type.
        /// </summary>
        public byte mission_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_ACK(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Sets the GPS co-ordinates of the vehicle local origin (0,0,0) position. Vehicle should emit GPS_GLOBAL_ORIGIN irrespective of whether the origin is changed. This enables transform between the local coordinate frame and the global (GPS) coordinate frame, which may be necessary when (for example) indoor and outdoor settings are connected and the MAV should move from in- to outdoor.
    /// </summary>
    public class Msg_set_gps_global_origin : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Latitude (WGS84)
        /// </summary>
        public Int32 latitude;

        /// <summary>
        /// Longitude (WGS84)
        /// </summary>
        public Int32 longitude;

        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// </summary>
        public Int32 altitude;

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SET_GPS_GLOBAL_ORIGIN(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Publishes the GPS co-ordinates of the vehicle local origin (0,0,0) position. Emitted whenever a new GPS-Local position mapping is requested or set - e.g. following SET_GPS_GLOBAL_ORIGIN message.
    /// </summary>
    public class Msg_gps_global_origin : MavlinkMessage
    {

        /// <summary>
        /// Latitude (WGS84)
        /// </summary>
        public Int32 latitude;

        /// <summary>
        /// Longitude (WGS84)
        /// </summary>
        public Int32 longitude;

        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// </summary>
        public Int32 altitude;

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GPS_GLOBAL_ORIGIN(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Bind a RC channel to a parameter. The parameter should change according to the RC channel value.
    /// </summary>
    public class Msg_param_map_rc : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// </summary>
        public byte[] param_id; // Array size 16

        /// <summary>
        /// Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index.
        /// </summary>
        public Int16 param_index;

        /// <summary>
        /// Index of parameter RC channel. Not equal to the RC channel id. Typically corresponds to a potentiometer-knob on the RC.
        /// </summary>
        public byte parameter_rc_channel_index;

        /// <summary>
        /// Initial parameter value
        /// </summary>
        public float param_value0;

        /// <summary>
        /// Scale, maps the RC range [-1, 1] to a parameter value
        /// </summary>
        public float scale;

        /// <summary>
        /// Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation)
        /// </summary>
        public float param_value_min;

        /// <summary>
        /// Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation)
        /// </summary>
        public float param_value_max;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PARAM_MAP_RC(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM_INT message. https://mavlink.io/en/services/mission.html
    /// </summary>
    public class Msg_mission_request_int : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Sequence
        /// </summary>
        public UInt16 seq;

        /// <summary>
        /// Mission type.
        /// </summary>
        public byte mission_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_REQUEST_INT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// A broadcast message to notify any ground station or SDK if a mission, geofence or safe points have changed on the vehicle.
    /// </summary>
    public class Msg_mission_changed : MavlinkMessage
    {

        /// <summary>
        /// Start index for partial mission change (-1 for all items).
        /// </summary>
        public Int16 start_index;

        /// <summary>
        /// End index of a partial mission change. -1 is a synonym for the last mission item (i.e. selects all items from start_index). Ignore field if start_index=-1.
        /// </summary>
        public Int16 end_index;

        /// <summary>
        /// System ID of the author of the new mission.
        /// </summary>
        public byte origin_sysid;

        /// <summary>
        /// Compnent ID of the author of the new mission.
        /// </summary>
        public byte origin_compid;

        /// <summary>
        /// Mission type.
        /// </summary>
        public byte mission_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_CHANGED(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Set a safety zone (volume), which is defined by two corners of a cube. This message can be used to tell the MAV which setpoints/waypoints to accept and which to reject. Safety areas are often enforced by national or competition regulations.
    /// </summary>
    public class Msg_safety_set_allowed_area : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.
        /// </summary>
        public byte frame;

        /// <summary>
        /// x position 1 / Latitude 1
        /// </summary>
        public float p1x;

        /// <summary>
        /// y position 1 / Longitude 1
        /// </summary>
        public float p1y;

        /// <summary>
        /// z position 1 / Altitude 1
        /// </summary>
        public float p1z;

        /// <summary>
        /// x position 2 / Latitude 2
        /// </summary>
        public float p2x;

        /// <summary>
        /// y position 2 / Longitude 2
        /// </summary>
        public float p2y;

        /// <summary>
        /// z position 2 / Altitude 2
        /// </summary>
        public float p2z;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SAFETY_SET_ALLOWED_AREA(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Read out the safety zone the MAV currently assumes.
    /// </summary>
    public class Msg_safety_allowed_area : MavlinkMessage
    {

        /// <summary>
        /// Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.
        /// </summary>
        public byte frame;

        /// <summary>
        /// x position 1 / Latitude 1
        /// </summary>
        public float p1x;

        /// <summary>
        /// y position 1 / Longitude 1
        /// </summary>
        public float p1y;

        /// <summary>
        /// z position 1 / Altitude 1
        /// </summary>
        public float p1z;

        /// <summary>
        /// x position 2 / Latitude 2
        /// </summary>
        public float p2x;

        /// <summary>
        /// y position 2 / Longitude 2
        /// </summary>
        public float p2y;

        /// <summary>
        /// z position 2 / Altitude 2
        /// </summary>
        public float p2z;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SAFETY_ALLOWED_AREA(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
    /// </summary>
    public class Msg_attitude_quaternion_cov : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// Roll angular speed
        /// </summary>
        public float rollspeed;

        /// <summary>
        /// Pitch angular speed
        /// </summary>
        public float pitchspeed;

        /// <summary>
        /// Yaw angular speed
        /// </summary>
        public float yawspeed;

        /// <summary>
        /// Row-major representation of a 3x3 attitude covariance matrix (states: roll, pitch, yaw; first three entries are the first ROW, next three entries are the second row, etc.). If unknown, assign NaN value to first element in the array.
        /// </summary>
        public float[] covariance; // Array size 9

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ATTITUDE_QUATERNION_COV(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The state of the fixed wing navigation and position controller.
    /// </summary>
    public class Msg_nav_controller_output : MavlinkMessage
    {

        /// <summary>
        /// Current desired roll
        /// </summary>
        public float nav_roll;

        /// <summary>
        /// Current desired pitch
        /// </summary>
        public float nav_pitch;

        /// <summary>
        /// Current desired heading
        /// </summary>
        public Int16 nav_bearing;

        /// <summary>
        /// Bearing to current waypoint/target
        /// </summary>
        public Int16 target_bearing;

        /// <summary>
        /// Distance to active waypoint
        /// </summary>
        public UInt16 wp_dist;

        /// <summary>
        /// Current altitude error
        /// </summary>
        public float alt_error;

        /// <summary>
        /// Current airspeed error
        /// </summary>
        public float aspd_error;

        /// <summary>
        /// Current crosstrack error on x-y plane
        /// </summary>
        public float xtrack_error;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_NAV_CONTROLLER_OUTPUT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It  is designed as scaled integer message since the resolution of float is not sufficient. NOTE: This message is intended for onboard networks / companion computers and higher-bandwidth links and optimized for accuracy and completeness. Please use the GLOBAL_POSITION_INT message for a minimal subset.
    /// </summary>
    public class Msg_global_position_int_cov : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Class id of the estimator this estimate originated from.
        /// </summary>
        public byte estimator_type;

        /// <summary>
        /// Latitude
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Altitude in meters above MSL
        /// </summary>
        public Int32 alt;

        /// <summary>
        /// Altitude above ground
        /// </summary>
        public Int32 relative_alt;

        /// <summary>
        /// Ground X Speed (Latitude)
        /// </summary>
        public float vx;

        /// <summary>
        /// Ground Y Speed (Longitude)
        /// </summary>
        public float vy;

        /// <summary>
        /// Ground Z Speed (Altitude)
        /// </summary>
        public float vz;

        /// <summary>
        /// Row-major representation of a 6x6 position and velocity 6x6 cross-covariance matrix (states: lat, lon, alt, vx, vy, vz; first six entries are the first ROW, next six entries are the second row, etc.). If unknown, assign NaN value to first element in the array.
        /// </summary>
        public float[] covariance; // Array size 36

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GLOBAL_POSITION_INT_COV(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
    /// </summary>
    public class Msg_local_position_ned_cov : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Class id of the estimator this estimate originated from.
        /// </summary>
        public byte estimator_type;

        /// <summary>
        /// X Position
        /// </summary>
        public float x;

        /// <summary>
        /// Y Position
        /// </summary>
        public float y;

        /// <summary>
        /// Z Position
        /// </summary>
        public float z;

        /// <summary>
        /// X Speed
        /// </summary>
        public float vx;

        /// <summary>
        /// Y Speed
        /// </summary>
        public float vy;

        /// <summary>
        /// Z Speed
        /// </summary>
        public float vz;

        /// <summary>
        /// X Acceleration
        /// </summary>
        public float ax;

        /// <summary>
        /// Y Acceleration
        /// </summary>
        public float ay;

        /// <summary>
        /// Z Acceleration
        /// </summary>
        public float az;

        /// <summary>
        /// Row-major representation of position, velocity and acceleration 9x9 cross-covariance matrix upper right triangle (states: x, y, z, vx, vy, vz, ax, ay, az; first nine entries are the first ROW, next eight entries are the second row, etc.). If unknown, assign NaN value to first element in the array.
        /// </summary>
        public float[] covariance; // Array size 45

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LOCAL_POSITION_NED_COV(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The PPM values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.  A value of UINT16_MAX implies the channel is unused. Individual receivers/transmitters might violate this specification.
    /// </summary>
    public class Msg_rc_channels : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available.
        /// </summary>
        public byte chancount;

        /// <summary>
        /// RC channel 1 value.
        /// </summary>
        public UInt16 chan1_raw;

        /// <summary>
        /// RC channel 2 value.
        /// </summary>
        public UInt16 chan2_raw;

        /// <summary>
        /// RC channel 3 value.
        /// </summary>
        public UInt16 chan3_raw;

        /// <summary>
        /// RC channel 4 value.
        /// </summary>
        public UInt16 chan4_raw;

        /// <summary>
        /// RC channel 5 value.
        /// </summary>
        public UInt16 chan5_raw;

        /// <summary>
        /// RC channel 6 value.
        /// </summary>
        public UInt16 chan6_raw;

        /// <summary>
        /// RC channel 7 value.
        /// </summary>
        public UInt16 chan7_raw;

        /// <summary>
        /// RC channel 8 value.
        /// </summary>
        public UInt16 chan8_raw;

        /// <summary>
        /// RC channel 9 value.
        /// </summary>
        public UInt16 chan9_raw;

        /// <summary>
        /// RC channel 10 value.
        /// </summary>
        public UInt16 chan10_raw;

        /// <summary>
        /// RC channel 11 value.
        /// </summary>
        public UInt16 chan11_raw;

        /// <summary>
        /// RC channel 12 value.
        /// </summary>
        public UInt16 chan12_raw;

        /// <summary>
        /// RC channel 13 value.
        /// </summary>
        public UInt16 chan13_raw;

        /// <summary>
        /// RC channel 14 value.
        /// </summary>
        public UInt16 chan14_raw;

        /// <summary>
        /// RC channel 15 value.
        /// </summary>
        public UInt16 chan15_raw;

        /// <summary>
        /// RC channel 16 value.
        /// </summary>
        public UInt16 chan16_raw;

        /// <summary>
        /// RC channel 17 value.
        /// </summary>
        public UInt16 chan17_raw;

        /// <summary>
        /// RC channel 18 value.
        /// </summary>
        public UInt16 chan18_raw;

        /// <summary>
        /// Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.
        /// </summary>
        public byte rssi;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_RC_CHANNELS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request a data stream.
    /// </summary>
    public class Msg_request_data_stream : MavlinkMessage
    {

        /// <summary>
        /// The target requested to send the message stream.
        /// </summary>
        public byte target_system;

        /// <summary>
        /// The target requested to send the message stream.
        /// </summary>
        public byte target_component;

        /// <summary>
        /// The ID of the requested data stream
        /// </summary>
        public byte req_stream_id;

        /// <summary>
        /// The requested message rate
        /// </summary>
        public UInt16 req_message_rate;

        /// <summary>
        /// 1 to start sending, 0 to stop sending.
        /// </summary>
        public byte start_stop;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_REQUEST_DATA_STREAM(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Data stream status information.
    /// </summary>
    public class Msg_data_stream : MavlinkMessage
    {

        /// <summary>
        /// The ID of the requested data stream
        /// </summary>
        public byte stream_id;

        /// <summary>
        /// The message rate
        /// </summary>
        public UInt16 message_rate;

        /// <summary>
        /// 1 stream is enabled, 0 stream is stopped.
        /// </summary>
        public byte on_off;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_DATA_STREAM(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// This message provides an API for manually controlling the vehicle using standard joystick axes nomenclature, along with a joystick-like input device. Unused axes can be disabled an buttons are also transmit as boolean values of their 
    /// </summary>
    public class Msg_manual_control : MavlinkMessage
    {

        /// <summary>
        /// The system to be controlled.
        /// </summary>
        public byte target;

        /// <summary>
        /// X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle.
        /// </summary>
        public Int16 x;

        /// <summary>
        /// Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle.
        /// </summary>
        public Int16 y;

        /// <summary>
        /// Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. Positive values are positive thrust, negative values are negative thrust.
        /// </summary>
        public Int16 z;

        /// <summary>
        /// R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle.
        /// </summary>
        public Int16 r;

        /// <summary>
        /// A bitfield corresponding to the joystick buttons' current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1.
        /// </summary>
        public UInt16 buttons;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MANUAL_CONTROL(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The RAW values of the RC channels sent to the MAV to override info received from the RC radio. A value of UINT16_MAX means no change to that channel. A value of 0 means control of that channel should be released back to the RC radio. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
    /// </summary>
    public class Msg_rc_channels_override : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// RC channel 1 value. A value of UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan1_raw;

        /// <summary>
        /// RC channel 2 value. A value of UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan2_raw;

        /// <summary>
        /// RC channel 3 value. A value of UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan3_raw;

        /// <summary>
        /// RC channel 4 value. A value of UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan4_raw;

        /// <summary>
        /// RC channel 5 value. A value of UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan5_raw;

        /// <summary>
        /// RC channel 6 value. A value of UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan6_raw;

        /// <summary>
        /// RC channel 7 value. A value of UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan7_raw;

        /// <summary>
        /// RC channel 8 value. A value of UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan8_raw;

        /// <summary>
        /// RC channel 9 value. A value of 0 or UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan9_raw;

        /// <summary>
        /// RC channel 10 value. A value of 0 or UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan10_raw;

        /// <summary>
        /// RC channel 11 value. A value of 0 or UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan11_raw;

        /// <summary>
        /// RC channel 12 value. A value of 0 or UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan12_raw;

        /// <summary>
        /// RC channel 13 value. A value of 0 or UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan13_raw;

        /// <summary>
        /// RC channel 14 value. A value of 0 or UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan14_raw;

        /// <summary>
        /// RC channel 15 value. A value of 0 or UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan15_raw;

        /// <summary>
        /// RC channel 16 value. A value of 0 or UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan16_raw;

        /// <summary>
        /// RC channel 17 value. A value of 0 or UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan17_raw;

        /// <summary>
        /// RC channel 18 value. A value of 0 or UINT16_MAX means to ignore this field.
        /// </summary>
        public UInt16 chan18_raw;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_RC_CHANNELS_OVERRIDE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Message encoding a mission item. This message is emitted to announce
    ///                the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). NaN or INT32_MAX may be used in float/integer params (respectively) to indicate optional/default values (e.g. to use the component's current latitude, yaw rather than a specific value). See also https://mavlink.io/en/services/mission.html.
    /// </summary>
    public class Msg_mission_item_int : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4).
        /// </summary>
        public UInt16 seq;

        /// <summary>
        /// The coordinate system of the waypoint.
        /// </summary>
        public byte frame;

        /// <summary>
        /// The scheduled action for the waypoint.
        /// </summary>
        public UInt16 command;

        /// <summary>
        /// false:0, true:1
        /// </summary>
        public byte current;

        /// <summary>
        /// Autocontinue to next waypoint
        /// </summary>
        public byte autocontinue;

        /// <summary>
        /// PARAM1, see MAV_CMD enum
        /// </summary>
        public float param1;

        /// <summary>
        /// PARAM2, see MAV_CMD enum
        /// </summary>
        public float param2;

        /// <summary>
        /// PARAM3, see MAV_CMD enum
        /// </summary>
        public float param3;

        /// <summary>
        /// PARAM4, see MAV_CMD enum
        /// </summary>
        public float param4;

        /// <summary>
        /// PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7
        /// </summary>
        public Int32 x;

        /// <summary>
        /// PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7
        /// </summary>
        public Int32 y;

        /// <summary>
        /// PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame.
        /// </summary>
        public float z;

        /// <summary>
        /// Mission type.
        /// </summary>
        public byte mission_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MISSION_ITEM_INT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Metrics typically displayed on a HUD for fixed wing aircraft.
    /// </summary>
    public class Msg_vfr_hud : MavlinkMessage
    {

        /// <summary>
        /// Current indicated airspeed (IAS).
        /// </summary>
        public float airspeed;

        /// <summary>
        /// Current ground speed.
        /// </summary>
        public float groundspeed;

        /// <summary>
        /// Current heading in compass units (0-360, 0=north).
        /// </summary>
        public Int16 heading;

        /// <summary>
        /// Current throttle setting (0 to 100).
        /// </summary>
        public UInt16 throttle;

        /// <summary>
        /// Current altitude (MSL).
        /// </summary>
        public float alt;

        /// <summary>
        /// Current climb rate.
        /// </summary>
        public float climb;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_VFR_HUD(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Message encoding a command with parameters as scaled integers. Scaling depends on the actual command value. The command microservice is documented at https://mavlink.io/en/services/command.html
    /// </summary>
    public class Msg_command_int : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// The coordinate system of the COMMAND.
        /// </summary>
        public byte frame;

        /// <summary>
        /// The scheduled action for the mission item.
        /// </summary>
        public UInt16 command;

        /// <summary>
        /// false:0, true:1
        /// </summary>
        public byte current;

        /// <summary>
        /// autocontinue to next wp
        /// </summary>
        public byte autocontinue;

        /// <summary>
        /// PARAM1, see MAV_CMD enum
        /// </summary>
        public float param1;

        /// <summary>
        /// PARAM2, see MAV_CMD enum
        /// </summary>
        public float param2;

        /// <summary>
        /// PARAM3, see MAV_CMD enum
        /// </summary>
        public float param3;

        /// <summary>
        /// PARAM4, see MAV_CMD enum
        /// </summary>
        public float param4;

        /// <summary>
        /// PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7
        /// </summary>
        public Int32 x;

        /// <summary>
        /// PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7
        /// </summary>
        public Int32 y;

        /// <summary>
        /// PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame).
        /// </summary>
        public float z;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_COMMAND_INT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Send a command with up to seven parameters to the MAV. The command microservice is documented at https://mavlink.io/en/services/command.html
    /// </summary>
    public class Msg_command_long : MavlinkMessage
    {

        /// <summary>
        /// System which should execute the command
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component which should execute the command, 0 for all components
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Command ID (of command to send).
        /// </summary>
        public UInt16 command;

        /// <summary>
        /// 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
        /// </summary>
        public byte confirmation;

        /// <summary>
        /// Parameter 1 (for the specific command).
        /// </summary>
        public float param1;

        /// <summary>
        /// Parameter 2 (for the specific command).
        /// </summary>
        public float param2;

        /// <summary>
        /// Parameter 3 (for the specific command).
        /// </summary>
        public float param3;

        /// <summary>
        /// Parameter 4 (for the specific command).
        /// </summary>
        public float param4;

        /// <summary>
        /// Parameter 5 (for the specific command).
        /// </summary>
        public float param5;

        /// <summary>
        /// Parameter 6 (for the specific command).
        /// </summary>
        public float param6;

        /// <summary>
        /// Parameter 7 (for the specific command).
        /// </summary>
        public float param7;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_COMMAND_LONG(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Report status of a command. Includes feedback whether the command was executed. The command microservice is documented at https://mavlink.io/en/services/command.html
    /// </summary>
    public class Msg_command_ack : MavlinkMessage
    {

        /// <summary>
        /// Command ID (of acknowledged command).
        /// </summary>
        public UInt16 command;

        /// <summary>
        /// Result of command.
        /// </summary>
        public byte result;

        /// <summary>
        /// WIP: Also used as result_param1, it can be set with a enum containing the errors reasons of why the command was denied or the progress percentage or 255 if unknown the progress when result is MAV_RESULT_IN_PROGRESS.
        /// </summary>
        public byte progress;

        /// <summary>
        /// WIP: Additional parameter of the result, example: which parameter of MAV_CMD_NAV_WAYPOINT caused it to be denied.
        /// </summary>
        public Int32 result_param2;

        /// <summary>
        /// WIP: System which requested the command to be executed
        /// </summary>
        public byte target_system;

        /// <summary>
        /// WIP: Component which requested the command to be executed
        /// </summary>
        public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_COMMAND_ACK(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Setpoint in roll, pitch, yaw and thrust from the operator
    /// </summary>
    public class Msg_manual_setpoint : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Desired roll rate
        /// </summary>
        public float roll;

        /// <summary>
        /// Desired pitch rate
        /// </summary>
        public float pitch;

        /// <summary>
        /// Desired yaw rate
        /// </summary>
        public float yaw;

        /// <summary>
        /// Collective thrust, normalized to 0 .. 1
        /// </summary>
        public float thrust;

        /// <summary>
        /// Flight mode switch position, 0.. 255
        /// </summary>
        public byte mode_switch;

        /// <summary>
        /// Override mode switch position, 0.. 255
        /// </summary>
        public byte manual_override_switch;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MANUAL_SETPOINT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Sets a desired vehicle attitude. Used by an external controller to command the vehicle (manual controller or other system).
    /// </summary>
    public class Msg_set_attitude_target : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 6: reserved, bit 7: throttle, bit 8: attitude
        /// </summary>
        public byte type_mask;

        /// <summary>
        /// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// Body roll rate
        /// </summary>
        public float body_roll_rate;

        /// <summary>
        /// Body pitch rate
        /// </summary>
        public float body_pitch_rate;

        /// <summary>
        /// Body yaw rate
        /// </summary>
        public float body_yaw_rate;

        /// <summary>
        /// Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)
        /// </summary>
        public float thrust;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SET_ATTITUDE_TARGET(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Reports the current commanded attitude of the vehicle as specified by the autopilot. This should match the commands sent in a SET_ATTITUDE_TARGET message if the vehicle is being controlled this way.
    /// </summary>
    public class Msg_attitude_target : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 7: reserved, bit 8: attitude
        /// </summary>
        public byte type_mask;

        /// <summary>
        /// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// Body roll rate
        /// </summary>
        public float body_roll_rate;

        /// <summary>
        /// Body pitch rate
        /// </summary>
        public float body_pitch_rate;

        /// <summary>
        /// Body yaw rate
        /// </summary>
        public float body_yaw_rate;

        /// <summary>
        /// Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)
        /// </summary>
        public float thrust;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ATTITUDE_TARGET(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Sets a desired vehicle position in a local north-east-down coordinate frame. Used by an external controller to command the vehicle (manual controller or other system).
    /// </summary>
    public class Msg_set_position_target_local_ned : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9
        /// </summary>
        public byte coordinate_frame;

        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// </summary>
        public UInt16 type_mask;

        /// <summary>
        /// X Position in NED frame
        /// </summary>
        public float x;

        /// <summary>
        /// Y Position in NED frame
        /// </summary>
        public float y;

        /// <summary>
        /// Z Position in NED frame (note, altitude is negative in NED)
        /// </summary>
        public float z;

        /// <summary>
        /// X velocity in NED frame
        /// </summary>
        public float vx;

        /// <summary>
        /// Y velocity in NED frame
        /// </summary>
        public float vy;

        /// <summary>
        /// Z velocity in NED frame
        /// </summary>
        public float vz;

        /// <summary>
        /// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// </summary>
        public float afx;

        /// <summary>
        /// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// </summary>
        public float afy;

        /// <summary>
        /// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// </summary>
        public float afz;

        /// <summary>
        /// yaw setpoint
        /// </summary>
        public float yaw;

        /// <summary>
        /// yaw rate setpoint
        /// </summary>
        public float yaw_rate;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SET_POSITION_TARGET_LOCAL_NED(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_LOCAL_NED if the vehicle is being controlled this way.
    /// </summary>
    public class Msg_position_target_local_ned : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9
        /// </summary>
        public byte coordinate_frame;

        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// </summary>
        public UInt16 type_mask;

        /// <summary>
        /// X Position in NED frame
        /// </summary>
        public float x;

        /// <summary>
        /// Y Position in NED frame
        /// </summary>
        public float y;

        /// <summary>
        /// Z Position in NED frame (note, altitude is negative in NED)
        /// </summary>
        public float z;

        /// <summary>
        /// X velocity in NED frame
        /// </summary>
        public float vx;

        /// <summary>
        /// Y velocity in NED frame
        /// </summary>
        public float vy;

        /// <summary>
        /// Z velocity in NED frame
        /// </summary>
        public float vz;

        /// <summary>
        /// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// </summary>
        public float afx;

        /// <summary>
        /// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// </summary>
        public float afy;

        /// <summary>
        /// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// </summary>
        public float afz;

        /// <summary>
        /// yaw setpoint
        /// </summary>
        public float yaw;

        /// <summary>
        /// yaw rate setpoint
        /// </summary>
        public float yaw_rate;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_POSITION_TARGET_LOCAL_NED(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Sets a desired vehicle position, velocity, and/or acceleration in a global coordinate system (WGS84). Used by an external controller to command the vehicle (manual controller or other system).
    /// </summary>
    public class Msg_set_position_target_global_int : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11
        /// </summary>
        public byte coordinate_frame;

        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// </summary>
        public UInt16 type_mask;

        /// <summary>
        /// X Position in WGS84 frame
        /// </summary>
        public Int32 lat_int;

        /// <summary>
        /// Y Position in WGS84 frame
        /// </summary>
        public Int32 lon_int;

        /// <summary>
        /// Altitude (MSL, Relative to home, or AGL - depending on frame)
        /// </summary>
        public float alt;

        /// <summary>
        /// X velocity in NED frame
        /// </summary>
        public float vx;

        /// <summary>
        /// Y velocity in NED frame
        /// </summary>
        public float vy;

        /// <summary>
        /// Z velocity in NED frame
        /// </summary>
        public float vz;

        /// <summary>
        /// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// </summary>
        public float afx;

        /// <summary>
        /// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// </summary>
        public float afy;

        /// <summary>
        /// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// </summary>
        public float afz;

        /// <summary>
        /// yaw setpoint
        /// </summary>
        public float yaw;

        /// <summary>
        /// yaw rate setpoint
        /// </summary>
        public float yaw_rate;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SET_POSITION_TARGET_GLOBAL_INT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_GLOBAL_INT if the vehicle is being controlled this way.
    /// </summary>
    public class Msg_position_target_global_int : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11
        /// </summary>
        public byte coordinate_frame;

        /// <summary>
        /// Bitmap to indicate which dimensions should be ignored by the vehicle.
        /// </summary>
        public UInt16 type_mask;

        /// <summary>
        /// X Position in WGS84 frame
        /// </summary>
        public Int32 lat_int;

        /// <summary>
        /// Y Position in WGS84 frame
        /// </summary>
        public Int32 lon_int;

        /// <summary>
        /// Altitude (MSL, AGL or relative to home altitude, depending on frame)
        /// </summary>
        public float alt;

        /// <summary>
        /// X velocity in NED frame
        /// </summary>
        public float vx;

        /// <summary>
        /// Y velocity in NED frame
        /// </summary>
        public float vy;

        /// <summary>
        /// Z velocity in NED frame
        /// </summary>
        public float vz;

        /// <summary>
        /// X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// </summary>
        public float afx;

        /// <summary>
        /// Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// </summary>
        public float afy;

        /// <summary>
        /// Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N
        /// </summary>
        public float afz;

        /// <summary>
        /// yaw setpoint
        /// </summary>
        public float yaw;

        /// <summary>
        /// yaw rate setpoint
        /// </summary>
        public float yaw_rate;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_POSITION_TARGET_GLOBAL_INT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages of MAV X and the global coordinate frame in NED coordinates. Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
    /// </summary>
    public class Msg_local_position_ned_system_global_offset : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// X Position
        /// </summary>
        public float x;

        /// <summary>
        /// Y Position
        /// </summary>
        public float y;

        /// <summary>
        /// Z Position
        /// </summary>
        public float z;
        public float roll;
        public float pitch;
        public float yaw;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Sent from simulation to autopilot. This packet is useful for high throughput applications such as hardware in the loop simulations.
    /// </summary>
    public class Msg_hil_state : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Roll angle
        /// </summary>
        public float roll;

        /// <summary>
        /// Pitch angle
        /// </summary>
        public float pitch;

        /// <summary>
        /// Yaw angle
        /// </summary>
        public float yaw;

        /// <summary>
        /// Body frame roll / phi angular speed
        /// </summary>
        public float rollspeed;

        /// <summary>
        /// Body frame pitch / theta angular speed
        /// </summary>
        public float pitchspeed;

        /// <summary>
        /// Body frame yaw / psi angular speed
        /// </summary>
        public float yawspeed;

        /// <summary>
        /// Latitude
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Altitude
        /// </summary>
        public Int32 alt;

        /// <summary>
        /// Ground X Speed (Latitude)
        /// </summary>
        public Int16 vx;

        /// <summary>
        /// Ground Y Speed (Longitude)
        /// </summary>
        public Int16 vy;

        /// <summary>
        /// Ground Z Speed (Altitude)
        /// </summary>
        public Int16 vz;

        /// <summary>
        /// X acceleration
        /// </summary>
        public Int16 xacc;

        /// <summary>
        /// Y acceleration
        /// </summary>
        public Int16 yacc;

        /// <summary>
        /// Z acceleration
        /// </summary>
        public Int16 zacc;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_HIL_STATE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Sent from autopilot to simulation. Hardware in the loop control outputs
    /// </summary>
    public class Msg_hil_controls : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Control output -1 .. 1
        /// </summary>
        public float roll_ailerons;

        /// <summary>
        /// Control output -1 .. 1
        /// </summary>
        public float pitch_elevator;

        /// <summary>
        /// Control output -1 .. 1
        /// </summary>
        public float yaw_rudder;

        /// <summary>
        /// Throttle 0 .. 1
        /// </summary>
        public float throttle;

        /// <summary>
        /// Aux 1, -1 .. 1
        /// </summary>
        public float aux1;

        /// <summary>
        /// Aux 2, -1 .. 1
        /// </summary>
        public float aux2;

        /// <summary>
        /// Aux 3, -1 .. 1
        /// </summary>
        public float aux3;

        /// <summary>
        /// Aux 4, -1 .. 1
        /// </summary>
        public float aux4;

        /// <summary>
        /// System mode.
        /// </summary>
        public byte mode;

        /// <summary>
        /// Navigation mode (MAV_NAV_MODE)
        /// </summary>
        public byte nav_mode;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_HIL_CONTROLS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Sent from simulation to autopilot. The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
    /// </summary>
    public class Msg_hil_rc_inputs_raw : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// RC channel 1 value
        /// </summary>
        public UInt16 chan1_raw;

        /// <summary>
        /// RC channel 2 value
        /// </summary>
        public UInt16 chan2_raw;

        /// <summary>
        /// RC channel 3 value
        /// </summary>
        public UInt16 chan3_raw;

        /// <summary>
        /// RC channel 4 value
        /// </summary>
        public UInt16 chan4_raw;

        /// <summary>
        /// RC channel 5 value
        /// </summary>
        public UInt16 chan5_raw;

        /// <summary>
        /// RC channel 6 value
        /// </summary>
        public UInt16 chan6_raw;

        /// <summary>
        /// RC channel 7 value
        /// </summary>
        public UInt16 chan7_raw;

        /// <summary>
        /// RC channel 8 value
        /// </summary>
        public UInt16 chan8_raw;

        /// <summary>
        /// RC channel 9 value
        /// </summary>
        public UInt16 chan9_raw;

        /// <summary>
        /// RC channel 10 value
        /// </summary>
        public UInt16 chan10_raw;

        /// <summary>
        /// RC channel 11 value
        /// </summary>
        public UInt16 chan11_raw;

        /// <summary>
        /// RC channel 12 value
        /// </summary>
        public UInt16 chan12_raw;

        /// <summary>
        /// Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.
        /// </summary>
        public byte rssi;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_HIL_RC_INPUTS_RAW(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Sent from autopilot to simulation. Hardware in the loop control outputs (replacement for HIL_CONTROLS)
    /// </summary>
    public class Msg_hil_actuator_controls : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Control outputs -1 .. 1. Channel assignment depends on the simulated hardware.
        /// </summary>
        public float[] controls; // Array size 16

        /// <summary>
        /// System mode. Includes arming state.
        /// </summary>
        public byte mode;

        /// <summary>
        /// Flags as bitfield, 1: indicate simulation using lockstep.
        /// </summary>
        public UInt64 flags;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_HIL_ACTUATOR_CONTROLS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Optical flow from a flow sensor (e.g. optical mouse sensor)
    /// </summary>
    public class Msg_optical_flow : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Sensor ID
        /// </summary>
        public byte sensor_id;

        /// <summary>
        /// Flow in x-sensor direction
        /// </summary>
        public Int16 flow_x;

        /// <summary>
        /// Flow in y-sensor direction
        /// </summary>
        public Int16 flow_y;

        /// <summary>
        /// Flow in x-sensor direction, angular-speed compensated
        /// </summary>
        public float flow_comp_m_x;

        /// <summary>
        /// Flow in y-sensor direction, angular-speed compensated
        /// </summary>
        public float flow_comp_m_y;

        /// <summary>
        /// Optical flow quality / confidence. 0: bad, 255: maximum quality
        /// </summary>
        public byte quality;

        /// <summary>
        /// Ground distance. Positive value: distance known. Negative value: Unknown distance
        /// </summary>
        public float ground_distance;

        /// <summary>
        /// Flow rate about X axis
        /// </summary>
        public float flow_rate_x;

        /// <summary>
        /// Flow rate about Y axis
        /// </summary>
        public float flow_rate_y;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_OPTICAL_FLOW(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Global position/attitude estimate from a vision source.
    /// </summary>
    public class Msg_global_vision_position_estimate : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX time or since system boot)
        /// </summary>
        public UInt64 usec;

        /// <summary>
        /// Global X position
        /// </summary>
        public float x;

        /// <summary>
        /// Global Y position
        /// </summary>
        public float y;

        /// <summary>
        /// Global Z position
        /// </summary>
        public float z;

        /// <summary>
        /// Roll angle
        /// </summary>
        public float roll;

        /// <summary>
        /// Pitch angle
        /// </summary>
        public float pitch;

        /// <summary>
        /// Yaw angle
        /// </summary>
        public float yaw;

        /// <summary>
        /// Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x_global, y_global, z_global, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// </summary>
        public float[] covariance; // Array size 21

        /// <summary>
        /// Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.
        /// </summary>
        public byte reset_counter;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GLOBAL_VISION_POSITION_ESTIMATE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Local position/attitude estimate from a vision source.
    /// </summary>
    public class Msg_vision_position_estimate : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX time or time since system boot)
        /// </summary>
        public UInt64 usec;

        /// <summary>
        /// Local X position
        /// </summary>
        public float x;

        /// <summary>
        /// Local Y position
        /// </summary>
        public float y;

        /// <summary>
        /// Local Z position
        /// </summary>
        public float z;

        /// <summary>
        /// Roll angle
        /// </summary>
        public float roll;

        /// <summary>
        /// Pitch angle
        /// </summary>
        public float pitch;

        /// <summary>
        /// Yaw angle
        /// </summary>
        public float yaw;

        /// <summary>
        /// Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// </summary>
        public float[] covariance; // Array size 21

        /// <summary>
        /// Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.
        /// </summary>
        public byte reset_counter;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_VISION_POSITION_ESTIMATE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Speed estimate from a vision source.
    /// </summary>
    public class Msg_vision_speed_estimate : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX time or time since system boot)
        /// </summary>
        public UInt64 usec;

        /// <summary>
        /// Global X speed
        /// </summary>
        public float x;

        /// <summary>
        /// Global Y speed
        /// </summary>
        public float y;

        /// <summary>
        /// Global Z speed
        /// </summary>
        public float z;

        /// <summary>
        /// Row-major representation of 3x3 linear velocity covariance matrix (states: vx, vy, vz; 1st three entries - 1st row, etc.). If unknown, assign NaN value to first element in the array.
        /// </summary>
        public float[] covariance; // Array size 9

        /// <summary>
        /// Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.
        /// </summary>
        public byte reset_counter;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_VISION_SPEED_ESTIMATE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Global position estimate from a Vicon motion system source.
    /// </summary>
    public class Msg_vicon_position_estimate : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX time or time since system boot)
        /// </summary>
        public UInt64 usec;

        /// <summary>
        /// Global X position
        /// </summary>
        public float x;

        /// <summary>
        /// Global Y position
        /// </summary>
        public float y;

        /// <summary>
        /// Global Z position
        /// </summary>
        public float z;

        /// <summary>
        /// Roll angle
        /// </summary>
        public float roll;

        /// <summary>
        /// Pitch angle
        /// </summary>
        public float pitch;

        /// <summary>
        /// Yaw angle
        /// </summary>
        public float yaw;

        /// <summary>
        /// Row-major representation of 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// </summary>
        public float[] covariance; // Array size 21

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_VICON_POSITION_ESTIMATE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The IMU readings in SI units in NED body frame
    /// </summary>
    public class Msg_highres_imu : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// X acceleration
        /// </summary>
        public float xacc;

        /// <summary>
        /// Y acceleration
        /// </summary>
        public float yacc;

        /// <summary>
        /// Z acceleration
        /// </summary>
        public float zacc;

        /// <summary>
        /// Angular speed around X axis
        /// </summary>
        public float xgyro;

        /// <summary>
        /// Angular speed around Y axis
        /// </summary>
        public float ygyro;

        /// <summary>
        /// Angular speed around Z axis
        /// </summary>
        public float zgyro;

        /// <summary>
        /// X Magnetic field
        /// </summary>
        public float xmag;

        /// <summary>
        /// Y Magnetic field
        /// </summary>
        public float ymag;

        /// <summary>
        /// Z Magnetic field
        /// </summary>
        public float zmag;

        /// <summary>
        /// Absolute pressure
        /// </summary>
        public float abs_pressure;

        /// <summary>
        /// Differential pressure
        /// </summary>
        public float diff_pressure;

        /// <summary>
        /// Altitude calculated from pressure
        /// </summary>
        public float pressure_alt;
        public float temperature;

        /// <summary>
        /// Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature
        /// </summary>
        public UInt16 fields_updated;

        /// <summary>
        /// Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0)
        /// </summary>
        public byte id;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_HIGHRES_IMU(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse sensor)
    /// </summary>
    public class Msg_optical_flow_rad : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Sensor ID
        /// </summary>
        public byte sensor_id;

        /// <summary>
        /// Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.
        /// </summary>
        public UInt32 integration_time_us;

        /// <summary>
        /// Flow around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)
        /// </summary>
        public float integrated_x;

        /// <summary>
        /// Flow around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)
        /// </summary>
        public float integrated_y;

        /// <summary>
        /// RH rotation around X axis
        /// </summary>
        public float integrated_xgyro;

        /// <summary>
        /// RH rotation around Y axis
        /// </summary>
        public float integrated_ygyro;

        /// <summary>
        /// RH rotation around Z axis
        /// </summary>
        public float integrated_zgyro;
        public Int16 temperature;

        /// <summary>
        /// Optical flow quality / confidence. 0: no valid flow, 255: maximum quality
        /// </summary>
        public byte quality;

        /// <summary>
        /// Time since the distance was sampled.
        /// </summary>
        public UInt32 time_delta_distance_us;

        /// <summary>
        /// Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance.
        /// </summary>
        public float distance;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_OPTICAL_FLOW_RAD(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The IMU readings in SI units in NED body frame
    /// </summary>
    public class Msg_hil_sensor : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// X acceleration
        /// </summary>
        public float xacc;

        /// <summary>
        /// Y acceleration
        /// </summary>
        public float yacc;

        /// <summary>
        /// Z acceleration
        /// </summary>
        public float zacc;

        /// <summary>
        /// Angular speed around X axis in body frame
        /// </summary>
        public float xgyro;

        /// <summary>
        /// Angular speed around Y axis in body frame
        /// </summary>
        public float ygyro;

        /// <summary>
        /// Angular speed around Z axis in body frame
        /// </summary>
        public float zgyro;

        /// <summary>
        /// X Magnetic field
        /// </summary>
        public float xmag;

        /// <summary>
        /// Y Magnetic field
        /// </summary>
        public float ymag;

        /// <summary>
        /// Z Magnetic field
        /// </summary>
        public float zmag;

        /// <summary>
        /// Absolute pressure
        /// </summary>
        public float abs_pressure;

        /// <summary>
        /// Differential pressure (airspeed)
        /// </summary>
        public float diff_pressure;

        /// <summary>
        /// Altitude calculated from pressure
        /// </summary>
        public float pressure_alt;
        public float temperature;

        /// <summary>
        /// Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature, bit 31: full reset of attitude/position/velocities/etc was performed in sim.
        /// </summary>
        public UInt32 fields_updated;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_HIL_SENSOR(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Status of simulation environment, if used
    /// </summary>
    public class Msg_sim_state : MavlinkMessage
    {

        /// <summary>
        /// True attitude quaternion component 1, w (1 in null-rotation)
        /// </summary>
        public float q1;

        /// <summary>
        /// True attitude quaternion component 2, x (0 in null-rotation)
        /// </summary>
        public float q2;

        /// <summary>
        /// True attitude quaternion component 3, y (0 in null-rotation)
        /// </summary>
        public float q3;

        /// <summary>
        /// True attitude quaternion component 4, z (0 in null-rotation)
        /// </summary>
        public float q4;

        /// <summary>
        /// Attitude roll expressed as Euler angles, not recommended except for human-readable outputs
        /// </summary>
        public float roll;

        /// <summary>
        /// Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs
        /// </summary>
        public float pitch;

        /// <summary>
        /// Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs
        /// </summary>
        public float yaw;

        /// <summary>
        /// X acceleration
        /// </summary>
        public float xacc;

        /// <summary>
        /// Y acceleration
        /// </summary>
        public float yacc;

        /// <summary>
        /// Z acceleration
        /// </summary>
        public float zacc;

        /// <summary>
        /// Angular speed around X axis
        /// </summary>
        public float xgyro;

        /// <summary>
        /// Angular speed around Y axis
        /// </summary>
        public float ygyro;

        /// <summary>
        /// Angular speed around Z axis
        /// </summary>
        public float zgyro;

        /// <summary>
        /// Latitude
        /// </summary>
        public float lat;

        /// <summary>
        /// Longitude
        /// </summary>
        public float lon;

        /// <summary>
        /// Altitude
        /// </summary>
        public float alt;

        /// <summary>
        /// Horizontal position standard deviation
        /// </summary>
        public float std_dev_horz;

        /// <summary>
        /// Vertical position standard deviation
        /// </summary>
        public float std_dev_vert;

        /// <summary>
        /// True velocity in north direction in earth-fixed NED frame
        /// </summary>
        public float vn;

        /// <summary>
        /// True velocity in east direction in earth-fixed NED frame
        /// </summary>
        public float ve;

        /// <summary>
        /// True velocity in down direction in earth-fixed NED frame
        /// </summary>
        public float vd;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SIM_STATE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Status generated by radio and injected into MAVLink stream.
    /// </summary>
    public class Msg_radio_status : MavlinkMessage
    {

        /// <summary>
        /// Local (message sender) recieved signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.
        /// </summary>
        public byte rssi;

        /// <summary>
        /// Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.
        /// </summary>
        public byte remrssi;

        /// <summary>
        /// Remaining free transmitter buffer space.
        /// </summary>
        public byte txbuf;

        /// <summary>
        /// Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown.
        /// </summary>
        public byte noise;

        /// <summary>
        /// Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown.
        /// </summary>
        public byte remnoise;

        /// <summary>
        /// Count of radio packet receive errors (since boot).
        /// </summary>
        public UInt16 rxerrors;

        /// <summary>
        /// Count of error corrected radio packets (since boot).
        /// </summary>
        public UInt16 @fixed;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_RADIO_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// File transfer message
    /// </summary>
    public class Msg_file_transfer_protocol : MavlinkMessage
    {

        /// <summary>
        /// Network ID (0 for broadcast)
        /// </summary>
        public byte target_network;

        /// <summary>
        /// System ID (0 for broadcast)
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID (0 for broadcast)
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification.
        /// </summary>
        public byte[] payload; // Array size 251

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_FILE_TRANSFER_PROTOCOL(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Time synchronization message.
    /// </summary>
    public class Msg_timesync : MavlinkMessage
    {

        /// <summary>
        /// Time sync timestamp 1
        /// </summary>
        public Int64 tc1;

        /// <summary>
        /// Time sync timestamp 2
        /// </summary>
        public Int64 ts1;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_TIMESYNC(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Camera-IMU triggering and synchronisation message.
    /// </summary>
    public class Msg_camera_trigger : MavlinkMessage
    {

        /// <summary>
        /// Timestamp for image frame (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Image frame sequence
        /// </summary>
        public UInt32 seq;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_CAMERA_TRIGGER(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The global position, as returned by the Global Positioning System (GPS). This is
    ///                 NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate.
    /// </summary>
    public class Msg_hil_gps : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.
        /// </summary>
        public byte fix_type;

        /// <summary>
        /// Latitude (WGS84)
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude (WGS84)
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// </summary>
        public Int32 alt;

        /// <summary>
        /// GPS HDOP horizontal dilution of position. If unknown, set to: 65535
        /// </summary>
        public UInt16 eph;

        /// <summary>
        /// GPS VDOP vertical dilution of position. If unknown, set to: 65535
        /// </summary>
        public UInt16 epv;

        /// <summary>
        /// GPS ground speed. If unknown, set to: 65535
        /// </summary>
        public UInt16 vel;

        /// <summary>
        /// GPS velocity in north direction in earth-fixed NED frame
        /// </summary>
        public Int16 vn;

        /// <summary>
        /// GPS velocity in east direction in earth-fixed NED frame
        /// </summary>
        public Int16 ve;

        /// <summary>
        /// GPS velocity in down direction in earth-fixed NED frame
        /// </summary>
        public Int16 vd;

        /// <summary>
        /// Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: 65535
        /// </summary>
        public UInt16 cog;

        /// <summary>
        /// Number of satellites visible. If unknown, set to 255
        /// </summary>
        public byte satellites_visible;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_HIL_GPS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical mouse sensor)
    /// </summary>
    public class Msg_hil_optical_flow : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Sensor ID
        /// </summary>
        public byte sensor_id;

        /// <summary>
        /// Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.
        /// </summary>
        public UInt32 integration_time_us;

        /// <summary>
        /// Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)
        /// </summary>
        public float integrated_x;

        /// <summary>
        /// Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)
        /// </summary>
        public float integrated_y;

        /// <summary>
        /// RH rotation around X axis
        /// </summary>
        public float integrated_xgyro;

        /// <summary>
        /// RH rotation around Y axis
        /// </summary>
        public float integrated_ygyro;

        /// <summary>
        /// RH rotation around Z axis
        /// </summary>
        public float integrated_zgyro;
        public Int16 temperature;

        /// <summary>
        /// Optical flow quality / confidence. 0: no valid flow, 255: maximum quality
        /// </summary>
        public byte quality;

        /// <summary>
        /// Time since the distance was sampled.
        /// </summary>
        public UInt32 time_delta_distance_us;

        /// <summary>
        /// Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance.
        /// </summary>
        public float distance;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_HIL_OPTICAL_FLOW(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Sent from simulation to autopilot, avoids in contrast to HIL_STATE singularities. This packet is useful for high throughput applications such as hardware in the loop simulations.
    /// </summary>
    public class Msg_hil_state_quaternion : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation)
        /// </summary>
        public float[] attitude_quaternion; // Array size 4

        /// <summary>
        /// Body frame roll / phi angular speed
        /// </summary>
        public float rollspeed;

        /// <summary>
        /// Body frame pitch / theta angular speed
        /// </summary>
        public float pitchspeed;

        /// <summary>
        /// Body frame yaw / psi angular speed
        /// </summary>
        public float yawspeed;

        /// <summary>
        /// Latitude
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Altitude
        /// </summary>
        public Int32 alt;

        /// <summary>
        /// Ground X Speed (Latitude)
        /// </summary>
        public Int16 vx;

        /// <summary>
        /// Ground Y Speed (Longitude)
        /// </summary>
        public Int16 vy;

        /// <summary>
        /// Ground Z Speed (Altitude)
        /// </summary>
        public Int16 vz;

        /// <summary>
        /// Indicated airspeed
        /// </summary>
        public UInt16 ind_airspeed;

        /// <summary>
        /// True airspeed
        /// </summary>
        public UInt16 true_airspeed;

        /// <summary>
        /// X acceleration
        /// </summary>
        public Int16 xacc;

        /// <summary>
        /// Y acceleration
        /// </summary>
        public Int16 yacc;

        /// <summary>
        /// Z acceleration
        /// </summary>
        public Int16 zacc;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_HIL_STATE_QUATERNION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The RAW IMU readings for secondary 9DOF sensor setup. This message should contain the scaled values to the described units
    /// </summary>
    public class Msg_scaled_imu2 : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// X acceleration
        /// </summary>
        public Int16 xacc;

        /// <summary>
        /// Y acceleration
        /// </summary>
        public Int16 yacc;

        /// <summary>
        /// Z acceleration
        /// </summary>
        public Int16 zacc;

        /// <summary>
        /// Angular speed around X axis
        /// </summary>
        public Int16 xgyro;

        /// <summary>
        /// Angular speed around Y axis
        /// </summary>
        public Int16 ygyro;

        /// <summary>
        /// Angular speed around Z axis
        /// </summary>
        public Int16 zgyro;

        /// <summary>
        /// X Magnetic field
        /// </summary>
        public Int16 xmag;

        /// <summary>
        /// Y Magnetic field
        /// </summary>
        public Int16 ymag;

        /// <summary>
        /// Z Magnetic field
        /// </summary>
        public Int16 zmag;

        /// <summary>
        /// Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
        /// </summary>
        public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SCALED_IMU2(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request a list of available logs. On some systems calling this may stop on-board logging until LOG_REQUEST_END is called.
    /// </summary>
    public class Msg_log_request_list : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// First log id (0 for first available)
        /// </summary>
        public UInt16 start;

        /// <summary>
        /// Last log id (0xffff for last available)
        /// </summary>
        public UInt16 end;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LOG_REQUEST_LIST(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Reply to LOG_REQUEST_LIST
    /// </summary>
    public class Msg_log_entry : MavlinkMessage
    {

        /// <summary>
        /// Log id
        /// </summary>
        public UInt16 id;

        /// <summary>
        /// Total number of logs
        /// </summary>
        public UInt16 num_logs;

        /// <summary>
        /// High log number
        /// </summary>
        public UInt16 last_log_num;

        /// <summary>
        /// UTC timestamp of log since 1970, or 0 if not available
        /// </summary>
        public UInt32 time_utc;

        /// <summary>
        /// Size of the log (may be approximate)
        /// </summary>
        public UInt32 size;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LOG_ENTRY(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request a chunk of a log
    /// </summary>
    public class Msg_log_request_data : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Log id (from LOG_ENTRY reply)
        /// </summary>
        public UInt16 id;

        /// <summary>
        /// Offset into the log
        /// </summary>
        public UInt32 ofs;

        /// <summary>
        /// Number of bytes
        /// </summary>
        public UInt32 count;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LOG_REQUEST_DATA(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Reply to LOG_REQUEST_DATA
    /// </summary>
    public class Msg_log_data : MavlinkMessage
    {

        /// <summary>
        /// Log id (from LOG_ENTRY reply)
        /// </summary>
        public UInt16 id;

        /// <summary>
        /// Offset into the log
        /// </summary>
        public UInt32 ofs;

        /// <summary>
        /// Number of bytes (zero for end of log)
        /// </summary>
        public byte count;

        /// <summary>
        /// log data
        /// </summary>
        public byte[] data; // Array size 90

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LOG_DATA(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Erase all logs
    /// </summary>
    public class Msg_log_erase : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LOG_ERASE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Stop log transfer and resume normal logging
    /// </summary>
    public class Msg_log_request_end : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LOG_REQUEST_END(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Data for injecting into the onboard GPS (used for DGPS)
    /// </summary>
    public class Msg_gps_inject_data : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Data length
        /// </summary>
        public byte len;

        /// <summary>
        /// Raw data (110 is enough for 12 satellites of RTCMv2)
        /// </summary>
        public byte[] data; // Array size 110

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GPS_INJECT_DATA(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Second GPS data.
    /// </summary>
    public class Msg_gps2_raw : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// GPS fix type.
        /// </summary>
        public byte fix_type;

        /// <summary>
        /// Latitude (WGS84)
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude (WGS84)
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// </summary>
        public Int32 alt;

        /// <summary>
        /// GPS HDOP horizontal dilution of position. If unknown, set to: UINT16_MAX
        /// </summary>
        public UInt16 eph;

        /// <summary>
        /// GPS VDOP vertical dilution of position. If unknown, set to: UINT16_MAX
        /// </summary>
        public UInt16 epv;

        /// <summary>
        /// GPS ground speed. If unknown, set to: UINT16_MAX
        /// </summary>
        public UInt16 vel;

        /// <summary>
        /// Course over ground (NOT heading, but direction of movement): 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
        /// </summary>
        public UInt16 cog;

        /// <summary>
        /// Number of satellites visible. If unknown, set to 255
        /// </summary>
        public byte satellites_visible;

        /// <summary>
        /// Number of DGPS satellites
        /// </summary>
        public byte dgps_numch;

        /// <summary>
        /// Age of DGPS info
        /// </summary>
        public UInt32 dgps_age;

        /// <summary>
        /// Yaw in earth frame from north. Use 0 if this GPS does not provide yaw. Use 65535 if this GPS is configured to provide yaw and is currently unable to provide it. Use 36000 for north.
        /// </summary>
        public UInt16 yaw;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GPS2_RAW(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Power supply status
    /// </summary>
    public class Msg_power_status : MavlinkMessage
    {

        /// <summary>
        /// 5V rail voltage.
        /// </summary>
        public UInt16 Vcc;

        /// <summary>
        /// Servo rail voltage.
        /// </summary>
        public UInt16 Vservo;

        /// <summary>
        /// Bitmap of power supply status flags.
        /// </summary>
        public UInt16 flags;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_POWER_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Control a serial port. This can be used for raw access to an onboard serial peripheral such as a GPS or telemetry radio. It is designed to make it possible to update the devices firmware via MAVLink messages or change the devices settings. A message with zero bytes can be used to change just the baudrate.
    /// </summary>
    public class Msg_serial_control : MavlinkMessage
    {

        /// <summary>
        /// Serial control device type.
        /// </summary>
        public byte device;

        /// <summary>
        /// Bitmap of serial control flags.
        /// </summary>
        public byte flags;

        /// <summary>
        /// Timeout for reply data
        /// </summary>
        public UInt16 timeout;

        /// <summary>
        /// Baudrate of transfer. Zero means no change.
        /// </summary>
        public UInt32 baudrate;

        /// <summary>
        /// how many bytes in this transfer
        /// </summary>
        public byte count;

        /// <summary>
        /// serial data
        /// </summary>
        public byte[] data; // Array size 70

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SERIAL_CONTROL(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
    /// </summary>
    public class Msg_gps_rtk : MavlinkMessage
    {

        /// <summary>
        /// Time since boot of last baseline message received.
        /// </summary>
        public UInt32 time_last_baseline_ms;

        /// <summary>
        /// Identification of connected RTK receiver.
        /// </summary>
        public byte rtk_receiver_id;

        /// <summary>
        /// GPS Week Number of last baseline
        /// </summary>
        public UInt16 wn;

        /// <summary>
        /// GPS Time of Week of last baseline
        /// </summary>
        public UInt32 tow;

        /// <summary>
        /// GPS-specific health report for RTK data.
        /// </summary>
        public byte rtk_health;

        /// <summary>
        /// Rate of baseline messages being received by GPS
        /// </summary>
        public byte rtk_rate;

        /// <summary>
        /// Current number of sats used for RTK calculation.
        /// </summary>
        public byte nsats;

        /// <summary>
        /// Coordinate system of baseline
        /// </summary>
        public byte baseline_coords_type;

        /// <summary>
        /// Current baseline in ECEF x or NED north component.
        /// </summary>
        public Int32 baseline_a_mm;

        /// <summary>
        /// Current baseline in ECEF y or NED east component.
        /// </summary>
        public Int32 baseline_b_mm;

        /// <summary>
        /// Current baseline in ECEF z or NED down component.
        /// </summary>
        public Int32 baseline_c_mm;

        /// <summary>
        /// Current estimate of baseline accuracy.
        /// </summary>
        public UInt32 accuracy;

        /// <summary>
        /// Current number of integer ambiguity hypotheses.
        /// </summary>
        public Int32 iar_num_hypotheses;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GPS_RTK(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting
    /// </summary>
    public class Msg_gps2_rtk : MavlinkMessage
    {

        /// <summary>
        /// Time since boot of last baseline message received.
        /// </summary>
        public UInt32 time_last_baseline_ms;

        /// <summary>
        /// Identification of connected RTK receiver.
        /// </summary>
        public byte rtk_receiver_id;

        /// <summary>
        /// GPS Week Number of last baseline
        /// </summary>
        public UInt16 wn;

        /// <summary>
        /// GPS Time of Week of last baseline
        /// </summary>
        public UInt32 tow;

        /// <summary>
        /// GPS-specific health report for RTK data.
        /// </summary>
        public byte rtk_health;

        /// <summary>
        /// Rate of baseline messages being received by GPS
        /// </summary>
        public byte rtk_rate;

        /// <summary>
        /// Current number of sats used for RTK calculation.
        /// </summary>
        public byte nsats;

        /// <summary>
        /// Coordinate system of baseline
        /// </summary>
        public byte baseline_coords_type;

        /// <summary>
        /// Current baseline in ECEF x or NED north component.
        /// </summary>
        public Int32 baseline_a_mm;

        /// <summary>
        /// Current baseline in ECEF y or NED east component.
        /// </summary>
        public Int32 baseline_b_mm;

        /// <summary>
        /// Current baseline in ECEF z or NED down component.
        /// </summary>
        public Int32 baseline_c_mm;

        /// <summary>
        /// Current estimate of baseline accuracy.
        /// </summary>
        public UInt32 accuracy;

        /// <summary>
        /// Current number of integer ambiguity hypotheses.
        /// </summary>
        public Int32 iar_num_hypotheses;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GPS2_RTK(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The RAW IMU readings for 3rd 9DOF sensor setup. This message should contain the scaled values to the described units
    /// </summary>
    public class Msg_scaled_imu3 : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// X acceleration
        /// </summary>
        public Int16 xacc;

        /// <summary>
        /// Y acceleration
        /// </summary>
        public Int16 yacc;

        /// <summary>
        /// Z acceleration
        /// </summary>
        public Int16 zacc;

        /// <summary>
        /// Angular speed around X axis
        /// </summary>
        public Int16 xgyro;

        /// <summary>
        /// Angular speed around Y axis
        /// </summary>
        public Int16 ygyro;

        /// <summary>
        /// Angular speed around Z axis
        /// </summary>
        public Int16 zgyro;

        /// <summary>
        /// X Magnetic field
        /// </summary>
        public Int16 xmag;

        /// <summary>
        /// Y Magnetic field
        /// </summary>
        public Int16 ymag;

        /// <summary>
        /// Z Magnetic field
        /// </summary>
        public Int16 zmag;

        /// <summary>
        /// Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).
        /// </summary>
        public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SCALED_IMU3(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Handshake message to initiate, control and stop image streaming when using the Image Transmission Protocol: https://mavlink.io/en/services/image_transmission.html.
    /// </summary>
    public class Msg_data_transmission_handshake : MavlinkMessage
    {

        /// <summary>
        /// Type of requested/acknowledged data.
        /// </summary>
        public byte type;

        /// <summary>
        /// total data size (set on ACK only).
        /// </summary>
        public UInt32 size;

        /// <summary>
        /// Width of a matrix or image.
        /// </summary>
        public UInt16 width;

        /// <summary>
        /// Height of a matrix or image.
        /// </summary>
        public UInt16 height;

        /// <summary>
        /// Number of packets being sent (set on ACK only).
        /// </summary>
        public UInt16 packets;

        /// <summary>
        /// Payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only).
        /// </summary>
        public byte payload;

        /// <summary>
        /// JPEG quality. Values: [1-100].
        /// </summary>
        public byte jpg_quality;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_DATA_TRANSMISSION_HANDSHAKE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Data packet for images sent using the Image Transmission Protocol: https://mavlink.io/en/services/image_transmission.html.
    /// </summary>
    public class Msg_encapsulated_data : MavlinkMessage
    {

        /// <summary>
        /// sequence number (starting with 0 on every transmission)
        /// </summary>
        public UInt16 seqnr;

        /// <summary>
        /// image data bytes
        /// </summary>
        public byte[] data; // Array size 253

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ENCAPSULATED_DATA(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Distance sensor information for an onboard rangefinder.
    /// </summary>
    public class Msg_distance_sensor : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Minimum distance the sensor can measure
        /// </summary>
        public UInt16 min_distance;

        /// <summary>
        /// Maximum distance the sensor can measure
        /// </summary>
        public UInt16 max_distance;

        /// <summary>
        /// Current distance reading
        /// </summary>
        public UInt16 current_distance;

        /// <summary>
        /// Type of distance sensor.
        /// </summary>
        public byte type;

        /// <summary>
        /// Onboard ID of the sensor
        /// </summary>
        public byte id;

        /// <summary>
        /// Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270
        /// </summary>
        public byte orientation;

        /// <summary>
        /// Measurement variance. Max standard deviation is 6cm. 255 if unknown.
        /// </summary>
        public byte covariance;

        /// <summary>
        /// Horizontal Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.
        /// </summary>
        public float horizontal_fov;

        /// <summary>
        /// Vertical Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.
        /// </summary>
        public float vertical_fov;

        /// <summary>
        /// Quaternion of the sensor orientation in vehicle body frame (w, x, y, z order, zero-rotation is 1, 0, 0, 0). Zero-rotation is along the vehicle body x-axis. This field is required if the orientation is set to MAV_SENSOR_ROTATION_CUSTOM. Set it to 0 if invalid."
        /// </summary>
        public float[] quaternion; // Array size 4

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_DISTANCE_SENSOR(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request for terrain data and terrain status
    /// </summary>
    public class Msg_terrain_request : MavlinkMessage
    {

        /// <summary>
        /// Latitude of SW corner of first grid
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude of SW corner of first grid
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Grid spacing
        /// </summary>
        public UInt16 grid_spacing;

        /// <summary>
        /// Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits)
        /// </summary>
        public UInt64 mask;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_TERRAIN_REQUEST(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Terrain data sent from GCS. The lat/lon and grid_spacing must be the same as a lat/lon from a TERRAIN_REQUEST
    /// </summary>
    public class Msg_terrain_data : MavlinkMessage
    {

        /// <summary>
        /// Latitude of SW corner of first grid
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude of SW corner of first grid
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Grid spacing
        /// </summary>
        public UInt16 grid_spacing;

        /// <summary>
        /// bit within the terrain request mask
        /// </summary>
        public byte gridbit;

        /// <summary>
        /// Terrain data MSL
        /// </summary>
        public Int16[] data; // Array size 16

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_TERRAIN_DATA(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request that the vehicle report terrain height at the given location. Used by GCS to check if vehicle has all terrain data needed for a mission.
    /// </summary>
    public class Msg_terrain_check : MavlinkMessage
    {

        /// <summary>
        /// Latitude
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude
        /// </summary>
        public Int32 lon;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_TERRAIN_CHECK(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Response from a TERRAIN_CHECK request
    /// </summary>
    public class Msg_terrain_report : MavlinkMessage
    {

        /// <summary>
        /// Latitude
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// grid spacing (zero if terrain at this location unavailable)
        /// </summary>
        public UInt16 spacing;

        /// <summary>
        /// Terrain height MSL
        /// </summary>
        public float terrain_height;

        /// <summary>
        /// Current vehicle height above lat/lon terrain height
        /// </summary>
        public float current_height;

        /// <summary>
        /// Number of 4x4 terrain blocks waiting to be received or read from disk
        /// </summary>
        public UInt16 pending;

        /// <summary>
        /// Number of 4x4 terrain blocks in memory
        /// </summary>
        public UInt16 loaded;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_TERRAIN_REPORT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Barometer readings for 2nd barometer
    /// </summary>
    public class Msg_scaled_pressure2 : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Absolute pressure
        /// </summary>
        public float press_abs;

        /// <summary>
        /// Differential pressure
        /// </summary>
        public float press_diff;

        /// <summary>
        /// Temperature measurement
        /// </summary>
        public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SCALED_PRESSURE2(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Motion capture attitude and position
    /// </summary>
    public class Msg_att_pos_mocap : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// X position (NED)
        /// </summary>
        public float x;

        /// <summary>
        /// Y position (NED)
        /// </summary>
        public float y;

        /// <summary>
        /// Z position (NED)
        /// </summary>
        public float z;

        /// <summary>
        /// Row-major representation of a pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// </summary>
        public float[] covariance; // Array size 21

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ATT_POS_MOCAP(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Set the vehicle attitude and body angular rates.
    /// </summary>
    public class Msg_set_actuator_control_target : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.
        /// </summary>
        public byte group_mlx;

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.
        /// </summary>
        public float[] controls; // Array size 8

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SET_ACTUATOR_CONTROL_TARGET(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Set the vehicle attitude and body angular rates.
    /// </summary>
    public class Msg_actuator_control_target : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.
        /// </summary>
        public byte group_mlx;

        /// <summary>
        /// Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.
        /// </summary>
        public float[] controls; // Array size 8

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ACTUATOR_CONTROL_TARGET(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The current system altitude.
    /// </summary>
    public class Msg_altitude : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights.
        /// </summary>
        public float altitude_monotonic;

        /// <summary>
        /// This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude.
        /// </summary>
        public float altitude_amsl;

        /// <summary>
        /// This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive.
        /// </summary>
        public float altitude_local;

        /// <summary>
        /// This is the altitude above the home position. It resets on each change of the current home position.
        /// </summary>
        public float altitude_relative;

        /// <summary>
        /// This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown.
        /// </summary>
        public float altitude_terrain;

        /// <summary>
        /// This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available.
        /// </summary>
        public float bottom_clearance;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ALTITUDE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The autopilot is requesting a resource (file, binary, other type of data)
    /// </summary>
    public class Msg_resource_request : MavlinkMessage
    {

        /// <summary>
        /// Request ID. This ID should be re-used when sending back URI contents
        /// </summary>
        public byte request_id;

        /// <summary>
        /// The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary
        /// </summary>
        public byte uri_type;

        /// <summary>
        /// The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum)
        /// </summary>
        public byte[] uri; // Array size 120

        /// <summary>
        /// The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream.
        /// </summary>
        public byte transfer_type;

        /// <summary>
        /// The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP).
        /// </summary>
        public byte[] storage; // Array size 120

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_RESOURCE_REQUEST(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Barometer readings for 3rd barometer
    /// </summary>
    public class Msg_scaled_pressure3 : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Absolute pressure
        /// </summary>
        public float press_abs;

        /// <summary>
        /// Differential pressure
        /// </summary>
        public float press_diff;

        /// <summary>
        /// Temperature measurement
        /// </summary>
        public Int16 temperature;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SCALED_PRESSURE3(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Current motion information from a designated system
    /// </summary>
    public class Msg_follow_target : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt64 timestamp;

        /// <summary>
        /// bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3)
        /// </summary>
        public byte est_capabilities;

        /// <summary>
        /// Latitude (WGS84)
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude (WGS84)
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Altitude (MSL)
        /// </summary>
        public float alt;

        /// <summary>
        /// target velocity (0,0,0) for unknown
        /// </summary>
        public float[] vel; // Array size 3

        /// <summary>
        /// linear target acceleration (0,0,0) for unknown
        /// </summary>
        public float[] acc; // Array size 3

        /// <summary>
        /// (1 0 0 0 for unknown)
        /// </summary>
        public float[] attitude_q; // Array size 4

        /// <summary>
        /// (0 0 0 for unknown)
        /// </summary>
        public float[] rates; // Array size 3

        /// <summary>
        /// eph epv
        /// </summary>
        public float[] position_cov; // Array size 3

        /// <summary>
        /// button states or switches of a tracker device
        /// </summary>
        public UInt64 custom_state;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_FOLLOW_TARGET(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The smoothed, monotonic system state used to feed the control loops of the system.
    /// </summary>
    public class Msg_control_system_state : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// X acceleration in body frame
        /// </summary>
        public float x_acc;

        /// <summary>
        /// Y acceleration in body frame
        /// </summary>
        public float y_acc;

        /// <summary>
        /// Z acceleration in body frame
        /// </summary>
        public float z_acc;

        /// <summary>
        /// X velocity in body frame
        /// </summary>
        public float x_vel;

        /// <summary>
        /// Y velocity in body frame
        /// </summary>
        public float y_vel;

        /// <summary>
        /// Z velocity in body frame
        /// </summary>
        public float z_vel;

        /// <summary>
        /// X position in local frame
        /// </summary>
        public float x_pos;

        /// <summary>
        /// Y position in local frame
        /// </summary>
        public float y_pos;

        /// <summary>
        /// Z position in local frame
        /// </summary>
        public float z_pos;

        /// <summary>
        /// Airspeed, set to -1 if unknown
        /// </summary>
        public float airspeed;

        /// <summary>
        /// Variance of body velocity estimate
        /// </summary>
        public float[] vel_variance; // Array size 3

        /// <summary>
        /// Variance in local position
        /// </summary>
        public float[] pos_variance; // Array size 3

        /// <summary>
        /// The attitude, represented as Quaternion
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// Angular rate in roll axis
        /// </summary>
        public float roll_rate;

        /// <summary>
        /// Angular rate in pitch axis
        /// </summary>
        public float pitch_rate;

        /// <summary>
        /// Angular rate in yaw axis
        /// </summary>
        public float yaw_rate;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_CONTROL_SYSTEM_STATE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Battery information. Updates GCS with flight controller battery status. Use SMART_BATTERY_* messages instead for smart batteries.
    /// </summary>
    public class Msg_battery_status : MavlinkMessage
    {

        /// <summary>
        /// Battery ID
        /// </summary>
        public byte id;

        /// <summary>
        /// Function of the battery
        /// </summary>
        public byte battery_function;

        /// <summary>
        /// Type (chemistry) of the battery
        /// </summary>
        public byte type;

        /// <summary>
        /// Temperature of the battery. INT16_MAX for unknown temperature.
        /// </summary>
        public Int16 temperature;

        /// <summary>
        /// Battery voltage of cells. Cells above the valid cell count for this battery should have the UINT16_MAX value. If individual cell voltages are unknown or not measured for this battery, then the overall battery voltage should be filled in cell 0, with all others set to UINT16_MAX. If the voltage of the battery is greater than (UINT16_MAX - 1), then cell 0 should be set to (UINT16_MAX - 1), and cell 1 to the remaining voltage. This can be extended to multiple cells if the total voltage is greater than 2 * (UINT16_MAX - 1).
        /// </summary>
        public UInt16[] voltages; // Array size 10

        /// <summary>
        /// Battery current, -1: autopilot does not measure the current
        /// </summary>
        public Int16 current_battery;

        /// <summary>
        /// Consumed charge, -1: autopilot does not provide consumption estimate
        /// </summary>
        public Int32 current_consumed;

        /// <summary>
        /// Consumed energy, -1: autopilot does not provide energy consumption estimate
        /// </summary>
        public Int32 energy_consumed;

        /// <summary>
        /// Remaining battery energy. Values: [0-100], -1: autopilot does not estimate the remaining battery.
        /// </summary>
        public sbyte battery_remaining;

        /// <summary>
        /// Remaining battery time, 0: autopilot does not provide remaining battery time estimate
        /// </summary>
        public Int32 time_remaining;

        /// <summary>
        /// State for extent of discharge, provided by autopilot for warning or external reactions
        /// </summary>
        public byte charge_state;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_BATTERY_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Version and capability of autopilot software. This should be emitted in response to a MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES command.
    /// </summary>
    public class Msg_autopilot_version : MavlinkMessage
    {

        /// <summary>
        /// Bitmap of capabilities
        /// </summary>
        public UInt64 capabilities;

        /// <summary>
        /// Firmware version number
        /// </summary>
        public UInt32 flight_sw_version;

        /// <summary>
        /// Middleware version number
        /// </summary>
        public UInt32 middleware_sw_version;

        /// <summary>
        /// Operating system version number
        /// </summary>
        public UInt32 os_sw_version;

        /// <summary>
        /// HW / board version (last 8 bytes should be silicon ID, if any)
        /// </summary>
        public UInt32 board_version;

        /// <summary>
        /// Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
        /// </summary>
        public byte[] flight_custom_version; // Array size 8

        /// <summary>
        /// Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
        /// </summary>
        public byte[] middleware_custom_version; // Array size 8

        /// <summary>
        /// Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
        /// </summary>
        public byte[] os_custom_version; // Array size 8

        /// <summary>
        /// ID of the board vendor
        /// </summary>
        public UInt16 vendor_id;

        /// <summary>
        /// ID of the product
        /// </summary>
        public UInt16 product_id;

        /// <summary>
        /// UID if provided by hardware (see uid2)
        /// </summary>
        public UInt64 uid;

        /// <summary>
        /// UID if provided by hardware (supersedes the uid field. If this is non-zero, use this field, otherwise use uid)
        /// </summary>
        public byte[] uid2; // Array size 18

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_AUTOPILOT_VERSION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The location of a landing target. See: https://mavlink.io/en/services/landing_target.html
    /// </summary>
    public class Msg_landing_target : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// The ID of the target if multiple targets are present
        /// </summary>
        public byte target_num;

        /// <summary>
        /// Coordinate frame used for following fields.
        /// </summary>
        public byte frame;

        /// <summary>
        /// X-axis angular offset of the target from the center of the image
        /// </summary>
        public float angle_x;

        /// <summary>
        /// Y-axis angular offset of the target from the center of the image
        /// </summary>
        public float angle_y;

        /// <summary>
        /// Distance to the target from the vehicle
        /// </summary>
        public float distance;

        /// <summary>
        /// Size of target along x-axis
        /// </summary>
        public float size_x;

        /// <summary>
        /// Size of target along y-axis
        /// </summary>
        public float size_y;

        /// <summary>
        /// X Position of the landing target in MAV_FRAME
        /// </summary>
        public float x;

        /// <summary>
        /// Y Position of the landing target in MAV_FRAME
        /// </summary>
        public float y;

        /// <summary>
        /// Z Position of the landing target in MAV_FRAME
        /// </summary>
        public float z;

        /// <summary>
        /// Quaternion of landing target orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// Type of landing target
        /// </summary>
        public byte type;

        /// <summary>
        /// Boolean indicating whether the position fields (x, y, z, q, type) contain valid target position information (valid: 1, invalid: 0). Default is 0 (invalid).
        /// </summary>
        public byte position_valid;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LANDING_TARGET(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Status of geo-fencing. Sent in extended status stream when fencing enabled.
    /// </summary>
    public class Msg_fence_status : MavlinkMessage
    {

        /// <summary>
        /// Breach status (0 if currently inside fence, 1 if outside).
        /// </summary>
        public byte breach_status;

        /// <summary>
        /// Number of fence breaches.
        /// </summary>
        public UInt16 breach_count;

        /// <summary>
        /// Last breach type.
        /// </summary>
        public byte breach_type;

        /// <summary>
        /// Time (since boot) of last breach.
        /// </summary>
        public UInt32 breach_time;

        /// <summary>
        /// Active action to prevent fence breach
        /// </summary>
        public byte breach_mitigation;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_FENCE_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Estimator status message including flags, innovation test ratios and estimated accuracies. The flags message is an integer bitmask containing information on which EKF outputs are valid. See the ESTIMATOR_STATUS_FLAGS enum definition for further information. The innovation test ratios show the magnitude of the sensor innovation divided by the innovation check threshold. Under normal operation the innovation test ratios should be below 0.5 with occasional values up to 1.0. Values greater than 1.0 should be rare under normal operation and indicate that a measurement has been rejected by the filter. The user should be notified if an innovation test ratio greater than 1.0 is recorded. Notifications for values in the range between 0.5 and 1.0 should be optional and controllable by the user.
    /// </summary>
    public class Msg_estimator_status : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Bitmap indicating which EKF outputs are valid.
        /// </summary>
        public UInt16 flags;

        /// <summary>
        /// Velocity innovation test ratio
        /// </summary>
        public float vel_ratio;

        /// <summary>
        /// Horizontal position innovation test ratio
        /// </summary>
        public float pos_horiz_ratio;

        /// <summary>
        /// Vertical position innovation test ratio
        /// </summary>
        public float pos_vert_ratio;

        /// <summary>
        /// Magnetometer innovation test ratio
        /// </summary>
        public float mag_ratio;

        /// <summary>
        /// Height above terrain innovation test ratio
        /// </summary>
        public float hagl_ratio;

        /// <summary>
        /// True airspeed innovation test ratio
        /// </summary>
        public float tas_ratio;

        /// <summary>
        /// Horizontal position 1-STD accuracy relative to the EKF local origin
        /// </summary>
        public float pos_horiz_accuracy;

        /// <summary>
        /// Vertical position 1-STD accuracy relative to the EKF local origin
        /// </summary>
        public float pos_vert_accuracy;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ESTIMATOR_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Wind covariance estimate from vehicle.
    /// </summary>
    public class Msg_wind_cov : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Wind in X (NED) direction
        /// </summary>
        public float wind_x;

        /// <summary>
        /// Wind in Y (NED) direction
        /// </summary>
        public float wind_y;

        /// <summary>
        /// Wind in Z (NED) direction
        /// </summary>
        public float wind_z;

        /// <summary>
        /// Variability of the wind in XY. RMS of a 1 Hz lowpassed wind estimate.
        /// </summary>
        public float var_horiz;

        /// <summary>
        /// Variability of the wind in Z. RMS of a 1 Hz lowpassed wind estimate.
        /// </summary>
        public float var_vert;

        /// <summary>
        /// Altitude (MSL) that this measurement was taken at
        /// </summary>
        public float wind_alt;

        /// <summary>
        /// Horizontal speed 1-STD accuracy
        /// </summary>
        public float horiz_accuracy;

        /// <summary>
        /// Vertical speed 1-STD accuracy
        /// </summary>
        public float vert_accuracy;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_WIND_COV(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// GPS sensor input message.  This is a raw sensor value sent by the GPS. This is NOT the global position estimate of the system.
    /// </summary>
    public class Msg_gps_input : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// ID of the GPS for multiple GPS inputs
        /// </summary>
        public byte gps_id;

        /// <summary>
        /// Bitmap indicating which GPS input flags fields to ignore.  All other fields must be provided.
        /// </summary>
        public UInt16 ignore_flags;

        /// <summary>
        /// GPS time (from start of GPS week)
        /// </summary>
        public UInt32 time_week_ms;

        /// <summary>
        /// GPS week number
        /// </summary>
        public UInt16 time_week;

        /// <summary>
        /// 0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK
        /// </summary>
        public byte fix_type;

        /// <summary>
        /// Latitude (WGS84)
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude (WGS84)
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// </summary>
        public float alt;

        /// <summary>
        /// GPS HDOP horizontal dilution of position
        /// </summary>
        public float hdop;

        /// <summary>
        /// GPS VDOP vertical dilution of position
        /// </summary>
        public float vdop;

        /// <summary>
        /// GPS velocity in north direction in earth-fixed NED frame
        /// </summary>
        public float vn;

        /// <summary>
        /// GPS velocity in east direction in earth-fixed NED frame
        /// </summary>
        public float ve;

        /// <summary>
        /// GPS velocity in down direction in earth-fixed NED frame
        /// </summary>
        public float vd;

        /// <summary>
        /// GPS speed accuracy
        /// </summary>
        public float speed_accuracy;

        /// <summary>
        /// GPS horizontal accuracy
        /// </summary>
        public float horiz_accuracy;

        /// <summary>
        /// GPS vertical accuracy
        /// </summary>
        public float vert_accuracy;

        /// <summary>
        /// Number of satellites visible.
        /// </summary>
        public byte satellites_visible;

        /// <summary>
        /// Yaw of vehicle relative to Earth's North, zero means not available, use 36000 for north
        /// </summary>
        public UInt16 yaw;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GPS_INPUT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// RTCM message for injecting into the onboard GPS (used for DGPS)
    /// </summary>
    public class Msg_gps_rtcm_data : MavlinkMessage
    {

        /// <summary>
        /// LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order.
        /// </summary>
        public byte flags;

        /// <summary>
        /// data length
        /// </summary>
        public byte len;

        /// <summary>
        /// RTCM message (may be fragmented)
        /// </summary>
        public byte[] data; // Array size 180

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GPS_RTCM_DATA(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Message appropriate for high latency connections like Iridium
    /// </summary>
    public class Msg_high_latency : MavlinkMessage
    {

        /// <summary>
        /// Bitmap of enabled system modes.
        /// </summary>
        public byte base_mode;

        /// <summary>
        /// A bitfield for use for autopilot-specific flags.
        /// </summary>
        public UInt32 custom_mode;

        /// <summary>
        /// The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
        /// </summary>
        public byte landed_state;
        public Int16 roll;
        public Int16 pitch;
        public UInt16 heading;

        /// <summary>
        /// throttle (percentage)
        /// </summary>
        public sbyte throttle;

        /// <summary>
        /// heading setpoint
        /// </summary>
        public Int16 heading_sp;
        public Int32 latitude;
        public Int32 longitude;

        /// <summary>
        /// Altitude above mean sea level
        /// </summary>
        public Int16 altitude_amsl;

        /// <summary>
        /// Altitude setpoint relative to the home position
        /// </summary>
        public Int16 altitude_sp;
        public byte airspeed;

        /// <summary>
        /// airspeed setpoint
        /// </summary>
        public byte airspeed_sp;
        public byte groundspeed;

        /// <summary>
        /// climb rate
        /// </summary>
        public sbyte climb_rate;

        /// <summary>
        /// Number of satellites visible. If unknown, set to 255
        /// </summary>
        public byte gps_nsat;

        /// <summary>
        /// GPS Fix type.
        /// </summary>
        public byte gps_fix_type;

        /// <summary>
        /// Remaining battery (percentage)
        /// </summary>
        public byte battery_remaining;

        /// <summary>
        /// Autopilot temperature (degrees C)
        /// </summary>
        public sbyte temperature;

        /// <summary>
        /// Air temperature (degrees C) from airspeed sensor
        /// </summary>
        public sbyte temperature_air;

        /// <summary>
        /// failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence)
        /// </summary>
        public byte failsafe;

        /// <summary>
        /// current waypoint number
        /// </summary>
        public byte wp_num;

        /// <summary>
        /// distance to target
        /// </summary>
        public UInt16 wp_distance;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_HIGH_LATENCY(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Message appropriate for high latency connections like Iridium (version 2)
    /// </summary>
    public class Msg_high_latency2 : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (milliseconds since boot or Unix epoch)
        /// </summary>
        public UInt32 timestamp;

        /// <summary>
        /// Type of the MAV (quadrotor, helicopter, etc.)
        /// </summary>
        public byte type;

        /// <summary>
        /// Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.
        /// </summary>
        public byte autopilot;

        /// <summary>
        /// A bitfield for use for autopilot-specific flags (2 byte version).
        /// </summary>
        public UInt16 custom_mode;
        public Int32 latitude;
        public Int32 longitude;

        /// <summary>
        /// Altitude above mean sea level
        /// </summary>
        public Int16 altitude;

        /// <summary>
        /// Altitude setpoint
        /// </summary>
        public Int16 target_altitude;
        public byte heading;

        /// <summary>
        /// Heading setpoint
        /// </summary>
        public byte target_heading;

        /// <summary>
        /// Distance to target waypoint or position
        /// </summary>
        public UInt16 target_distance;
        public byte throttle;
        public byte airspeed;

        /// <summary>
        /// Airspeed setpoint
        /// </summary>
        public byte airspeed_sp;
        public byte groundspeed;
        public byte windspeed;

        /// <summary>
        /// Wind heading
        /// </summary>
        public byte wind_heading;

        /// <summary>
        /// Maximum error horizontal position since last message
        /// </summary>
        public byte eph;

        /// <summary>
        /// Maximum error vertical position since last message
        /// </summary>
        public byte epv;

        /// <summary>
        /// Air temperature from airspeed sensor
        /// </summary>
        public sbyte temperature_air;

        /// <summary>
        /// Maximum climb rate magnitude since last message
        /// </summary>
        public sbyte climb_rate;

        /// <summary>
        /// Battery level (-1 if field not provided).
        /// </summary>
        public sbyte battery;

        /// <summary>
        /// Current waypoint number
        /// </summary>
        public UInt16 wp_num;

        /// <summary>
        /// Bitmap of failure flags.
        /// </summary>
        public UInt16 failure_flags;

        /// <summary>
        /// Field for custom payload.
        /// </summary>
        public sbyte custom0;

        /// <summary>
        /// Field for custom payload.
        /// </summary>
        public sbyte custom1;

        /// <summary>
        /// Field for custom payload.
        /// </summary>
        public sbyte custom2;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_HIGH_LATENCY2(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Vibration levels and accelerometer clipping
    /// </summary>
    public class Msg_vibration : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Vibration levels on X-axis
        /// </summary>
        public float vibration_x;

        /// <summary>
        /// Vibration levels on Y-axis
        /// </summary>
        public float vibration_y;

        /// <summary>
        /// Vibration levels on Z-axis
        /// </summary>
        public float vibration_z;

        /// <summary>
        /// first accelerometer clipping count
        /// </summary>
        public UInt32 clipping_0;

        /// <summary>
        /// second accelerometer clipping count
        /// </summary>
        public UInt32 clipping_1;

        /// <summary>
        /// third accelerometer clipping count
        /// </summary>
        public UInt32 clipping_2;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_VIBRATION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// This message can be requested by sending the MAV_CMD_GET_HOME_POSITION command. The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitly set by the operator before or after. The position the system will return to and land on. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
    /// </summary>
    public class Msg_home_position : MavlinkMessage
    {

        /// <summary>
        /// Latitude (WGS84)
        /// </summary>
        public Int32 latitude;

        /// <summary>
        /// Longitude (WGS84)
        /// </summary>
        public Int32 longitude;

        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// </summary>
        public Int32 altitude;

        /// <summary>
        /// Local X position of this position in the local coordinate frame
        /// </summary>
        public float x;

        /// <summary>
        /// Local Y position of this position in the local coordinate frame
        /// </summary>
        public float y;

        /// <summary>
        /// Local Z position of this position in the local coordinate frame
        /// </summary>
        public float z;

        /// <summary>
        /// World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// </summary>
        public float approach_x;

        /// <summary>
        /// Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// </summary>
        public float approach_y;

        /// <summary>
        /// Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// </summary>
        public float approach_z;

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_HOME_POSITION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitly set by the operator before or after. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.
    /// </summary>
    public class Msg_set_home_position : MavlinkMessage
    {

        /// <summary>
        /// System ID.
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Latitude (WGS84)
        /// </summary>
        public Int32 latitude;

        /// <summary>
        /// Longitude (WGS84)
        /// </summary>
        public Int32 longitude;

        /// <summary>
        /// Altitude (MSL). Positive for up.
        /// </summary>
        public Int32 altitude;

        /// <summary>
        /// Local X position of this position in the local coordinate frame
        /// </summary>
        public float x;

        /// <summary>
        /// Local Y position of this position in the local coordinate frame
        /// </summary>
        public float y;

        /// <summary>
        /// Local Z position of this position in the local coordinate frame
        /// </summary>
        public float z;

        /// <summary>
        /// World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// </summary>
        public float approach_x;

        /// <summary>
        /// Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// </summary>
        public float approach_y;

        /// <summary>
        /// Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.
        /// </summary>
        public float approach_z;

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SET_HOME_POSITION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The interval between messages for a particular MAVLink message ID. This message is the response to the MAV_CMD_GET_MESSAGE_INTERVAL command. This interface replaces DATA_STREAM.
    /// </summary>
    public class Msg_message_interval : MavlinkMessage
    {

        /// <summary>
        /// The ID of the requested MAVLink message. v1.0 is limited to 254 messages.
        /// </summary>
        public UInt16 message_id;

        /// <summary>
        /// The interval between two messages. A value of -1 indicates this stream is disabled, 0 indicates it is not available, > 0 indicates the interval at which it is sent.
        /// </summary>
        public Int32 interval_us;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MESSAGE_INTERVAL(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Provides state for additional features
    /// </summary>
    public class Msg_extended_sys_state : MavlinkMessage
    {

        /// <summary>
        /// The VTOL state if applicable. Is set to MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL configuration.
        /// </summary>
        public byte vtol_state;

        /// <summary>
        /// The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.
        /// </summary>
        public byte landed_state;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_EXTENDED_SYS_STATE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The location and information of an ADSB vehicle
    /// </summary>
    public class Msg_adsb_vehicle : MavlinkMessage
    {

        /// <summary>
        /// ICAO address
        /// </summary>
        public UInt32 ICAO_address;

        /// <summary>
        /// Latitude
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// ADSB altitude type.
        /// </summary>
        public byte altitude_type;

        /// <summary>
        /// Altitude(ASL)
        /// </summary>
        public Int32 altitude;

        /// <summary>
        /// Course over ground
        /// </summary>
        public UInt16 heading;

        /// <summary>
        /// The horizontal velocity
        /// </summary>
        public UInt16 hor_velocity;

        /// <summary>
        /// The vertical velocity. Positive is up
        /// </summary>
        public Int16 ver_velocity;

        /// <summary>
        /// The callsign, 8+null
        /// </summary>
        public byte[] callsign; // Array size 9

        /// <summary>
        /// ADSB emitter type.
        /// </summary>
        public byte emitter_type;

        /// <summary>
        /// Time since last communication in seconds
        /// </summary>
        public byte tslc;

        /// <summary>
        /// Bitmap to indicate various statuses including valid data fields
        /// </summary>
        public UInt16 flags;

        /// <summary>
        /// Squawk code
        /// </summary>
        public UInt16 squawk;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ADSB_VEHICLE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Information about a potential collision
    /// </summary>
    public class Msg_collision : MavlinkMessage
    {

        /// <summary>
        /// Collision data source
        /// </summary>
        public byte src;

        /// <summary>
        /// Unique identifier, domain based on src field
        /// </summary>
        public UInt32 id;

        /// <summary>
        /// Action that is being taken to avoid this collision
        /// </summary>
        public byte action;

        /// <summary>
        /// How concerned the aircraft is about this collision
        /// </summary>
        public byte threat_level;

        /// <summary>
        /// Estimated time until collision occurs
        /// </summary>
        public float time_to_minimum_delta;

        /// <summary>
        /// Closest vertical distance between vehicle and object
        /// </summary>
        public float altitude_minimum_delta;

        /// <summary>
        /// Closest horizontal distance between vehicle and object
        /// </summary>
        public float horizontal_minimum_delta;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_COLLISION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Message implementing parts of the V2 payload specs in V1 frames for transitional support.
    /// </summary>
    public class Msg_v2_extension : MavlinkMessage
    {

        /// <summary>
        /// Network ID (0 for broadcast)
        /// </summary>
        public byte target_network;

        /// <summary>
        /// System ID (0 for broadcast)
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID (0 for broadcast)
        /// </summary>
        public byte target_component;

        /// <summary>
        /// A code that identifies the software component that understands this message (analogous to USB device classes or mime type strings). If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/definition_files/extension_message_ids.xml. Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.
        /// </summary>
        public UInt16 message_type;

        /// <summary>
        /// Variable length payload. The length must be encoded in the payload as part of the message_type protocol, e.g. by including the length as payload data, or by terminating the payload data with a non-zero marker. This is required in order to reconstruct zero-terminated payloads that are (or otherwise would be) trimmed by MAVLink 2 empty-byte truncation. The entire content of the payload block is opaque unless you understand the encoding message_type. The particular encoding used can be extension specific and might not always be documented as part of the MAVLink specification.
        /// </summary>
        public byte[] payload; // Array size 249

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_V2_EXTENSION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Send raw controller memory. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
    /// </summary>
    public class Msg_memory_vect : MavlinkMessage
    {

        /// <summary>
        /// Starting address of the debug variables
        /// </summary>
        public UInt16 address;

        /// <summary>
        /// Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below
        /// </summary>
        public byte ver;

        /// <summary>
        /// Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14
        /// </summary>
        public byte type;

        /// <summary>
        /// Memory contents at specified address
        /// </summary>
        public sbyte[] value; // Array size 32

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MEMORY_VECT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// To debug something using a named 3D vector.
    /// </summary>
    public class Msg_debug_vect : MavlinkMessage
    {
        public byte[] name; // Array size 10

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;
        public float x;
        public float y;
        public float z;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_DEBUG_VECT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Send a key-value pair as float. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
    /// </summary>
    public class Msg_named_value_float : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Name of the debug variable
        /// </summary>
        public byte[] name; // Array size 10

        /// <summary>
        /// Floating point value
        /// </summary>
        public float value;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_NAMED_VALUE_FLOAT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Send a key-value pair as integer. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.
    /// </summary>
    public class Msg_named_value_int : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Name of the debug variable
        /// </summary>
        public byte[] name; // Array size 10

        /// <summary>
        /// Signed integer value
        /// </summary>
        public Int32 value;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_NAMED_VALUE_INT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Status text message. These messages are printed in yellow in the COMM console of QGroundControl. WARNING: They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz).
    /// </summary>
    public class Msg_statustext : MavlinkMessage
    {

        /// <summary>
        /// Severity of status. Relies on the definitions within RFC-5424.
        /// </summary>
        public byte severity;

        /// <summary>
        /// Status text message, without null termination character
        /// </summary>
        public byte[] text; // Array size 50

        /// <summary>
        /// Unique (opaque) identifier for this statustext message.  May be used to reassemble a logical long-statustext message from a sequence of chunks.  A value of zero indicates this is the only chunk in the sequence and the message can be emitted immediately.
        /// </summary>
        public UInt16 id;

        /// <summary>
        /// This chunk's sequence number; indexing is from zero.  Any null character in the text field is taken to mean this was the last chunk.
        /// </summary>
        public byte chunk_seq;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_STATUSTEXT(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Send a debug value. The index is used to discriminate between values. These values show up in the plot of QGroundControl as DEBUG N.
    /// </summary>
    public class Msg_debug : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// index of debug variable
        /// </summary>
        public byte ind;

        /// <summary>
        /// DEBUG value
        /// </summary>
        public float value;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_DEBUG(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Setup a MAVLink2 signing key. If called with secret_key of all zero and zero initial_timestamp will disable signing
    /// </summary>
    public class Msg_setup_signing : MavlinkMessage
    {

        /// <summary>
        /// system id of the target
        /// </summary>
        public byte target_system;

        /// <summary>
        /// component ID of the target
        /// </summary>
        public byte target_component;

        /// <summary>
        /// signing key
        /// </summary>
        public byte[] secret_key; // Array size 32

        /// <summary>
        /// initial timestamp
        /// </summary>
        public UInt64 initial_timestamp;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SETUP_SIGNING(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Report button state change.
    /// </summary>
    public class Msg_button_change : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Time of last change of button state.
        /// </summary>
        public UInt32 last_change_ms;

        /// <summary>
        /// Bitmap for state of buttons.
        /// </summary>
        public byte state;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_BUTTON_CHANGE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Control vehicle tone generation (buzzer).
    /// </summary>
    public class Msg_play_tune : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// tune in board specific format
        /// </summary>
        public byte[] tune; // Array size 30

        /// <summary>
        /// tune extension (appended to tune)
        /// </summary>
        public byte[] tune2; // Array size 200

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PLAY_TUNE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Information about a camera
    /// </summary>
    public class Msg_camera_information : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Name of the camera vendor
        /// </summary>
        public byte[] vendor_name; // Array size 32

        /// <summary>
        /// Name of the camera model
        /// </summary>
        public byte[] model_name; // Array size 32

        /// <summary>
        /// Version of the camera firmware (v << 24 & 0xff = Dev, v << 16 & 0xff = Patch, v << 8 & 0xff = Minor, v & 0xff = Major)
        /// </summary>
        public UInt32 firmware_version;

        /// <summary>
        /// Focal length
        /// </summary>
        public float focal_length;

        /// <summary>
        /// Image sensor size horizontal
        /// </summary>
        public float sensor_size_h;

        /// <summary>
        /// Image sensor size vertical
        /// </summary>
        public float sensor_size_v;

        /// <summary>
        /// Horizontal image resolution
        /// </summary>
        public UInt16 resolution_h;

        /// <summary>
        /// Vertical image resolution
        /// </summary>
        public UInt16 resolution_v;

        /// <summary>
        /// Reserved for a lens ID
        /// </summary>
        public byte lens_id;

        /// <summary>
        /// Bitmap of camera capability flags.
        /// </summary>
        public UInt32 flags;

        /// <summary>
        /// Camera definition version (iteration)
        /// </summary>
        public UInt16 cam_definition_version;

        /// <summary>
        /// Camera definition URI (if any, otherwise only basic functions will be available). HTTP- (http://) and MAVLink FTP- (mavlinkftp://) formatted URIs are allowed (and both must be supported by any GCS that implements the Camera Protocol).
        /// </summary>
        public byte[] cam_definition_uri; // Array size 140

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_CAMERA_INFORMATION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Settings of a camera, can be requested using MAV_CMD_REQUEST_CAMERA_SETTINGS.
    /// </summary>
    public class Msg_camera_settings : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Camera mode
        /// </summary>
        public byte mode_id;

        /// <summary>
        /// Current zoom level (0.0 to 100.0, NaN if not known)
        /// </summary>
        public float zoomLevel;

        /// <summary>
        /// Current focus level (0.0 to 100.0, NaN if not known)
        /// </summary>
        public float focusLevel;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_CAMERA_SETTINGS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Information about a storage medium. This message is sent in response to a request and whenever the status of the storage changes (STORAGE_STATUS).
    /// </summary>
    public class Msg_storage_information : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Storage ID (1 for first, 2 for second, etc.)
        /// </summary>
        public byte storage_id;

        /// <summary>
        /// Number of storage devices
        /// </summary>
        public byte storage_count;

        /// <summary>
        /// Status of storage
        /// </summary>
        public byte status;

        /// <summary>
        /// Total capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
        /// </summary>
        public float total_capacity;

        /// <summary>
        /// Used capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
        /// </summary>
        public float used_capacity;

        /// <summary>
        /// Available storage capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
        /// </summary>
        public float available_capacity;

        /// <summary>
        /// Read speed.
        /// </summary>
        public float read_speed;

        /// <summary>
        /// Write speed.
        /// </summary>
        public float write_speed;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_STORAGE_INFORMATION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Information about the status of a capture.
    /// </summary>
    public class Msg_camera_capture_status : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Current status of image capturing (0: idle, 1: capture in progress, 2: interval set but idle, 3: interval set and capture in progress)
        /// </summary>
        public byte image_status;

        /// <summary>
        /// Current status of video capturing (0: idle, 1: capture in progress)
        /// </summary>
        public byte video_status;

        /// <summary>
        /// Image capture interval
        /// </summary>
        public float image_interval;

        /// <summary>
        /// Time since recording started
        /// </summary>
        public UInt32 recording_time_ms;

        /// <summary>
        /// Available storage capacity.
        /// </summary>
        public float available_capacity;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_CAMERA_CAPTURE_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Information about a captured image
    /// </summary>
    public class Msg_camera_image_captured : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Timestamp (time since UNIX epoch) in UTC. 0 for unknown.
        /// </summary>
        public UInt64 time_utc;

        /// <summary>
        /// Camera ID (1 for first, 2 for second, etc.)
        /// </summary>
        public byte camera_id;

        /// <summary>
        /// Latitude where image was taken
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude where capture was taken
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Altitude (MSL) where image was taken
        /// </summary>
        public Int32 alt;

        /// <summary>
        /// Altitude above ground
        /// </summary>
        public Int32 relative_alt;

        /// <summary>
        /// Quaternion of camera orientation (w, x, y, z order, zero-rotation is 0, 0, 0, 0)
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// Zero based index of this image (image count since armed -1)
        /// </summary>
        public Int32 image_index;

        /// <summary>
        /// Boolean indicating success (1) or failure (0) while capturing this image.
        /// </summary>
        public sbyte capture_result;

        /// <summary>
        /// URL of image taken. Either local storage or http://foo.jpg if camera provides an HTTP interface.
        /// </summary>
        public byte[] file_url; // Array size 205

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_CAMERA_IMAGE_CAPTURED(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Information about flight since last arming.
    /// </summary>
    public class Msg_flight_information : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Timestamp at arming (time since UNIX epoch) in UTC, 0 for unknown
        /// </summary>
        public UInt64 arming_time_utc;

        /// <summary>
        /// Timestamp at takeoff (time since UNIX epoch) in UTC, 0 for unknown
        /// </summary>
        public UInt64 takeoff_time_utc;

        /// <summary>
        /// Universally unique identifier (UUID) of flight, should correspond to name of log files
        /// </summary>
        public UInt64 flight_uuid;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_FLIGHT_INFORMATION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Orientation of a mount
    /// </summary>
    public class Msg_mount_orientation : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Roll in global frame (set to NaN for invalid).
        /// </summary>
        public float roll;

        /// <summary>
        /// Pitch in global frame (set to NaN for invalid).
        /// </summary>
        public float pitch;

        /// <summary>
        /// Yaw relative to vehicle (set to NaN for invalid).
        /// </summary>
        public float yaw;

        /// <summary>
        /// Yaw in absolute frame relative to Earth's North, north is 0 (set to NaN for invalid).
        /// </summary>
        public float yaw_absolute;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_MOUNT_ORIENTATION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// A message containing logged data (see also MAV_CMD_LOGGING_START)
    /// </summary>
    public class Msg_logging_data : MavlinkMessage
    {

        /// <summary>
        /// system ID of the target
        /// </summary>
        public byte target_system;

        /// <summary>
        /// component ID of the target
        /// </summary>
        public byte target_component;

        /// <summary>
        /// sequence number (can wrap)
        /// </summary>
        public UInt16 sequence;

        /// <summary>
        /// data length
        /// </summary>
        public byte length;

        /// <summary>
        /// offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to 255 if no start exists).
        /// </summary>
        public byte first_message_offset;

        /// <summary>
        /// logged data
        /// </summary>
        public byte[] data; // Array size 249

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LOGGING_DATA(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// A message containing logged data which requires a LOGGING_ACK to be sent back
    /// </summary>
    public class Msg_logging_data_acked : MavlinkMessage
    {

        /// <summary>
        /// system ID of the target
        /// </summary>
        public byte target_system;

        /// <summary>
        /// component ID of the target
        /// </summary>
        public byte target_component;

        /// <summary>
        /// sequence number (can wrap)
        /// </summary>
        public UInt16 sequence;

        /// <summary>
        /// data length
        /// </summary>
        public byte length;

        /// <summary>
        /// offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to 255 if no start exists).
        /// </summary>
        public byte first_message_offset;

        /// <summary>
        /// logged data
        /// </summary>
        public byte[] data; // Array size 249

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LOGGING_DATA_ACKED(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// An ack for a LOGGING_DATA_ACKED message
    /// </summary>
    public class Msg_logging_ack : MavlinkMessage
    {

        /// <summary>
        /// system ID of the target
        /// </summary>
        public byte target_system;

        /// <summary>
        /// component ID of the target
        /// </summary>
        public byte target_component;

        /// <summary>
        /// sequence number (must match the one in LOGGING_DATA_ACKED)
        /// </summary>
        public UInt16 sequence;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_LOGGING_ACK(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Information about video stream
    /// </summary>
    public class Msg_video_stream_information : MavlinkMessage
    {

        /// <summary>
        /// Video Stream ID (1 for first, 2 for second, etc.)
        /// </summary>
        public byte stream_id;

        /// <summary>
        /// Number of streams available.
        /// </summary>
        public byte count;

        /// <summary>
        /// Type of stream.
        /// </summary>
        public byte type;

        /// <summary>
        /// Bitmap of stream status flags.
        /// </summary>
        public UInt16 flags;

        /// <summary>
        /// Frame rate.
        /// </summary>
        public float framerate;

        /// <summary>
        /// Horizontal resolution.
        /// </summary>
        public UInt16 resolution_h;

        /// <summary>
        /// Vertical resolution.
        /// </summary>
        public UInt16 resolution_v;

        /// <summary>
        /// Bit rate.
        /// </summary>
        public UInt32 bitrate;

        /// <summary>
        /// Video image rotation clockwise.
        /// </summary>
        public UInt16 rotation;

        /// <summary>
        /// Horizontal Field of view.
        /// </summary>
        public UInt16 hfov;

        /// <summary>
        /// Stream name.
        /// </summary>
        public byte[] name; // Array size 32

        /// <summary>
        /// Video stream URI (TCP or RTSP URI ground station should connect to) or port number (UDP port ground station should listen to).
        /// </summary>
        public byte[] uri; // Array size 160

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_VIDEO_STREAM_INFORMATION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Information about the status of a video stream.
    /// </summary>
    public class Msg_video_stream_status : MavlinkMessage
    {

        /// <summary>
        /// Video Stream ID (1 for first, 2 for second, etc.)
        /// </summary>
        public byte stream_id;

        /// <summary>
        /// Bitmap of stream status flags
        /// </summary>
        public UInt16 flags;

        /// <summary>
        /// Frame rate
        /// </summary>
        public float framerate;

        /// <summary>
        /// Horizontal resolution
        /// </summary>
        public UInt16 resolution_h;

        /// <summary>
        /// Vertical resolution
        /// </summary>
        public UInt16 resolution_v;

        /// <summary>
        /// Bit rate
        /// </summary>
        public UInt32 bitrate;

        /// <summary>
        /// Video image rotation clockwise
        /// </summary>
        public UInt16 rotation;

        /// <summary>
        /// Horizontal Field of view
        /// </summary>
        public UInt16 hfov;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_VIDEO_STREAM_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Information about a high level gimbal manager. This message should be requested by a ground station using MAV_CMD_REQUEST_MESSAGE.
    /// </summary>
    public class Msg_gimbal_manager_information : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Bitmap of gimbal capability flags.
        /// </summary>
        public UInt32 cap_flags;

        /// <summary>
        /// Gimbal component ID that this gimbal manager is responsible for.
        /// </summary>
        public byte gimbal_component;

        /// <summary>
        /// Maximum tilt/pitch angle (positive: up, negative: down)
        /// </summary>
        public float tilt_max;

        /// <summary>
        /// Minimum tilt/pitch angle (positive: up, negative: down)
        /// </summary>
        public float tilt_min;

        /// <summary>
        /// Maximum tilt/pitch angular rate (positive: up, negative: down)
        /// </summary>
        public float tilt_rate_max;

        /// <summary>
        /// Maximum pan/yaw angle (positive: to the right, negative: to the left)
        /// </summary>
        public float pan_max;

        /// <summary>
        /// Minimum pan/yaw angle (positive: to the right, negative: to the left)
        /// </summary>
        public float pan_min;

        /// <summary>
        /// Minimum pan/yaw angular rate (positive: to the right, negative: to the left)
        /// </summary>
        public float pan_rate_max;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GIMBAL_MANAGER_INFORMATION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Current status about a high level gimbal manager. This message should be broadcast at a low regular rate (e.g. 5Hz).
    /// </summary>
    public class Msg_gimbal_manager_status : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// High level gimbal manager flags currently applied.
        /// </summary>
        public UInt32 flags;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GIMBAL_MANAGER_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// High level message to control a gimbal's attitude. This message is to be sent to the gimbal manager (e.g. from a ground station). Angles and rates can be set to NaN according to use case.
    /// </summary>
    public class Msg_gimbal_manager_set_attitude : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// High level gimbal manager flags to use.
        /// </summary>
        public UInt32 flags;

        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation, the frame is depends on whether the flag GIMBAL_MANAGER_FLAGS_YAW_LOCK is set)
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// X component of angular velocity, positive is banking to the right, NaN to be ignored.
        /// </summary>
        public float angular_velocity_x;

        /// <summary>
        /// Y component of angular velocity, positive is tilting up, NaN to be ignored.
        /// </summary>
        public float angular_velocity_y;

        /// <summary>
        /// Z component of angular velocity, positive is panning to the right, NaN to be ignored.
        /// </summary>
        public float angular_velocity_z;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GIMBAL_MANAGER_SET_ATTITUDE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Information about a low level gimbal. This message should be requested by the gimbal manager or a ground station using MAV_CMD_REQUEST_MESSAGE.
    /// </summary>
    public class Msg_gimbal_device_information : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Name of the gimbal vendor
        /// </summary>
        public byte[] vendor_name; // Array size 32

        /// <summary>
        /// Name of the gimbal model
        /// </summary>
        public byte[] model_name; // Array size 32

        /// <summary>
        /// Version of the gimbal firmware (v << 24 & 0xff = Dev, v << 16 & 0xff = Patch, v << 8 & 0xff = Minor, v & 0xff = Major)
        /// </summary>
        public UInt32 firmware_version;

        /// <summary>
        /// Bitmap of gimbal capability flags.
        /// </summary>
        public UInt16 cap_flags;

        /// <summary>
        /// Maximum tilt/pitch angle (positive: up, negative: down)
        /// </summary>
        public float tilt_max;

        /// <summary>
        /// Minimum tilt/pitch angle (positive: up, negative: down)
        /// </summary>
        public float tilt_min;

        /// <summary>
        /// Maximum tilt/pitch angular rate (positive: up, negative: down)
        /// </summary>
        public float tilt_rate_max;

        /// <summary>
        /// Maximum pan/yaw angle (positive: to the right, negative: to the left)
        /// </summary>
        public float pan_max;

        /// <summary>
        /// Minimum pan/yaw angle (positive: to the right, negative: to the left)
        /// </summary>
        public float pan_min;

        /// <summary>
        /// Minimum pan/yaw angular rate (positive: to the right, negative: to the left)
        /// </summary>
        public float pan_rate_max;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GIMBAL_DEVICE_INFORMATION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Low level message to control a gimbal device's attitude. This message is to be sent from the gimbal manager to the gimbal device component. Angles and rates can be set to NaN according to use case.
    /// </summary>
    public class Msg_gimbal_device_set_attitude : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Low level gimbal flags.
        /// </summary>
        public UInt16 flags;

        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation, the frame is depends on whether the flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set, set all fields to NaN if only angular velocity should be used)
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// X component of angular velocity, positive is banking to the right, NaN to be ignored.
        /// </summary>
        public float angular_velocity_x;

        /// <summary>
        /// Y component of angular velocity, positive is tilting up, NaN to be ignored.
        /// </summary>
        public float angular_velocity_y;

        /// <summary>
        /// Z component of angular velocity, positive is panning to the right, NaN to be ignored.
        /// </summary>
        public float angular_velocity_z;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GIMBAL_DEVICE_SET_ATTITUDE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Message reporting the status of a gimbal device. This message should be broadcasted by a gimbal device component. The angles encoded in the quaternion are in the global frame (roll: positive is tilt to the right, pitch: positive is tilting up, yaw is turn to the right). This message should be broadcast at a low regular rate (e.g. 10Hz).
    /// </summary>
    public class Msg_gimbal_device_attitude_status : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Current gimbal flags set.
        /// </summary>
        public UInt16 flags;

        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation, the frame is depends on whether the flag GIMBAL_DEVICE_FLAGS_YAW_LOCK is set)
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// X component of angular velocity (NaN if unknown)
        /// </summary>
        public float angular_velocity_x;

        /// <summary>
        /// Y component of angular velocity (NaN if unknown)
        /// </summary>
        public float angular_velocity_y;

        /// <summary>
        /// Z component of angular velocity (NaN if unknown)
        /// </summary>
        public float angular_velocity_z;

        /// <summary>
        /// Failure flags (0 for no failure)
        /// </summary>
        public UInt32 failure_flags;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_GIMBAL_DEVICE_ATTITUDE_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Low level message containing autopilot state relevant for a gimbal device. This message is to be sent from the gimbal manager to the gimbal device component. The data of this message server for the gimbal's estimator corrections in particular horizon compensation, as well as the autopilot's control intention e.g. feed forward angular control in z-axis.
    /// </summary>
    public class Msg_autopilot_state_for_gimbal_device : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt64 time_boot_us;

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Quaternion components of autopilot attitude: w, x, y, z (1 0 0 0 is the null-rotation, Hamiltonian convention).
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// Estimated delay of the attitude data.
        /// </summary>
        public UInt32 q_estimated_delay_us;

        /// <summary>
        /// X Speed in NED (North, East, Down).
        /// </summary>
        public float vx;

        /// <summary>
        /// Y Speed in NED (North, East, Down).
        /// </summary>
        public float vy;

        /// <summary>
        /// Z Speed in NED (North, East, Down).
        /// </summary>
        public float vz;

        /// <summary>
        /// Estimated delay of the speed data.
        /// </summary>
        public UInt32 v_estimated_delay_us;

        /// <summary>
        /// Feed forward Z component of angular velocity, positive is yawing to the right, NaN to be ignored. This is to indicate if the autopilot is actively yawing.
        /// </summary>
        public float feed_forward_angular_velocity_z;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_AUTOPILOT_STATE_FOR_GIMBAL_DEVICE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Configure AP SSID and Password.
    /// </summary>
    public class Msg_wifi_config_ap : MavlinkMessage
    {

        /// <summary>
        /// Name of Wi-Fi network (SSID). Leave it blank to leave it unchanged.
        /// </summary>
        public byte[] ssid; // Array size 32

        /// <summary>
        /// Password. Leave it blank for an open AP.
        /// </summary>
        public byte[] password; // Array size 64

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_WIFI_CONFIG_AP(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Version and capability of protocol version. This message is the response to REQUEST_PROTOCOL_VERSION and is used as part of the handshaking to establish which MAVLink version should be used on the network. Every node should respond to REQUEST_PROTOCOL_VERSION to enable the handshaking. Library implementers should consider adding this into the default decoding state machine to allow the protocol core to respond directly.
    /// </summary>
    public class Msg_protocol_version : MavlinkMessage
    {

        /// <summary>
        /// Currently active MAVLink version number * 100: v1.0 is 100, v2.0 is 200, etc.
        /// </summary>
        public UInt16 version;

        /// <summary>
        /// Minimum MAVLink version supported
        /// </summary>
        public UInt16 min_version;

        /// <summary>
        /// Maximum MAVLink version supported (set to the same value as version by default)
        /// </summary>
        public UInt16 max_version;

        /// <summary>
        /// The first 8 bytes (not characters printed in hex!) of the git hash.
        /// </summary>
        public byte[] spec_version_hash; // Array size 8

        /// <summary>
        /// The first 8 bytes (not characters printed in hex!) of the git hash.
        /// </summary>
        public byte[] library_version_hash; // Array size 8

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PROTOCOL_VERSION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The location and information of an AIS vessel
    /// </summary>
    public class Msg_ais_vessel : MavlinkMessage
    {

        /// <summary>
        /// Mobile Marine Service Identifier, 9 decimal digits
        /// </summary>
        public UInt32 MMSI;

        /// <summary>
        /// Latitude
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Course over ground
        /// </summary>
        public UInt16 COG;

        /// <summary>
        /// True heading
        /// </summary>
        public UInt16 heading;

        /// <summary>
        /// Speed over ground
        /// </summary>
        public UInt16 velocity;

        /// <summary>
        /// Turn rate
        /// </summary>
        public sbyte turn_rate;

        /// <summary>
        /// Navigational status
        /// </summary>
        public byte navigational_status;

        /// <summary>
        /// Type of vessels
        /// </summary>
        public byte type;

        /// <summary>
        /// Distance from lat/lon location to bow
        /// </summary>
        public UInt16 dimension_bow;

        /// <summary>
        /// Distance from lat/lon location to stern
        /// </summary>
        public UInt16 dimension_stern;

        /// <summary>
        /// Distance from lat/lon location to port side
        /// </summary>
        public byte dimension_port;

        /// <summary>
        /// Distance from lat/lon location to starboard side
        /// </summary>
        public byte dimension_starboard;

        /// <summary>
        /// The vessel callsign
        /// </summary>
        public byte[] callsign; // Array size 7

        /// <summary>
        /// The vessel name
        /// </summary>
        public byte[] name; // Array size 20

        /// <summary>
        /// Time since last communication in seconds
        /// </summary>
        public UInt16 tslc;

        /// <summary>
        /// Bitmask to indicate various statuses including valid data fields
        /// </summary>
        public UInt16 flags;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_AIS_VESSEL(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// General status information of an UAVCAN node. Please refer to the definition of the UAVCAN message "uavcan.protocol.NodeStatus" for the background information. The UAVCAN specification is available at http://uavcan.org.
    /// </summary>
    public class Msg_uavcan_node_status : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Time since the start-up of the node.
        /// </summary>
        public UInt32 uptime_sec;

        /// <summary>
        /// Generalized node health status.
        /// </summary>
        public byte health;

        /// <summary>
        /// Generalized operating mode.
        /// </summary>
        public byte mode;

        /// <summary>
        /// Not used currently.
        /// </summary>
        public byte sub_mode;

        /// <summary>
        /// Vendor-specific status information.
        /// </summary>
        public UInt16 vendor_specific_status_code;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_UAVCAN_NODE_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// General information describing a particular UAVCAN node. Please refer to the definition of the UAVCAN service "uavcan.protocol.GetNodeInfo" for the background information. This message should be emitted by the system whenever a new node appears online, or an existing node reboots. Additionally, it can be emitted upon request from the other end of the MAVLink channel (see MAV_CMD_UAVCAN_GET_NODE_INFO). It is also not prohibited to emit this message unconditionally at a low frequency. The UAVCAN specification is available at http://uavcan.org.
    /// </summary>
    public class Msg_uavcan_node_info : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Time since the start-up of the node.
        /// </summary>
        public UInt32 uptime_sec;

        /// <summary>
        /// Node name string. For example, "sapog.px4.io".
        /// </summary>
        public byte[] name; // Array size 80

        /// <summary>
        /// Hardware major version number.
        /// </summary>
        public byte hw_version_major;

        /// <summary>
        /// Hardware minor version number.
        /// </summary>
        public byte hw_version_minor;

        /// <summary>
        /// Hardware unique 128-bit ID.
        /// </summary>
        public byte[] hw_unique_id; // Array size 16

        /// <summary>
        /// Software major version number.
        /// </summary>
        public byte sw_version_major;

        /// <summary>
        /// Software minor version number.
        /// </summary>
        public byte sw_version_minor;

        /// <summary>
        /// Version control system (VCS) revision identifier (e.g. git short commit hash). Zero if unknown.
        /// </summary>
        public UInt32 sw_vcs_commit;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_UAVCAN_NODE_INFO(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request to read the value of a parameter with the either the param_id string id or param_index.
    /// </summary>
    public class Msg_param_ext_request_read : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// </summary>
        public byte[] param_id; // Array size 16

        /// <summary>
        /// Parameter index. Set to -1 to use the Parameter ID field as identifier (else param_id will be ignored)
        /// </summary>
        public Int16 param_index;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PARAM_EXT_REQUEST_READ(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Request all parameters of this component. After this request, all parameters are emitted.
    /// </summary>
    public class Msg_param_ext_request_list : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PARAM_EXT_REQUEST_LIST(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Emit the value of a parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows them to re-request missing parameters after a loss or timeout.
    /// </summary>
    public class Msg_param_ext_value : MavlinkMessage
    {

        /// <summary>
        /// Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// </summary>
        public byte[] param_id; // Array size 16

        /// <summary>
        /// Parameter value
        /// </summary>
        public byte[] param_value; // Array size 128

        /// <summary>
        /// Parameter type.
        /// </summary>
        public byte param_type;

        /// <summary>
        /// Total number of parameters
        /// </summary>
        public UInt16 param_count;

        /// <summary>
        /// Index of this parameter
        /// </summary>
        public UInt16 param_index;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PARAM_EXT_VALUE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Set a parameter value. In order to deal with message loss (and retransmission of PARAM_EXT_SET), when setting a parameter value and the new value is the same as the current value, you will immediately get a PARAM_ACK_ACCEPTED response. If the current state is PARAM_ACK_IN_PROGRESS, you will accordingly receive a PARAM_ACK_IN_PROGRESS in response.
    /// </summary>
    public class Msg_param_ext_set : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// </summary>
        public byte[] param_id; // Array size 16

        /// <summary>
        /// Parameter value
        /// </summary>
        public byte[] param_value; // Array size 128

        /// <summary>
        /// Parameter type.
        /// </summary>
        public byte param_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PARAM_EXT_SET(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Response from a PARAM_EXT_SET message.
    /// </summary>
    public class Msg_param_ext_ack : MavlinkMessage
    {

        /// <summary>
        /// Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
        /// </summary>
        public byte[] param_id; // Array size 16

        /// <summary>
        /// Parameter value (new value if PARAM_ACK_ACCEPTED, current value otherwise)
        /// </summary>
        public byte[] param_value; // Array size 128

        /// <summary>
        /// Parameter type.
        /// </summary>
        public byte param_type;

        /// <summary>
        /// Result code.
        /// </summary>
        public byte param_result;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PARAM_EXT_ACK(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Obstacle distances in front of the sensor, starting from the left in increment degrees to the right
    /// </summary>
    public class Msg_obstacle_distance : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Class id of the distance sensor type.
        /// </summary>
        public byte sensor_type;

        /// <summary>
        /// Distance of obstacles around the vehicle with index 0 corresponding to north + angle_offset, unless otherwise specified in the frame. A value of 0 is valid and means that the obstacle is practically touching the sensor. A value of max_distance +1 means no obstacle is present. A value of UINT16_MAX for unknown/not used. In a array element, one unit corresponds to 1cm.
        /// </summary>
        public UInt16[] distances; // Array size 72

        /// <summary>
        /// Angular width in degrees of each array element. Increment direction is clockwise. This field is ignored if increment_f is non-zero.
        /// </summary>
        public byte increment;

        /// <summary>
        /// Minimum distance the sensor can measure.
        /// </summary>
        public UInt16 min_distance;

        /// <summary>
        /// Maximum distance the sensor can measure.
        /// </summary>
        public UInt16 max_distance;

        /// <summary>
        /// Angular width in degrees of each array element as a float. If non-zero then this value is used instead of the uint8_t increment field. Positive is clockwise direction, negative is counter-clockwise.
        /// </summary>
        public float increment_f;

        /// <summary>
        /// Relative angle offset of the 0-index element in the distances array. Value of 0 corresponds to forward. Positive is clockwise direction, negative is counter-clockwise.
        /// </summary>
        public float angle_offset;

        /// <summary>
        /// Coordinate frame of reference for the yaw rotation and offset of the sensor data. Defaults to MAV_FRAME_GLOBAL, which is north aligned. For body-mounted sensors use MAV_FRAME_BODY_FRD, which is vehicle front aligned.
        /// </summary>
        public byte frame;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_OBSTACLE_DISTANCE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Odometry message to communicate odometry information with an external interface. Fits ROS REP 147 standard for aerial vehicles (http://www.ros.org/reps/rep-0147.html).
    /// </summary>
    public class Msg_odometry : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Coordinate frame of reference for the pose data.
        /// </summary>
        public byte frame_id;

        /// <summary>
        /// Coordinate frame of reference for the velocity in free space (twist) data.
        /// </summary>
        public byte child_frame_id;

        /// <summary>
        /// X Position
        /// </summary>
        public float x;

        /// <summary>
        /// Y Position
        /// </summary>
        public float y;

        /// <summary>
        /// Z Position
        /// </summary>
        public float z;

        /// <summary>
        /// Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)
        /// </summary>
        public float[] q; // Array size 4

        /// <summary>
        /// X linear speed
        /// </summary>
        public float vx;

        /// <summary>
        /// Y linear speed
        /// </summary>
        public float vy;

        /// <summary>
        /// Z linear speed
        /// </summary>
        public float vz;

        /// <summary>
        /// Roll angular speed
        /// </summary>
        public float rollspeed;

        /// <summary>
        /// Pitch angular speed
        /// </summary>
        public float pitchspeed;

        /// <summary>
        /// Yaw angular speed
        /// </summary>
        public float yawspeed;

        /// <summary>
        /// Row-major representation of a 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// </summary>
        public float[] pose_covariance; // Array size 21

        /// <summary>
        /// Row-major representation of a 6x6 velocity cross-covariance matrix upper right triangle (states: vx, vy, vz, rollspeed, pitchspeed, yawspeed; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.
        /// </summary>
        public float[] velocity_covariance; // Array size 21

        /// <summary>
        /// Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.
        /// </summary>
        public byte reset_counter;

        /// <summary>
        /// Type of estimator that is providing the odometry.
        /// </summary>
        public byte estimator_type;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ODOMETRY(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Describe a trajectory using an array of up-to 5 waypoints in the local frame (MAV_FRAME_LOCAL_NED).
    /// </summary>
    public class Msg_trajectory_representation_waypoints : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Number of valid points (up-to 5 waypoints are possible)
        /// </summary>
        public byte valid_points;

        /// <summary>
        /// X-coordinate of waypoint, set to NaN if not being used
        /// </summary>
        public float[] pos_x; // Array size 5

        /// <summary>
        /// Y-coordinate of waypoint, set to NaN if not being used
        /// </summary>
        public float[] pos_y; // Array size 5

        /// <summary>
        /// Z-coordinate of waypoint, set to NaN if not being used
        /// </summary>
        public float[] pos_z; // Array size 5

        /// <summary>
        /// X-velocity of waypoint, set to NaN if not being used
        /// </summary>
        public float[] vel_x; // Array size 5

        /// <summary>
        /// Y-velocity of waypoint, set to NaN if not being used
        /// </summary>
        public float[] vel_y; // Array size 5

        /// <summary>
        /// Z-velocity of waypoint, set to NaN if not being used
        /// </summary>
        public float[] vel_z; // Array size 5

        /// <summary>
        /// X-acceleration of waypoint, set to NaN if not being used
        /// </summary>
        public float[] acc_x; // Array size 5

        /// <summary>
        /// Y-acceleration of waypoint, set to NaN if not being used
        /// </summary>
        public float[] acc_y; // Array size 5

        /// <summary>
        /// Z-acceleration of waypoint, set to NaN if not being used
        /// </summary>
        public float[] acc_z; // Array size 5

        /// <summary>
        /// Yaw angle, set to NaN if not being used
        /// </summary>
        public float[] pos_yaw; // Array size 5

        /// <summary>
        /// Yaw rate, set to NaN if not being used
        /// </summary>
        public float[] vel_yaw; // Array size 5

        /// <summary>
        /// Scheduled action for each waypoint, UINT16_MAX if not being used.
        /// </summary>
        public UInt16[] command; // Array size 5

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_TRAJECTORY_REPRESENTATION_WAYPOINTS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Describe a trajectory using an array of up-to 5 bezier control points in the local frame (MAV_FRAME_LOCAL_NED).
    /// </summary>
    public class Msg_trajectory_representation_bezier : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Number of valid control points (up-to 5 points are possible)
        /// </summary>
        public byte valid_points;

        /// <summary>
        /// X-coordinate of bezier control points. Set to NaN if not being used
        /// </summary>
        public float[] pos_x; // Array size 5

        /// <summary>
        /// Y-coordinate of bezier control points. Set to NaN if not being used
        /// </summary>
        public float[] pos_y; // Array size 5

        /// <summary>
        /// Z-coordinate of bezier control points. Set to NaN if not being used
        /// </summary>
        public float[] pos_z; // Array size 5

        /// <summary>
        /// Bezier time horizon. Set to NaN if velocity/acceleration should not be incorporated
        /// </summary>
        public float[] delta; // Array size 5

        /// <summary>
        /// Yaw. Set to NaN for unchanged
        /// </summary>
        public float[] pos_yaw; // Array size 5

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_TRAJECTORY_REPRESENTATION_BEZIER(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Report current used cellular network status
    /// </summary>
    public class Msg_cellular_status : MavlinkMessage
    {

        /// <summary>
        /// Status bitmap
        /// </summary>
        public UInt16 status;

        /// <summary>
        /// Cellular network radio type: gsm, cdma, lte...
        /// </summary>
        public byte type;

        /// <summary>
        /// Cellular network RSSI/RSRP in dBm, absolute value
        /// </summary>
        public byte quality;

        /// <summary>
        /// Mobile country code. If unknown, set to: UINT16_MAX
        /// </summary>
        public UInt16 mcc;

        /// <summary>
        /// Mobile network code. If unknown, set to: UINT16_MAX
        /// </summary>
        public UInt16 mnc;

        /// <summary>
        /// Location area code. If unknown, set to: 0
        /// </summary>
        public UInt16 lac;

        /// <summary>
        /// Cell ID. If unknown, set to: UINT32_MAX
        /// </summary>
        public UInt32 cid;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_CELLULAR_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Status of the Iridium SBD link.
    /// </summary>
    public class Msg_isbd_link_status : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 timestamp;

        /// <summary>
        /// Timestamp of the last successful sbd session. The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 last_heartbeat;

        /// <summary>
        /// Number of failed SBD sessions.
        /// </summary>
        public UInt16 failed_sessions;

        /// <summary>
        /// Number of successful SBD sessions.
        /// </summary>
        public UInt16 successful_sessions;

        /// <summary>
        /// Signal quality equal to the number of bars displayed on the ISU signal strength indicator. Range is 0 to 5, where 0 indicates no signal and 5 indicates maximum signal strength.
        /// </summary>
        public byte signal_quality;

        /// <summary>
        /// 1: Ring call pending, 0: No call pending.
        /// </summary>
        public byte ring_pending;

        /// <summary>
        /// 1: Transmission session pending, 0: No transmission session pending.
        /// </summary>
        public byte tx_session_pending;

        /// <summary>
        /// 1: Receiving session pending, 0: No receiving session pending.
        /// </summary>
        public byte rx_session_pending;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ISBD_LINK_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The global position resulting from GPS and sensor fusion.
    /// </summary>
    public class Msg_utm_global_position : MavlinkMessage
    {

        /// <summary>
        /// Time of applicability of position (microseconds since UNIX epoch).
        /// </summary>
        public UInt64 time;

        /// <summary>
        /// Unique UAS ID.
        /// </summary>
        public byte[] uas_id; // Array size 18

        /// <summary>
        /// Latitude (WGS84)
        /// </summary>
        public Int32 lat;

        /// <summary>
        /// Longitude (WGS84)
        /// </summary>
        public Int32 lon;

        /// <summary>
        /// Altitude (WGS84)
        /// </summary>
        public Int32 alt;

        /// <summary>
        /// Altitude above ground
        /// </summary>
        public Int32 relative_alt;

        /// <summary>
        /// Ground X speed (latitude, positive north)
        /// </summary>
        public Int16 vx;

        /// <summary>
        /// Ground Y speed (longitude, positive east)
        /// </summary>
        public Int16 vy;

        /// <summary>
        /// Ground Z speed (altitude, positive down)
        /// </summary>
        public Int16 vz;

        /// <summary>
        /// Horizontal position uncertainty (standard deviation)
        /// </summary>
        public UInt16 h_acc;

        /// <summary>
        /// Altitude uncertainty (standard deviation)
        /// </summary>
        public UInt16 v_acc;

        /// <summary>
        /// Speed uncertainty (standard deviation)
        /// </summary>
        public UInt16 vel_acc;

        /// <summary>
        /// Next waypoint, latitude (WGS84)
        /// </summary>
        public Int32 next_lat;

        /// <summary>
        /// Next waypoint, longitude (WGS84)
        /// </summary>
        public Int32 next_lon;

        /// <summary>
        /// Next waypoint, altitude (WGS84)
        /// </summary>
        public Int32 next_alt;

        /// <summary>
        /// Time until next update. Set to 0 if unknown or in data driven mode.
        /// </summary>
        public UInt16 update_rate;

        /// <summary>
        /// Flight state
        /// </summary>
        public byte flight_state;

        /// <summary>
        /// Bitwise OR combination of the data available flags.
        /// </summary>
        public byte flags;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_UTM_GLOBAL_POSITION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Large debug/prototyping array. The message uses the maximum available payload for data. The array_id and name fields are used to discriminate between messages in code and in user interfaces (respectively). Do not use in production code.
    /// </summary>
    public class Msg_debug_float_array : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Name, for human-friendly display in a Ground Control Station
        /// </summary>
        public byte[] name; // Array size 10

        /// <summary>
        /// Unique ID used to discriminate between arrays
        /// </summary>
        public UInt16 array_id;
        public float[] data; // Array size 58

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_DEBUG_FLOAT_ARRAY(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Vehicle status report that is sent out while orbit execution is in progress (see MAV_CMD_DO_ORBIT).
    /// </summary>
    public class Msg_orbit_execution_status : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Radius of the orbit circle. Positive values orbit clockwise, negative values orbit counter-clockwise.
        /// </summary>
        public float radius;

        /// <summary>
        /// The coordinate system of the fields: x, y, z.
        /// </summary>
        public byte frame;

        /// <summary>
        /// X coordinate of center point. Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.
        /// </summary>
        public Int32 x;

        /// <summary>
        /// Y coordinate of center point.  Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.
        /// </summary>
        public Int32 y;

        /// <summary>
        /// Altitude of center point. Coordinate system depends on frame field.
        /// </summary>
        public float z;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ORBIT_EXECUTION_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Smart Battery information (static/infrequent update). Use for updates from: smart battery to flight stack, flight stack to GCS. Use instead of BATTERY_STATUS for smart batteries.
    /// </summary>
    public class Msg_smart_battery_info : MavlinkMessage
    {

        /// <summary>
        /// Battery ID
        /// </summary>
        public byte id;

        /// <summary>
        /// Capacity when full according to manufacturer, -1: field not provided.
        /// </summary>
        public Int32 capacity_full_specification;

        /// <summary>
        /// Capacity when full (accounting for battery degradation), -1: field not provided.
        /// </summary>
        public Int32 capacity_full;

        /// <summary>
        /// Charge/discharge cycle count. -1: field not provided.
        /// </summary>
        public UInt16 cycle_count;

        /// <summary>
        /// Serial number. -1: field not provided.
        /// </summary>
        public Int32 serial_number;

        /// <summary>
        /// Static device name. Encode as manufacturer and product names separated using an underscore.
        /// </summary>
        public byte[] device_name; // Array size 50

        /// <summary>
        /// Battery weight. 0: field not provided.
        /// </summary>
        public UInt16 weight;

        /// <summary>
        /// Minimum per-cell voltage when discharging. If not supplied set to UINT16_MAX value.
        /// </summary>
        public UInt16 discharge_minimum_voltage;

        /// <summary>
        /// Minimum per-cell voltage when charging. If not supplied set to UINT16_MAX value.
        /// </summary>
        public UInt16 charging_minimum_voltage;

        /// <summary>
        /// Minimum per-cell voltage when resting. If not supplied set to UINT16_MAX value.
        /// </summary>
        public UInt16 resting_minimum_voltage;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SMART_BATTERY_INFO(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Smart Battery information (dynamic). Use for updates from: smart battery to flight stack, flight stack to GCS. Use instead of BATTERY_STATUS for smart batteries.
    /// </summary>
    public class Msg_smart_battery_status : MavlinkMessage
    {

        /// <summary>
        /// Battery ID
        /// </summary>
        public UInt16 id;

        /// <summary>
        /// Remaining battery energy. Values: [0-100], -1: field not provided.
        /// </summary>
        public Int16 capacity_remaining;

        /// <summary>
        /// Battery current (through all cells/loads). Positive if discharging, negative if charging. UINT16_MAX: field not provided.
        /// </summary>
        public Int16 current;

        /// <summary>
        /// Battery temperature. -1: field not provided.
        /// </summary>
        public Int16 temperature;

        /// <summary>
        /// Fault/health indications.
        /// </summary>
        public Int32 fault_bitmask;

        /// <summary>
        /// Estimated remaining battery time. -1: field not provided.
        /// </summary>
        public Int32 time_remaining;

        /// <summary>
        /// The cell number of the first index in the 'voltages' array field. Using this field allows you to specify cell voltages for batteries with more than 16 cells.
        /// </summary>
        public UInt16 cell_offset;

        /// <summary>
        /// Individual cell voltages. Batteries with more 16 cells can use the cell_offset field to specify the cell offset for the array specified in the current message . Index values above the valid cell count for this battery should have the UINT16_MAX value.
        /// </summary>
        public UInt16[] voltages; // Array size 16

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SMART_BATTERY_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// The raw values of the actuator outputs (e.g. on Pixhawk, from MAIN, AUX ports). This message supersedes SERVO_OUTPUT_RAW.
    /// </summary>
    public class Msg_actuator_output_status : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (since system boot).
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Active outputs
        /// </summary>
        public UInt32 active;

        /// <summary>
        /// Servo / motor output array values. Zero values indicate unused channels.
        /// </summary>
        public float[] actuator; // Array size 32

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ACTUATOR_OUTPUT_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Time/duration estimates for various events and actions given the current vehicle state and position.
    /// </summary>
    public class Msg_time_estimate_to_target : MavlinkMessage
    {

        /// <summary>
        /// Estimated time to complete the vehicle's configured "safe return" action from its current position (e.g. RTL, Smart RTL, etc.). -1 indicates that the vehicle is landed, or that no time estimate available.
        /// </summary>
        public Int32 safe_return;

        /// <summary>
        /// Estimated time for vehicle to complete the LAND action from its current position. -1 indicates that the vehicle is landed, or that no time estimate available.
        /// </summary>
        public Int32 land;

        /// <summary>
        /// Estimated time for reaching/completing the currently active mission item. -1 means no time estimate available.
        /// </summary>
        public Int32 mission_next_item;

        /// <summary>
        /// Estimated time for completing the current mission. -1 means no mission active and/or no estimate available.
        /// </summary>
        public Int32 mission_end;

        /// <summary>
        /// Estimated time for completing the current commanded action (i.e. Go To, Takeoff, Land, etc.). -1 means no action active and/or no estimate available.
        /// </summary>
        public Int32 commanded_action;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_TIME_ESTIMATE_TO_TARGET(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Message for transporting "arbitrary" variable-length data from one component to another (broadcast is not forbidden, but discouraged). The encoding of the data is usually extension specific, i.e. determined by the source, and is usually not documented as part of the MAVLink specification.
    /// </summary>
    public class Msg_tunnel : MavlinkMessage
    {

        /// <summary>
        /// System ID (can be 0 for broadcast, but this is discouraged)
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID (can be 0 for broadcast, but this is discouraged)
        /// </summary>
        public byte target_component;

        /// <summary>
        /// A code that identifies the content of the payload (0 for unknown, which is the default). If this code is less than 32768, it is a 'registered' payload type and the corresponding code should be added to the MAV_TUNNEL_PAYLOAD_TYPE enum. Software creators can register blocks of types as needed. Codes greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.
        /// </summary>
        public UInt16 payload_type;

        /// <summary>
        /// Length of the data transported in payload
        /// </summary>
        public byte payload_length;

        /// <summary>
        /// Variable length payload. The payload length is defined by payload_length. The entire content of this block is opaque unless you understand the encoding specified by payload_type.
        /// </summary>
        public byte[] payload; // Array size 128

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_TUNNEL(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Hardware status sent by an onboard computer.
    /// </summary>
    public class Msg_onboard_computer_status : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Time since system boot.
        /// </summary>
        public UInt32 uptime;

        /// <summary>
        /// Type of the onboard computer: 0: Mission computer primary, 1: Mission computer backup 1, 2: Mission computer backup 2, 3: Compute node, 4-5: Compute spares, 6-9: Payload computers.
        /// </summary>
        public byte type;

        /// <summary>
        /// CPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.
        /// </summary>
        public byte[] cpu_cores; // Array size 8

        /// <summary>
        /// Combined CPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.
        /// </summary>
        public byte[] cpu_combined; // Array size 10

        /// <summary>
        /// GPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.
        /// </summary>
        public byte[] gpu_cores; // Array size 4

        /// <summary>
        /// Combined GPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.
        /// </summary>
        public byte[] gpu_combined; // Array size 10

        /// <summary>
        /// Temperature of the board. A value of INT8_MAX implies the field is unused.
        /// </summary>
        public sbyte temperature_board;

        /// <summary>
        /// Temperature of the CPU core. A value of INT8_MAX implies the field is unused.
        /// </summary>
        public sbyte[] temperature_core; // Array size 8

        /// <summary>
        /// Fan speeds. A value of INT16_MAX implies the field is unused.
        /// </summary>
        public Int16[] fan_speed; // Array size 4

        /// <summary>
        /// Amount of used RAM on the component system. A value of UINT32_MAX implies the field is unused.
        /// </summary>
        public UInt32 ram_usage;

        /// <summary>
        /// Total amount of RAM on the component system. A value of UINT32_MAX implies the field is unused.
        /// </summary>
        public UInt32 ram_total;

        /// <summary>
        /// Storage type: 0: HDD, 1: SSD, 2: EMMC, 3: SD card (non-removable), 4: SD card (removable). A value of UINT32_MAX implies the field is unused.
        /// </summary>
        public UInt32[] storage_type; // Array size 4

        /// <summary>
        /// Amount of used storage space on the component system. A value of UINT32_MAX implies the field is unused.
        /// </summary>
        public UInt32[] storage_usage; // Array size 4

        /// <summary>
        /// Total amount of storage space on the component system. A value of UINT32_MAX implies the field is unused.
        /// </summary>
        public UInt32[] storage_total; // Array size 4

        /// <summary>
        /// Link type: 0-9: UART, 10-19: Wired network, 20-29: Wifi, 30-39: Point-to-point proprietary, 40-49: Mesh proprietary
        /// </summary>
        public UInt32[] link_type; // Array size 6

        /// <summary>
        /// Network traffic from the component system. A value of UINT32_MAX implies the field is unused.
        /// </summary>
        public UInt32[] link_tx_rate; // Array size 6

        /// <summary>
        /// Network traffic to the component system. A value of UINT32_MAX implies the field is unused.
        /// </summary>
        public UInt32[] link_rx_rate; // Array size 6

        /// <summary>
        /// Network capacity from the component system. A value of UINT32_MAX implies the field is unused.
        /// </summary>
        public UInt32[] link_tx_max; // Array size 6

        /// <summary>
        /// Network capacity to the component system. A value of UINT32_MAX implies the field is unused.
        /// </summary>
        public UInt32[] link_rx_max; // Array size 6

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_ONBOARD_COMPUTER_STATUS(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Information about a component. For camera components instead use CAMERA_INFORMATION, and for autopilots use AUTOPILOT_VERSION. Components including GCSes should consider supporting requests of this message via MAV_CMD_REQUEST_MESSAGE.
    /// </summary>
    public class Msg_component_information : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (time since system boot).
        /// </summary>
        public UInt32 time_boot_ms;

        /// <summary>
        /// Name of the component vendor
        /// </summary>
        public byte[] vendor_name; // Array size 32

        /// <summary>
        /// Name of the component model
        /// </summary>
        public byte[] model_name; // Array size 32

        /// <summary>
        /// Version of the component firmware (v << 24 & 0xff = Dev, v << 16 & 0xff = Patch, v << 8 & 0xff = Minor, v & 0xff = Major)
        /// </summary>
        public UInt32 firmware_version;

        /// <summary>
        /// Version of the component hardware (v << 24 & 0xff = Dev, v << 16 & 0xff = Patch, v << 8 & 0xff = Minor, v & 0xff = Major)
        /// </summary>
        public UInt32 hardware_version;

        /// <summary>
        /// Bitmap of component capability flags.
        /// </summary>
        public UInt32 capability_flags;

        /// <summary>
        /// Component definition version (iteration)
        /// </summary>
        public UInt16 component_definition_version;

        /// <summary>
        /// Component definition URI (if any, otherwise only basic functions will be available). The XML format is not yet specified and work in progress. 
        /// </summary>
        public byte[] component_definition_uri; // Array size 140

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_COMPONENT_INFORMATION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Play vehicle tone/tune (buzzer). Supersedes message PLAY_TUNE.
    /// </summary>
    public class Msg_play_tune_v2 : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Tune format
        /// </summary>
        public UInt32 format;

        /// <summary>
        /// Tune definition as a NULL-terminated string.
        /// </summary>
        public byte[] tune; // Array size 248

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_PLAY_TUNE_V2(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Tune formats supported by vehicle. This should be emitted as response to MAV_CMD_REQUEST_MESSAGE.
    /// </summary>
    public class Msg_supported_tunes : MavlinkMessage
    {

        /// <summary>
        /// System ID
        /// </summary>
        public byte target_system;

        /// <summary>
        /// Component ID
        /// </summary>
        public byte target_component;

        /// <summary>
        /// Bitfield of supported tune formats.
        /// </summary>
        public UInt32 format;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_SUPPORTED_TUNES(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Cumulative distance traveled for each reported wheel.
    /// </summary>
    public class Msg_wheel_distance : MavlinkMessage
    {

        /// <summary>
        /// Timestamp (synced to UNIX time or since system boot).
        /// </summary>
        public UInt64 time_usec;

        /// <summary>
        /// Number of wheels reported.
        /// </summary>
        public byte count;

        /// <summary>
        /// Distance reported by individual wheel encoders. Forward rotations increase values, reverse rotations decrease them. Not all wheels will necessarily have wheel encoders; the mapping of encoders to wheel positions must be agreed/understood by the endpoints.
        /// </summary>
        public double[] distance; // Array size 16

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_WHEEL_DISTANCE(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Data for filling the OpenDroneID Basic ID message. This and the below messages are primarily meant for feeding data to/from an OpenDroneID implementation. E.g. https://github.com/opendroneid/opendroneid-core-c. See also the ASTM Remote ID standard at https://www.astm.org/Standards/F3411.htm. The usage of these messages is documented at https://mavlink.io/en/services/opendroneid.html.
    /// </summary>
    public class Msg_open_drone_id_basic_id : MavlinkMessage
    {

        /// <summary>
        /// Indicates the format for the uas_id field of this message.
        /// </summary>
        public byte id_type;

        /// <summary>
        /// Indicates the type of UA (Unmanned Aircraft).
        /// </summary>
        public byte ua_type;

        /// <summary>
        /// UAS (Unmanned Aircraft System) ID following the format specified by id_type. Shall be filled with nulls in the unused portion of the field.
        /// </summary>
        public byte[] uas_id; // Array size 20

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_OPEN_DRONE_ID_BASIC_ID(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Data for filling the OpenDroneID Location message. The float data types are 32-bit IEEE 754. The Location message provides the location, altitude, direction and speed of the aircraft.
    /// </summary>
    public class Msg_open_drone_id_location : MavlinkMessage
    {

        /// <summary>
        /// Indicates whether the Unmanned Aircraft is on the ground or in the air.
        /// </summary>
        public byte status;

        /// <summary>
        /// Direction over ground (not heading, but direction of movement) in degrees * 100: 0.0 - 359.99 degrees. If unknown: 361.00 degrees.
        /// </summary>
        public UInt16 direction;

        /// <summary>
        /// Ground speed. Positive only. If unknown: 255.00 m/s. If speed is larger than 254.25 m/s, use 254.25 m/s.
        /// </summary>
        public UInt16 speed_horizontal;

        /// <summary>
        /// The vertical speed. Up is positive. If unknown: 63.00 m/s. If speed is larger than 62.00 m/s, use 62.00 m/s.
        /// </summary>
        public Int16 speed_vertical;

        /// <summary>
        /// Current latitude of the UA (Unmanned Aircraft). If unknown: 0 deg (both Lat/Lon).
        /// </summary>
        public Int32 latitude;

        /// <summary>
        /// Current longitude of the UA (Unmanned Aircraft). If unknown: 0 deg (both Lat/Lon).
        /// </summary>
        public Int32 longitude;

        /// <summary>
        /// The altitude calculated from the barometric pressue. Reference is against 29.92inHg or 1013.2mb. If unknown: -1000 m.
        /// </summary>
        public float altitude_barometric;

        /// <summary>
        /// The geodetic altitude as defined by WGS84. If unknown: -1000 m.
        /// </summary>
        public float altitude_geodetic;

        /// <summary>
        /// Indicates the reference point for the height field.
        /// </summary>
        public byte height_reference;

        /// <summary>
        /// The current height of the UA (Unmanned Aircraft) above the take-off location or the ground as indicated by height_reference. If unknown: -1000 m.
        /// </summary>
        public float height;

        /// <summary>
        /// The accuracy of the horizontal position.
        /// </summary>
        public byte horizontal_accuracy;

        /// <summary>
        /// The accuracy of the vertical position.
        /// </summary>
        public byte vertical_accuracy;

        /// <summary>
        /// The accuracy of the barometric altitude.
        /// </summary>
        public byte barometer_accuracy;

        /// <summary>
        /// The accuracy of the horizontal and vertical speed.
        /// </summary>
        public byte speed_accuracy;

        /// <summary>
        /// Seconds after the full hour. Typically the GPS outputs a time of week value in milliseconds. That value can be easily converted for this field using ((float) (time_week_ms % (60*60*1000))) / 1000.
        /// </summary>
        public float timestamp;

        /// <summary>
        /// The accuracy of the timestamps.
        /// </summary>
        public byte timestamp_accuracy;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_OPEN_DRONE_ID_LOCATION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Data for filling the OpenDroneID Authentication message. The Authentication Message defines a field that can provide a means of authenticity for the identity of the UAS (Unmanned Aircraft System). The Authentication message can have two different formats. Five data pages are supported. For data page 0, the fields PageCount, Length and TimeStamp are present and AuthData is only 17 bytes. For data page 1 through 4, PageCount,Length and TimeStamp are not present and the size of AuthData is 23 bytes.
    /// </summary>
    public class Msg_open_drone_id_authentication : MavlinkMessage
    {

        /// <summary>
        /// Indicates the type of authentication.
        /// </summary>
        public byte authentication_type;

        /// <summary>
        /// Allowed range is 0 - 4.
        /// </summary>
        public byte data_page;

        /// <summary>
        /// This field is only present for page 0. Allowed range is 0 - 5.
        /// </summary>
        public byte page_count;

        /// <summary>
        /// This field is only present for page 0. Total bytes of authentication_data from all data pages. Allowed range is 0 - 109 (17 + 23*4).
        /// </summary>
        public byte length;

        /// <summary>
        /// This field is only present for page 0. 32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019.
        /// </summary>
        public UInt32 timestamp;

        /// <summary>
        /// Opaque authentication data. For page 0, the size is only 17 bytes. For other pages, the size is 23 bytes. Shall be filled with nulls in the unused portion of the field.
        /// </summary>
        public byte[] authentication_data; // Array size 23

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_OPEN_DRONE_ID_AUTHENTICATION(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Data for filling the OpenDroneID Self ID message. The Self ID Message is an opportunity for the operator to (optionally) declare their identity and purpose of the flight. This message can provide additional information that could reduce the threat profile of a UA (Unmanned Aircraft) flying in a particular area or manner.
    /// </summary>
    public class Msg_open_drone_id_self_id : MavlinkMessage
    {

        /// <summary>
        /// Indicates the type of the description field.
        /// </summary>
        public byte description_type;

        /// <summary>
        /// Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field.
        /// </summary>
        public byte[] description; // Array size 23

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_OPEN_DRONE_ID_SELF_ID(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Data for filling the OpenDroneID System message. The System Message contains general system information including the operator location and possible aircraft group information.
    /// </summary>
    public class Msg_open_drone_id_system : MavlinkMessage
    {

        /// <summary>
        /// Specifies the location source for the operator location.
        /// </summary>
        public byte flags;

        /// <summary>
        /// Latitude of the operator. If unknown: 0 deg (both Lat/Lon).
        /// </summary>
        public Int32 operator_latitude;

        /// <summary>
        /// Longitude of the operator. If unknown: 0 deg (both Lat/Lon).
        /// </summary>
        public Int32 operator_longitude;

        /// <summary>
        /// Number of aircraft in the area, group or formation (default 1).
        /// </summary>
        public UInt16 area_count;

        /// <summary>
        /// Radius of the cylindrical area of the group or formation (default 0).
        /// </summary>
        public UInt16 area_radius;

        /// <summary>
        /// Area Operations Ceiling relative to WGS84. If unknown: -1000 m.
        /// </summary>
        public float area_ceiling;

        /// <summary>
        /// Area Operations Floor relative to WGS84. If unknown: -1000 m.
        /// </summary>
        public float area_floor;

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_OPEN_DRONE_ID_SYSTEM(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// Data for filling the OpenDroneID Operator ID message, which contains the CAA (Civil Aviation Authority) issued operator ID.
    /// </summary>
    public class Msg_open_drone_id_operator_id : MavlinkMessage
    {

        /// <summary>
        /// Indicates the type of the operator_id field.
        /// </summary>
        public byte operator_id_type;

        /// <summary>
        /// Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field.
        /// </summary>
        public byte[] operator_id; // Array size 20

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_OPEN_DRONE_ID_OPERATOR_ID(this, bytes, ref offset);
        }
    }


    /// <summary>
    /// An OpenDroneID message pack is a container for multiple encoded OpenDroneID messages (i.e. not in the format given for the above messages descriptions but after encoding into the compressed OpenDroneID byte format). Used e.g. when transmitting on Bluetooth 5.0 Long Range/Extended Advertising or on WiFi Neighbor Aware Networking.
    /// </summary>
    public class Msg_open_drone_id_message_pack : MavlinkMessage
    {

        /// <summary>
        /// This field must currently always be equal to 25 bytes, since all encoded OpenDroneID messages are specificed to have this length.
        /// </summary>
        public byte single_message_size;

        /// <summary>
        /// Number of encoded messages in the pack (not the number of bytes). Allowed range is 1 - 10.
        /// </summary>
        public byte msg_pack_size;

        /// <summary>
        /// Concatenation of encoded OpenDroneID messages. Shall be filled with nulls in the unused portion of the field.
        /// </summary>
        public byte[] messages; // Array size 250

        public override int Serialize(byte[] bytes, ref int offset)
        {
            return MavLinkSerializer.Serialize_OPEN_DRONE_ID_MESSAGE_PACK(this, bytes, ref offset);
        }
    }

}

