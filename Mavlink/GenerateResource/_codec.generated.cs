

/*
MAVLink protocol implementation (auto-generated by mavgen.py)

Note: this file has been auto-generated. DO NOT EDIT
*/

using System;
using System.Collections;
using System.Collections.Generic;
using MavLink.Message;

namespace MavLink
{
    public static class MavlinkSettings
    {
		public const string WireProtocolVersion = "1.0";
		public const byte ProtocolMarker = 0xfe;
		public const bool CrcExtra = true;
		public const bool IsLittleEndian = true;
    }
    
    public delegate MavlinkMessage MavlinkPacketDeserializeFunc(byte[] bytes, int offset);

    //returns the message ID, offset is advanced by the number of bytes used to serialize
    public delegate int MavlinkPacketSerializeFunc(byte[] bytes, ref int offset, object mavlinkPacket);
 
    public class MavPacketInfo
    {
        public MavlinkPacketDeserializeFunc Deserializer;
        public int [] OrderMap;
        public byte CrcExtra;

         public MavPacketInfo(MavlinkPacketDeserializeFunc deserializer, byte crcExtra)
         {
             this.Deserializer = deserializer;
             this.CrcExtra = crcExtra;
         }
    }
 
    public static class MavLinkSerializer
    {
        public static void SetDataIsLittleEndian(bool isLittle)
        {
            bitconverter.SetDataIsLittleEndian(isLittle);
        }
    
        private static readonly FrameworkBitConverter bitconverter = new FrameworkBitConverter(); 
    
        public static Dictionary<int, MavPacketInfo> Lookup = new Dictionary<int, MavPacketInfo>
        {
			{0, new MavPacketInfo(Deserialize_HeartBeat, 124)},
			{1, new MavPacketInfo(Deserialize_SYS_STATUS, 124)},
			{30, new MavPacketInfo(Deserialize_Attitude, 177)},
			{33, new MavPacketInfo(Deserialize_GPSData, 71)},
			{34, new MavPacketInfo(Deserialize_EngineData, 18)},
		};

		internal static MavlinkMessage Deserialize_HeartBeat(byte[] bytes, int offset)
		{
			return new Msg_heartbeat
			{
				SysMessage = bytes[offset + 0],
			};
		}

		internal static MavlinkMessage Deserialize_SYS_STATUS(byte[] bytes, int offset)
		{
			return new Msg_sys_status
			{
				onboard_control_sensors_present = bitconverter.ToUInt32(bytes, offset + 0),
				onboard_control_sensors_enabled = bitconverter.ToUInt32(bytes, offset + 4),
				onboard_control_sensors_health = bitconverter.ToUInt32(bytes, offset + 8),
				load = bitconverter.ToUInt16(bytes, offset + 12),
				voltage_battery = bitconverter.ToUInt16(bytes, offset + 14),
				current_battery = bitconverter.ToInt16(bytes, offset + 16),
				drop_rate_comm = bitconverter.ToUInt16(bytes, offset + 18),
				errors_comm = bitconverter.ToUInt16(bytes, offset + 20),
				errors_count1 = bitconverter.ToUInt16(bytes, offset + 22),
				errors_count2 = bitconverter.ToUInt16(bytes, offset + 24),
				errors_count3 = bitconverter.ToUInt16(bytes, offset + 26),
				errors_count4 = bitconverter.ToUInt16(bytes, offset + 28),
				battery_remaining = bitconverter.ToInt8(bytes, offset + 30),
			};
		}

		internal static MavlinkMessage Deserialize_Attitude(byte[] bytes, int offset)
		{
			return new Msg_attitude
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				roll = bitconverter.ToSingle(bytes, offset + 4),
				pitch = bitconverter.ToSingle(bytes, offset + 8),
				yaw = bitconverter.ToSingle(bytes, offset + 12),
				rollspeed = bitconverter.ToSingle(bytes, offset + 16),
				pitchspeed = bitconverter.ToSingle(bytes, offset + 20),
				yawspeed = bitconverter.ToSingle(bytes, offset + 24),
				Aacceleration_X = bitconverter.ToSingle(bytes, offset + 28),
				Aacceleration_Y = bitconverter.ToSingle(bytes, offset + 32),
				Aacceleration_Z = bitconverter.ToSingle(bytes, offset + 36),
				BarometricAltitude = bitconverter.ToSingle(bytes, offset + 40),
				Pressure = bitconverter.ToSingle(bytes, offset + 44),
				MicroAltitude = bitconverter.ToSingle(bytes, offset + 48),
			};
		}

		internal static MavlinkMessage Deserialize_GPSData(byte[] bytes, int offset)
		{
			return new Msg_gpsdata
			{
				Latitude = bitconverter.ToDouble(bytes, offset + 0),
				Longitude = bitconverter.ToDouble(bytes, offset + 8),
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 16),
				GPSAltitude = bitconverter.ToSingle(bytes, offset + 20),
				GPSSpeed = bitconverter.ToSingle(bytes, offset + 24),
				GPSHeading = bitconverter.ToSingle(bytes, offset + 28),
				GPSYaw = bitconverter.ToSingle(bytes, offset + 32),
				PositionalAccuracy = bitconverter.ToSingle(bytes, offset + 36),
				HorizontalAccuracy = bitconverter.ToSingle(bytes, offset + 40),
				VerticalAccuracy = bitconverter.ToSingle(bytes, offset + 44),
				SatellitesCount = bitconverter.ToInt16(bytes, offset + 48),
			};
		}

		internal static MavlinkMessage Deserialize_EngineData(byte[] bytes, int offset)
		{
			return new Msg_enginedata
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				Engine01_Power = bitconverter.ToSingle(bytes, offset + 4),
				Engine02_Power = bitconverter.ToSingle(bytes, offset + 8),
				Engine03_Power = bitconverter.ToSingle(bytes, offset + 12),
				Engine04_Power = bitconverter.ToSingle(bytes, offset + 16),
				Engine01_RPM = bitconverter.ToInt16(bytes, offset + 20),
				Engine02_RPM = bitconverter.ToInt16(bytes, offset + 22),
				Engine03_RPM = bitconverter.ToInt16(bytes, offset + 24),
				Engine04_RPM = bitconverter.ToInt16(bytes, offset + 26),
			};
		}

		internal static int Serialize_HeartBeat(this Msg_heartbeat msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.SysMessage; // todo: check int8_t and char are compatible
			offset += 1;
			return 0;
		}

		internal static int Serialize_SYS_STATUS(this Msg_sys_status msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.onboard_control_sensors_present, bytes, offset + 0);
			bitconverter.GetBytes(msg.onboard_control_sensors_enabled, bytes, offset + 4);
			bitconverter.GetBytes(msg.onboard_control_sensors_health, bytes, offset + 8);
			bitconverter.GetBytes(msg.load, bytes, offset + 12);
			bitconverter.GetBytes(msg.voltage_battery, bytes, offset + 14);
			bitconverter.GetBytes(msg.current_battery, bytes, offset + 16);
			bitconverter.GetBytes(msg.drop_rate_comm, bytes, offset + 18);
			bitconverter.GetBytes(msg.errors_comm, bytes, offset + 20);
			bitconverter.GetBytes(msg.errors_count1, bytes, offset + 22);
			bitconverter.GetBytes(msg.errors_count2, bytes, offset + 24);
			bitconverter.GetBytes(msg.errors_count3, bytes, offset + 26);
			bitconverter.GetBytes(msg.errors_count4, bytes, offset + 28);
			bytes[offset + 30] = unchecked((byte)msg.battery_remaining);
			offset += 31;
			return 1;
		}

		internal static int Serialize_Attitude(this Msg_attitude msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.roll, bytes, offset + 4);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 8);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 12);
			bitconverter.GetBytes(msg.rollspeed, bytes, offset + 16);
			bitconverter.GetBytes(msg.pitchspeed, bytes, offset + 20);
			bitconverter.GetBytes(msg.yawspeed, bytes, offset + 24);
			bitconverter.GetBytes(msg.Aacceleration_X, bytes, offset + 28);
			bitconverter.GetBytes(msg.Aacceleration_Y, bytes, offset + 32);
			bitconverter.GetBytes(msg.Aacceleration_Z, bytes, offset + 36);
			bitconverter.GetBytes(msg.BarometricAltitude, bytes, offset + 40);
			bitconverter.GetBytes(msg.Pressure, bytes, offset + 44);
			bitconverter.GetBytes(msg.MicroAltitude, bytes, offset + 48);
			offset += 52;
			return 30;
		}

		internal static int Serialize_GPSData(this Msg_gpsdata msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.Latitude, bytes, offset + 0);
			bitconverter.GetBytes(msg.Longitude, bytes, offset + 8);
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 16);
			bitconverter.GetBytes(msg.GPSAltitude, bytes, offset + 20);
			bitconverter.GetBytes(msg.GPSSpeed, bytes, offset + 24);
			bitconverter.GetBytes(msg.GPSHeading, bytes, offset + 28);
			bitconverter.GetBytes(msg.GPSYaw, bytes, offset + 32);
			bitconverter.GetBytes(msg.PositionalAccuracy, bytes, offset + 36);
			bitconverter.GetBytes(msg.HorizontalAccuracy, bytes, offset + 40);
			bitconverter.GetBytes(msg.VerticalAccuracy, bytes, offset + 44);
			bitconverter.GetBytes(msg.SatellitesCount, bytes, offset + 48);
			offset += 50;
			return 33;
		}

		internal static int Serialize_EngineData(this Msg_enginedata msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.Engine01_Power, bytes, offset + 4);
			bitconverter.GetBytes(msg.Engine02_Power, bytes, offset + 8);
			bitconverter.GetBytes(msg.Engine03_Power, bytes, offset + 12);
			bitconverter.GetBytes(msg.Engine04_Power, bytes, offset + 16);
			bitconverter.GetBytes(msg.Engine01_RPM, bytes, offset + 20);
			bitconverter.GetBytes(msg.Engine02_RPM, bytes, offset + 22);
			bitconverter.GetBytes(msg.Engine03_RPM, bytes, offset + 24);
			bitconverter.GetBytes(msg.Engine04_RPM, bytes, offset + 26);
			offset += 28;
			return 34;
		}
	}

}

