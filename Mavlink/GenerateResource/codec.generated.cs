

/*
MAVLink protocol implementation (auto-generated by mavgen.py)

Note: this file has been auto-generated. DO NOT EDIT
*/

using System;
using System.Collections;
using System.Collections.Generic;
    
namespace MavLink
{
    public static class MavlinkSettings
    {
		public const string WireProtocolVersion = "1.0";
		public const byte ProtocolMarker = 0xfe;
		public const bool CrcExtra = true;
		public const bool IsLittleEndian = true;
    }
    
    public delegate MavlinkMessage MavlinkPacketDeserializeFunc(byte[] bytes, int offset);

    //returns the message ID, offset is advanced by the number of bytes used to serialize
    public delegate int MavlinkPacketSerializeFunc(byte[] bytes, ref int offset, object mavlinkPacket);
 
    public class MavPacketInfo
    {
        public MavlinkPacketDeserializeFunc Deserializer;
        public int [] OrderMap;
        public byte CrcExtra;

         public MavPacketInfo(MavlinkPacketDeserializeFunc deserializer, byte crcExtra)
         {
             this.Deserializer = deserializer;
             this.CrcExtra = crcExtra;
         }
    }
 
    public static class MavLinkSerializer
    {
        public static void SetDataIsLittleEndian(bool isLittle)
        {
            bitconverter.SetDataIsLittleEndian(isLittle);
        }
    
        private static readonly FrameworkBitConverter bitconverter = new FrameworkBitConverter(); 
    
        public static Dictionary<int, MavPacketInfo> Lookup = new Dictionary<int, MavPacketInfo>
        {
			{0, new MavPacketInfo(Deserialize_HEARTBEAT, 140)},
			{4, new MavPacketInfo(Deserialize_PING, 237)},
			{20, new MavPacketInfo(Deserialize_ContrlMode, 153)},
			{21, new MavPacketInfo(Deserialize_SpeedMode, 210)},
			{25, new MavPacketInfo(Deserialize_GPS_STATUS, 23)},
			{30, new MavPacketInfo(Deserialize_ATTITUDE, 39)},
			{31, new MavPacketInfo(Deserialize_ATTITUDE_EXT, 200)},
			{33, new MavPacketInfo(Deserialize_GLOBAL_POSITION_INT, 104)},
			{34, new MavPacketInfo(Deserialize_GLOBAL_POSITION_INT_EXT, 19)},
			{80, new MavPacketInfo(Deserialize_FunctionStatus, 167)},
			{81, new MavPacketInfo(Deserialize_SetFunctionStatus, 22)},
			{90, new MavPacketInfo(Deserialize_LOG, 156)},
			{242, new MavPacketInfo(Deserialize_HOME_POSITION, 104)},
		};

		internal static MavlinkMessage Deserialize_HEARTBEAT(byte[] bytes, int offset)
		{
			return new Msg_heartbeat
			{
				fightstatus = bytes[offset + 0],
			};
		}

		internal static MavlinkMessage Deserialize_PING(byte[] bytes, int offset)
		{
			return new Msg_ping
			{
				time_usec = bitconverter.ToUInt64(bytes, offset + 0),
				seq = bitconverter.ToUInt32(bytes, offset + 8),
				target_system = bytes[offset + 12],
				target_component = bytes[offset + 13],
			};
		}

		internal static MavlinkMessage Deserialize_ContrlMode(byte[] bytes, int offset)
		{
			return new Msg_contrlmode
			{
				contrlmode = bytes[offset + 0],
			};
		}

		internal static MavlinkMessage Deserialize_SpeedMode(byte[] bytes, int offset)
		{
			return new Msg_speedmode
			{
				speedmode = bytes[offset + 0],
			};
		}

		internal static MavlinkMessage Deserialize_GPS_STATUS(byte[] bytes, int offset)
		{
			return new Msg_gps_status
			{
				satellites_visible = bytes[offset + 0],
				satellite_prn =  ByteArrayUtil.ToUInt8(bytes, offset + 1, 20),
				satellite_used =  ByteArrayUtil.ToUInt8(bytes, offset + 21, 20),
				satellite_elevation =  ByteArrayUtil.ToUInt8(bytes, offset + 41, 20),
				satellite_azimuth =  ByteArrayUtil.ToUInt8(bytes, offset + 61, 20),
				satellite_snr =  ByteArrayUtil.ToUInt8(bytes, offset + 81, 20),
			};
		}

		internal static MavlinkMessage Deserialize_ATTITUDE(byte[] bytes, int offset)
		{
			return new Msg_attitude
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				roll = bitconverter.ToSingle(bytes, offset + 4),
				pitch = bitconverter.ToSingle(bytes, offset + 8),
				yaw = bitconverter.ToSingle(bytes, offset + 12),
				rollspeed = bitconverter.ToSingle(bytes, offset + 16),
				pitchspeed = bitconverter.ToSingle(bytes, offset + 20),
				yawspeed = bitconverter.ToSingle(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_ATTITUDE_EXT(byte[] bytes, int offset)
		{
			return new Msg_attitude_ext
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				Aacceleration_X = bitconverter.ToSingle(bytes, offset + 4),
				Aacceleration_Y = bitconverter.ToSingle(bytes, offset + 8),
				Aacceleration_Z = bitconverter.ToSingle(bytes, offset + 12),
				BarometricAltitude = bitconverter.ToSingle(bytes, offset + 16),
				MicroAltitude = bitconverter.ToSingle(bytes, offset + 20),
				Pressure = bitconverter.ToSingle(bytes, offset + 24),
			};
		}

		internal static MavlinkMessage Deserialize_GLOBAL_POSITION_INT(byte[] bytes, int offset)
		{
			return new Msg_global_position_int
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				lat = bitconverter.ToInt32(bytes, offset + 4),
				lon = bitconverter.ToInt32(bytes, offset + 8),
				alt = bitconverter.ToInt32(bytes, offset + 12),
				relative_alt = bitconverter.ToInt32(bytes, offset + 16),
				vx = bitconverter.ToInt16(bytes, offset + 20),
				vy = bitconverter.ToInt16(bytes, offset + 22),
				vz = bitconverter.ToInt16(bytes, offset + 24),
				hdg = bitconverter.ToUInt16(bytes, offset + 26),
			};
		}

		internal static MavlinkMessage Deserialize_GLOBAL_POSITION_INT_EXT(byte[] bytes, int offset)
		{
			return new Msg_global_position_int_ext
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				GPSSpeed = bitconverter.ToInt32(bytes, offset + 4),
				GPSYaw = bitconverter.ToInt32(bytes, offset + 8),
				SatellitesCount = bitconverter.ToInt32(bytes, offset + 12),
				PositionalAccuracy = bitconverter.ToInt32(bytes, offset + 16),
				HorizontalAccuracy = bitconverter.ToInt16(bytes, offset + 20),
				VerticalAccuracy = bitconverter.ToInt16(bytes, offset + 22),
			};
		}

		internal static MavlinkMessage Deserialize_FunctionStatus(byte[] bytes, int offset)
		{
			return new Msg_functionstatus
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				functionname =  ByteArrayUtil.ToChar(bytes, offset + 4, 50),
				status = bytes[offset + 54],
			};
		}

		internal static MavlinkMessage Deserialize_SetFunctionStatus(byte[] bytes, int offset)
		{
			return new Msg_setfunctionstatus
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				functionname =  ByteArrayUtil.ToChar(bytes, offset + 4, 50),
				status = bytes[offset + 54],
			};
		}

		internal static MavlinkMessage Deserialize_LOG(byte[] bytes, int offset)
		{
			return new Msg_log
			{
				time_boot_ms = bitconverter.ToUInt32(bytes, offset + 0),
				logtype = bytes[offset + 4],
				logtext =  ByteArrayUtil.ToChar(bytes, offset + 5, 50),
			};
		}

		internal static MavlinkMessage Deserialize_HOME_POSITION(byte[] bytes, int offset)
		{
			return new Msg_home_position
			{
				latitude = bitconverter.ToInt32(bytes, offset + 0),
				longitude = bitconverter.ToInt32(bytes, offset + 4),
				altitude = bitconverter.ToInt32(bytes, offset + 8),
				x = bitconverter.ToSingle(bytes, offset + 12),
				y = bitconverter.ToSingle(bytes, offset + 16),
				z = bitconverter.ToSingle(bytes, offset + 20),
				q =  ByteArrayUtil.ToSingle(bytes, offset + 24, 4),
				approach_x = bitconverter.ToSingle(bytes, offset + 40),
				approach_y = bitconverter.ToSingle(bytes, offset + 44),
				approach_z = bitconverter.ToSingle(bytes, offset + 48),
			};
		}

		internal static int Serialize_HEARTBEAT(this Msg_heartbeat msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.fightstatus;
			offset += 1;
			return 0;
		}

		internal static int Serialize_PING(this Msg_ping msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
			bitconverter.GetBytes(msg.seq, bytes, offset + 8);
			bytes[offset + 12] = msg.target_system;
			bytes[offset + 13] = msg.target_component;
			offset += 14;
			return 4;
		}

		internal static int Serialize_ContrlMode(this Msg_contrlmode msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.contrlmode;
			offset += 1;
			return 20;
		}

		internal static int Serialize_SpeedMode(this Msg_speedmode msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.speedmode;
			offset += 1;
			return 21;
		}

		internal static int Serialize_GPS_STATUS(this Msg_gps_status msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.satellites_visible;
			ByteArrayUtil.ToByteArray(msg.satellite_prn, bytes, offset + 1, 20);
			ByteArrayUtil.ToByteArray(msg.satellite_used, bytes, offset + 21, 20);
			ByteArrayUtil.ToByteArray(msg.satellite_elevation, bytes, offset + 41, 20);
			ByteArrayUtil.ToByteArray(msg.satellite_azimuth, bytes, offset + 61, 20);
			ByteArrayUtil.ToByteArray(msg.satellite_snr, bytes, offset + 81, 20);
			offset += 101;
			return 25;
		}

		internal static int Serialize_ATTITUDE(this Msg_attitude msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.roll, bytes, offset + 4);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 8);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 12);
			bitconverter.GetBytes(msg.rollspeed, bytes, offset + 16);
			bitconverter.GetBytes(msg.pitchspeed, bytes, offset + 20);
			bitconverter.GetBytes(msg.yawspeed, bytes, offset + 24);
			offset += 28;
			return 30;
		}

		internal static int Serialize_ATTITUDE_EXT(this Msg_attitude_ext msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.Aacceleration_X, bytes, offset + 4);
			bitconverter.GetBytes(msg.Aacceleration_Y, bytes, offset + 8);
			bitconverter.GetBytes(msg.Aacceleration_Z, bytes, offset + 12);
			bitconverter.GetBytes(msg.BarometricAltitude, bytes, offset + 16);
			bitconverter.GetBytes(msg.MicroAltitude, bytes, offset + 20);
			bitconverter.GetBytes(msg.Pressure, bytes, offset + 24);
			offset += 28;
			return 31;
		}

		internal static int Serialize_GLOBAL_POSITION_INT(this Msg_global_position_int msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.lat, bytes, offset + 4);
			bitconverter.GetBytes(msg.lon, bytes, offset + 8);
			bitconverter.GetBytes(msg.alt, bytes, offset + 12);
			bitconverter.GetBytes(msg.relative_alt, bytes, offset + 16);
			bitconverter.GetBytes(msg.vx, bytes, offset + 20);
			bitconverter.GetBytes(msg.vy, bytes, offset + 22);
			bitconverter.GetBytes(msg.vz, bytes, offset + 24);
			bitconverter.GetBytes(msg.hdg, bytes, offset + 26);
			offset += 28;
			return 33;
		}

		internal static int Serialize_GLOBAL_POSITION_INT_EXT(this Msg_global_position_int_ext msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bitconverter.GetBytes(msg.GPSSpeed, bytes, offset + 4);
			bitconverter.GetBytes(msg.GPSYaw, bytes, offset + 8);
			bitconverter.GetBytes(msg.SatellitesCount, bytes, offset + 12);
			bitconverter.GetBytes(msg.PositionalAccuracy, bytes, offset + 16);
			bitconverter.GetBytes(msg.HorizontalAccuracy, bytes, offset + 20);
			bitconverter.GetBytes(msg.VerticalAccuracy, bytes, offset + 22);
			offset += 24;
			return 34;
		}

		internal static int Serialize_FunctionStatus(this Msg_functionstatus msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			ByteArrayUtil.ToByteArray(msg.functionname, bytes, offset + 4, 50);
			bytes[offset + 54] = msg.status;
			offset += 55;
			return 80;
		}

		internal static int Serialize_SetFunctionStatus(this Msg_setfunctionstatus msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			ByteArrayUtil.ToByteArray(msg.functionname, bytes, offset + 4, 50);
			bytes[offset + 54] = msg.status;
			offset += 55;
			return 81;
		}

		internal static int Serialize_LOG(this Msg_log msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.time_boot_ms, bytes, offset + 0);
			bytes[offset + 4] = msg.logtype;
			ByteArrayUtil.ToByteArray(msg.logtext, bytes, offset + 5, 50);
			offset += 55;
			return 90;
		}

		internal static int Serialize_HOME_POSITION(this Msg_home_position msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.latitude, bytes, offset + 0);
			bitconverter.GetBytes(msg.longitude, bytes, offset + 4);
			bitconverter.GetBytes(msg.altitude, bytes, offset + 8);
			bitconverter.GetBytes(msg.x, bytes, offset + 12);
			bitconverter.GetBytes(msg.y, bytes, offset + 16);
			bitconverter.GetBytes(msg.z, bytes, offset + 20);
			ByteArrayUtil.ToByteArray(msg.q, bytes, offset + 24, 4);
			bitconverter.GetBytes(msg.approach_x, bytes, offset + 40);
			bitconverter.GetBytes(msg.approach_y, bytes, offset + 44);
			bitconverter.GetBytes(msg.approach_z, bytes, offset + 48);
			offset += 52;
			return 242;
		}
	}

}

