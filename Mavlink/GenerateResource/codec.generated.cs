

/*
MAVLink protocol implementation (auto-generated by mavgen.py)

Note: this file has been auto-generated. DO NOT EDIT
*/

using System;
using System.Collections;
using System.Collections.Generic;

namespace MavLink
{
    public static class MavlinkSettings
    {
        public const string WireProtocolVersion = "1.0";
        public const byte ProtocolMarker = 0xfe;
        public const bool CrcExtra = true;
        public const bool IsLittleEndian = true;
    }

    public delegate MavlinkMessage MavlinkPacketDeserializeFunc(byte[] bytes, int offset);

    //returns the message ID, offset is advanced by the number of bytes used to serialize
    public delegate int MavlinkPacketSerializeFunc(byte[] bytes, ref int offset, object mavlinkPacket);

    public class MavPacketInfo
    {
        public MavlinkPacketDeserializeFunc Deserializer;
        public int[] OrderMap;
        public byte CrcExtra;

        public MavPacketInfo(MavlinkPacketDeserializeFunc deserializer, byte crcExtra)
        {
            this.Deserializer = deserializer;
            this.CrcExtra = crcExtra;
        }
    }

    public static class MavLinkSerializer
    {
        public static void SetDataIsLittleEndian(bool isLittle)
        {
            bitconverter.SetDataIsLittleEndian(isLittle);
        }

        private static readonly FrameworkBitConverter bitconverter = new FrameworkBitConverter();

        public static Dictionary<int, MavPacketInfo> Lookup = new Dictionary<int, MavPacketInfo>
        {
            {0, new MavPacketInfo(Deserialize_HEARTBEAT, 185)},
            {4, new MavPacketInfo(Deserialize_PING, 237)},
            {20, new MavPacketInfo(Deserialize_CONTROLMODE, 131)},
            {21, new MavPacketInfo(Deserialize_SPEEDMODE, 19)},
            {25, new MavPacketInfo(Deserialize_GPS_STATUS, 116)},
            {30, new MavPacketInfo(Deserialize_ATTITUDE, 224)},
            {31, new MavPacketInfo(Deserialize_ATTITUDE_EXT, 147)},
            {33, new MavPacketInfo(Deserialize_GLOBAL_POSITION_INT, 240)},
            {34, new MavPacketInfo(Deserialize_GLOBAL_POSITION_INT_EXT, 111)},
            {50, new MavPacketInfo(Deserialize_CONTROLINFO, 235)},
            {80, new MavPacketInfo(Deserialize_FUNCTIONSTATUS, 159)},
            {81, new MavPacketInfo(Deserialize_SETFUNCTIONSTATUS, 212)},
            {90, new MavPacketInfo(Deserialize_LOG, 186)},
            {242, new MavPacketInfo(Deserialize_HOME_POSITION, 1)},
        };

        internal static MavlinkMessage Deserialize_HEARTBEAT(byte[] bytes, int offset)
        {
            return new Msg_heartbeat
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                fightstatus = bytes[offset + 8],
            };
        }

        internal static MavlinkMessage Deserialize_PING(byte[] bytes, int offset)
        {
            return new Msg_ping
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                seq = bitconverter.ToUInt32(bytes, offset + 8),
                target_system = bytes[offset + 12],
                target_component = bytes[offset + 13],
            };
        }

        internal static MavlinkMessage Deserialize_CONTROLMODE(byte[] bytes, int offset)
        {
            return new Msg_controlmode
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                contrlmode = bytes[offset + 8],
            };
        }

        internal static MavlinkMessage Deserialize_SPEEDMODE(byte[] bytes, int offset)
        {
            return new Msg_speedmode
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                speedmode = bytes[offset + 8],
            };
        }

        internal static MavlinkMessage Deserialize_GPS_STATUS(byte[] bytes, int offset)
        {
            return new Msg_gps_status
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                satellites_visible = bytes[offset + 8],
                satellite_prn = ByteArrayUtil.ToUInt8(bytes, offset + 9, 20),
                satellite_used = ByteArrayUtil.ToUInt8(bytes, offset + 29, 20),
                satellite_elevation = ByteArrayUtil.ToUInt8(bytes, offset + 49, 20),
                satellite_azimuth = ByteArrayUtil.ToUInt8(bytes, offset + 69, 20),
                satellite_snr = ByteArrayUtil.ToUInt8(bytes, offset + 89, 20),
            };
        }

        internal static MavlinkMessage Deserialize_ATTITUDE(byte[] bytes, int offset)
        {
            return new Msg_attitude
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                roll = bitconverter.ToSingle(bytes, offset + 8),
                pitch = bitconverter.ToSingle(bytes, offset + 12),
                yaw = bitconverter.ToSingle(bytes, offset + 16),
                rollspeed = bitconverter.ToSingle(bytes, offset + 20),
                pitchspeed = bitconverter.ToSingle(bytes, offset + 24),
                yawspeed = bitconverter.ToSingle(bytes, offset + 28),
            };
        }

        internal static MavlinkMessage Deserialize_ATTITUDE_EXT(byte[] bytes, int offset)
        {
            return new Msg_attitude_ext
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                Aacceleration_X = bitconverter.ToSingle(bytes, offset + 8),
                Aacceleration_Y = bitconverter.ToSingle(bytes, offset + 12),
                Aacceleration_Z = bitconverter.ToSingle(bytes, offset + 16),
                BarometricAltitude = bitconverter.ToSingle(bytes, offset + 20),
                MicroAltitude = bitconverter.ToSingle(bytes, offset + 24),
                Pressure = bitconverter.ToSingle(bytes, offset + 28),
            };
        }

        internal static MavlinkMessage Deserialize_GLOBAL_POSITION_INT(byte[] bytes, int offset)
        {
            return new Msg_global_position_int
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                lat = bitconverter.ToInt32(bytes, offset + 8),
                lon = bitconverter.ToInt32(bytes, offset + 12),
                alt = bitconverter.ToInt32(bytes, offset + 16),
                relative_alt = bitconverter.ToInt32(bytes, offset + 20),
                vx = bitconverter.ToInt16(bytes, offset + 24),
                vy = bitconverter.ToInt16(bytes, offset + 26),
                vz = bitconverter.ToInt16(bytes, offset + 28),
                hdg = bitconverter.ToUInt16(bytes, offset + 30),
            };
        }

        internal static MavlinkMessage Deserialize_GLOBAL_POSITION_INT_EXT(byte[] bytes, int offset)
        {
            return new Msg_global_position_int_ext
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                GPSSpeed = bitconverter.ToInt32(bytes, offset + 8),
                GPSYaw = bitconverter.ToInt32(bytes, offset + 12),
                SatellitesCount = bitconverter.ToInt32(bytes, offset + 16),
                PositionalAccuracy = bitconverter.ToInt32(bytes, offset + 20),
                HorizontalAccuracy = bitconverter.ToInt16(bytes, offset + 24),
                VerticalAccuracy = bitconverter.ToInt16(bytes, offset + 26),
            };
        }

        internal static MavlinkMessage Deserialize_CONTROLINFO(byte[] bytes, int offset)
        {
            return new Msg_controlinfo
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                roll = bitconverter.ToInt32(bytes, offset + 8),
                pitch = bitconverter.ToInt32(bytes, offset + 12),
                yaw = bitconverter.ToInt32(bytes, offset + 16),
                airbreak = bitconverter.ToInt32(bytes, offset + 20),
                flaps = bitconverter.ToInt32(bytes, offset + 24),
                trim = bitconverter.ToInt32(bytes, offset + 28),
                throttel = bitconverter.ToInt32(bytes, offset + 32),
                gear = bitconverter.ToInt32(bytes, offset + 36),
                pushback = bitconverter.ToInt32(bytes, offset + 40),
                enpwl = bitconverter.ToInt32(bytes, offset + 44),
                enpwr = bitconverter.ToInt32(bytes, offset + 48),
            };
        }

        internal static MavlinkMessage Deserialize_FUNCTIONSTATUS(byte[] bytes, int offset)
        {
            return new Msg_functionstatus
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                functionname = ByteArrayUtil.ToChar(bytes, offset + 8, 50),
                status = bytes[offset + 58],
            };
        }

        internal static MavlinkMessage Deserialize_SETFUNCTIONSTATUS(byte[] bytes, int offset)
        {
            return new Msg_setfunctionstatus
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                functionname = ByteArrayUtil.ToChar(bytes, offset + 8, 50),
                status = bytes[offset + 58],
            };
        }

        internal static MavlinkMessage Deserialize_LOG(byte[] bytes, int offset)
        {
            return new Msg_log
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                logtype = bytes[offset + 8],
                logtext = ByteArrayUtil.ToChar(bytes, offset + 9, 200),
            };
        }

        internal static MavlinkMessage Deserialize_HOME_POSITION(byte[] bytes, int offset)
        {
            return new Msg_home_position
            {
                time_usec = bitconverter.ToUInt64(bytes, offset + 0),
                latitude = bitconverter.ToInt32(bytes, offset + 8),
                longitude = bitconverter.ToInt32(bytes, offset + 12),
                altitude = bitconverter.ToInt32(bytes, offset + 16),
                x = bitconverter.ToSingle(bytes, offset + 20),
                y = bitconverter.ToSingle(bytes, offset + 24),
                z = bitconverter.ToSingle(bytes, offset + 28),
                q = ByteArrayUtil.ToSingle(bytes, offset + 32, 4),
                approach_x = bitconverter.ToSingle(bytes, offset + 48),
                approach_y = bitconverter.ToSingle(bytes, offset + 52),
                approach_z = bitconverter.ToSingle(bytes, offset + 56),
            };
        }

        internal static int Serialize_HEARTBEAT(this Msg_heartbeat msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            bytes[offset + 8] = msg.fightstatus;
            offset += 9;
            return 0;
        }

        internal static int Serialize_PING(this Msg_ping msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            bitconverter.GetBytes(msg.seq, bytes, offset + 8);
            bytes[offset + 12] = msg.target_system;
            bytes[offset + 13] = msg.target_component;
            offset += 14;
            return 4;
        }

        internal static int Serialize_CONTROLMODE(this Msg_controlmode msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            bytes[offset + 8] = msg.contrlmode;
            offset += 9;
            return 20;
        }

        internal static int Serialize_SPEEDMODE(this Msg_speedmode msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            bytes[offset + 8] = msg.speedmode;
            offset += 9;
            return 21;
        }

        internal static int Serialize_GPS_STATUS(this Msg_gps_status msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            bytes[offset + 8] = msg.satellites_visible;
            ByteArrayUtil.ToByteArray(msg.satellite_prn, bytes, offset + 9, 20);
            ByteArrayUtil.ToByteArray(msg.satellite_used, bytes, offset + 29, 20);
            ByteArrayUtil.ToByteArray(msg.satellite_elevation, bytes, offset + 49, 20);
            ByteArrayUtil.ToByteArray(msg.satellite_azimuth, bytes, offset + 69, 20);
            ByteArrayUtil.ToByteArray(msg.satellite_snr, bytes, offset + 89, 20);
            offset += 109;
            return 25;
        }

        internal static int Serialize_ATTITUDE(this Msg_attitude msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            bitconverter.GetBytes(msg.roll, bytes, offset + 8);
            bitconverter.GetBytes(msg.pitch, bytes, offset + 12);
            bitconverter.GetBytes(msg.yaw, bytes, offset + 16);
            bitconverter.GetBytes(msg.rollspeed, bytes, offset + 20);
            bitconverter.GetBytes(msg.pitchspeed, bytes, offset + 24);
            bitconverter.GetBytes(msg.yawspeed, bytes, offset + 28);
            offset += 32;
            return 30;
        }

        internal static int Serialize_ATTITUDE_EXT(this Msg_attitude_ext msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            bitconverter.GetBytes(msg.Aacceleration_X, bytes, offset + 8);
            bitconverter.GetBytes(msg.Aacceleration_Y, bytes, offset + 12);
            bitconverter.GetBytes(msg.Aacceleration_Z, bytes, offset + 16);
            bitconverter.GetBytes(msg.BarometricAltitude, bytes, offset + 20);
            bitconverter.GetBytes(msg.MicroAltitude, bytes, offset + 24);
            bitconverter.GetBytes(msg.Pressure, bytes, offset + 28);
            offset += 32;
            return 31;
        }

        internal static int Serialize_GLOBAL_POSITION_INT(this Msg_global_position_int msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            bitconverter.GetBytes(msg.lat, bytes, offset + 8);
            bitconverter.GetBytes(msg.lon, bytes, offset + 12);
            bitconverter.GetBytes(msg.alt, bytes, offset + 16);
            bitconverter.GetBytes(msg.relative_alt, bytes, offset + 20);
            bitconverter.GetBytes(msg.vx, bytes, offset + 24);
            bitconverter.GetBytes(msg.vy, bytes, offset + 26);
            bitconverter.GetBytes(msg.vz, bytes, offset + 28);
            bitconverter.GetBytes(msg.hdg, bytes, offset + 30);
            offset += 32;
            return 33;
        }

        internal static int Serialize_GLOBAL_POSITION_INT_EXT(this Msg_global_position_int_ext msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            bitconverter.GetBytes(msg.GPSSpeed, bytes, offset + 8);
            bitconverter.GetBytes(msg.GPSYaw, bytes, offset + 12);
            bitconverter.GetBytes(msg.SatellitesCount, bytes, offset + 16);
            bitconverter.GetBytes(msg.PositionalAccuracy, bytes, offset + 20);
            bitconverter.GetBytes(msg.HorizontalAccuracy, bytes, offset + 24);
            bitconverter.GetBytes(msg.VerticalAccuracy, bytes, offset + 26);
            offset += 28;
            return 34;
        }

        internal static int Serialize_CONTROLINFO(this Msg_controlinfo msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            bitconverter.GetBytes(msg.roll, bytes, offset + 8);
            bitconverter.GetBytes(msg.pitch, bytes, offset + 12);
            bitconverter.GetBytes(msg.yaw, bytes, offset + 16);
            bitconverter.GetBytes(msg.airbreak, bytes, offset + 20);
            bitconverter.GetBytes(msg.flaps, bytes, offset + 24);
            bitconverter.GetBytes(msg.trim, bytes, offset + 28);
            bitconverter.GetBytes(msg.throttel, bytes, offset + 32);
            bitconverter.GetBytes(msg.gear, bytes, offset + 36);
            bitconverter.GetBytes(msg.pushback, bytes, offset + 40);
            bitconverter.GetBytes(msg.enpwl, bytes, offset + 44);
            bitconverter.GetBytes(msg.enpwr, bytes, offset + 48);
            offset += 52;
            return 50;
        }

        internal static int Serialize_FUNCTIONSTATUS(this Msg_functionstatus msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            ByteArrayUtil.ToByteArray(msg.functionname, bytes, offset + 8, 50);
            bytes[offset + 58] = msg.status;
            offset += 59;
            return 80;
        }

        internal static int Serialize_SETFUNCTIONSTATUS(this Msg_setfunctionstatus msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            ByteArrayUtil.ToByteArray(msg.functionname, bytes, offset + 8, 50);
            bytes[offset + 58] = msg.status;
            offset += 59;
            return 81;
        }

        internal static int Serialize_LOG(this Msg_log msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            bytes[offset + 8] = msg.logtype;
            ByteArrayUtil.ToByteArray(msg.logtext, bytes, offset + 9, 200);
            offset += 209;
            return 90;
        }

        internal static int Serialize_HOME_POSITION(this Msg_home_position msg, byte[] bytes, ref int offset)
        {
            bitconverter.GetBytes(msg.time_usec, bytes, offset + 0);
            bitconverter.GetBytes(msg.latitude, bytes, offset + 8);
            bitconverter.GetBytes(msg.longitude, bytes, offset + 12);
            bitconverter.GetBytes(msg.altitude, bytes, offset + 16);
            bitconverter.GetBytes(msg.x, bytes, offset + 20);
            bitconverter.GetBytes(msg.y, bytes, offset + 24);
            bitconverter.GetBytes(msg.z, bytes, offset + 28);
            ByteArrayUtil.ToByteArray(msg.q, bytes, offset + 32, 4);
            bitconverter.GetBytes(msg.approach_x, bytes, offset + 48);
            bitconverter.GetBytes(msg.approach_y, bytes, offset + 52);
            bitconverter.GetBytes(msg.approach_z, bytes, offset + 56);
            offset += 60;
            return 242;
        }
    }

}

